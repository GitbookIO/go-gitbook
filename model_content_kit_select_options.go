/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// ContentKitSelectOptions - struct for ContentKitSelectOptions
type ContentKitSelectOptions struct {
	ContentKitSelectOptionsOneOf  *ContentKitSelectOptionsOneOf
	ArrayOfContentKitSelectOption *[]ContentKitSelectOption
}

// ContentKitSelectOptionsOneOfAsContentKitSelectOptions is a convenience function that returns ContentKitSelectOptionsOneOf wrapped in ContentKitSelectOptions
func ContentKitSelectOptionsOneOfAsContentKitSelectOptions(v *ContentKitSelectOptionsOneOf) ContentKitSelectOptions {
	return ContentKitSelectOptions{
		ContentKitSelectOptionsOneOf: v,
	}
}

// []ContentKitSelectOptionAsContentKitSelectOptions is a convenience function that returns []ContentKitSelectOption wrapped in ContentKitSelectOptions
func ArrayOfContentKitSelectOptionAsContentKitSelectOptions(v *[]ContentKitSelectOption) ContentKitSelectOptions {
	return ContentKitSelectOptions{
		ArrayOfContentKitSelectOption: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentKitSelectOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContentKitSelectOptionsOneOf
	err = newStrictDecoder(data).Decode(&dst.ContentKitSelectOptionsOneOf)
	if err == nil {
		jsonContentKitSelectOptionsOneOf, _ := json.Marshal(dst.ContentKitSelectOptionsOneOf)
		if string(jsonContentKitSelectOptionsOneOf) == "{}" { // empty struct
			dst.ContentKitSelectOptionsOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitSelectOptionsOneOf = nil
	}

	// try to unmarshal data into ArrayOfContentKitSelectOption
	err = newStrictDecoder(data).Decode(&dst.ArrayOfContentKitSelectOption)
	if err == nil {
		jsonArrayOfContentKitSelectOption, _ := json.Marshal(dst.ArrayOfContentKitSelectOption)
		if string(jsonArrayOfContentKitSelectOption) == "{}" { // empty struct
			dst.ArrayOfContentKitSelectOption = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfContentKitSelectOption = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContentKitSelectOptionsOneOf = nil
		dst.ArrayOfContentKitSelectOption = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentKitSelectOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentKitSelectOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentKitSelectOptions) MarshalJSON() ([]byte, error) {
	if src.ContentKitSelectOptionsOneOf != nil {
		return json.Marshal(&src.ContentKitSelectOptionsOneOf)
	}

	if src.ArrayOfContentKitSelectOption != nil {
		return json.Marshal(&src.ArrayOfContentKitSelectOption)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentKitSelectOptions) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ContentKitSelectOptionsOneOf != nil {
		return obj.ContentKitSelectOptionsOneOf
	}

	if obj.ArrayOfContentKitSelectOption != nil {
		return obj.ArrayOfContentKitSelectOption
	}

	// all schemas are nil
	return nil
}

type NullableContentKitSelectOptions struct {
	value *ContentKitSelectOptions
	isSet bool
}

func (v NullableContentKitSelectOptions) Get() *ContentKitSelectOptions {
	return v.value
}

func (v *NullableContentKitSelectOptions) Set(val *ContentKitSelectOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitSelectOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitSelectOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitSelectOptions(val *ContentKitSelectOptions) *NullableContentKitSelectOptions {
	return &NullableContentKitSelectOptions{value: val, isSet: true}
}

func (v NullableContentKitSelectOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitSelectOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
