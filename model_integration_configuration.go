/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationConfiguration{}

// IntegrationConfiguration Schema for a configuration
type IntegrationConfiguration struct {
	Properties map[string]IntegrationConfigurationPropertiesValue `json:"properties"`
	Required   []string                                           `json:"required,omitempty"`
}

// NewIntegrationConfiguration instantiates a new IntegrationConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationConfiguration(properties map[string]IntegrationConfigurationPropertiesValue) *IntegrationConfiguration {
	this := IntegrationConfiguration{}
	this.Properties = properties
	return &this
}

// NewIntegrationConfigurationWithDefaults instantiates a new IntegrationConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationConfigurationWithDefaults() *IntegrationConfiguration {
	this := IntegrationConfiguration{}
	return &this
}

// GetProperties returns the Properties field value
func (o *IntegrationConfiguration) GetProperties() map[string]IntegrationConfigurationPropertiesValue {
	if o == nil {
		var ret map[string]IntegrationConfigurationPropertiesValue
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfiguration) GetPropertiesOk() (*map[string]IntegrationConfigurationPropertiesValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *IntegrationConfiguration) SetProperties(v map[string]IntegrationConfigurationPropertiesValue) {
	o.Properties = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *IntegrationConfiguration) GetRequired() []string {
	if o == nil || IsNil(o.Required) {
		var ret []string
		return ret
	}
	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfiguration) GetRequiredOk() ([]string, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *IntegrationConfiguration) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given []string and assigns it to the Required field.
func (o *IntegrationConfiguration) SetRequired(v []string) {
	o.Required = v
}

func (o IntegrationConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["properties"] = o.Properties
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableIntegrationConfiguration struct {
	value *IntegrationConfiguration
	isSet bool
}

func (v NullableIntegrationConfiguration) Get() *IntegrationConfiguration {
	return v.value
}

func (v *NullableIntegrationConfiguration) Set(val *IntegrationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationConfiguration(val *IntegrationConfiguration) *NullableIntegrationConfiguration {
	return &NullableIntegrationConfiguration{value: val, isSet: true}
}

func (v NullableIntegrationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
