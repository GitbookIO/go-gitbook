/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the UIRenderEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UIRenderEventAllOf{}

// UIRenderEventAllOf Event generated when rendering a UI
type UIRenderEventAllOf struct {
	Auth        *FetchEventAllOfAuth `json:"auth,omitempty"`
	Type        string               `json:"type"`
	ComponentId string               `json:"componentId"`
	// Properties to render the UI.
	Props map[string]interface{} `json:"props"`
	// State of the UI.
	State   map[string]interface{} `json:"state,omitempty"`
	Context ContentKitContext      `json:"context"`
	Action  map[string]interface{} `json:"action,omitempty"`
}

// NewUIRenderEventAllOf instantiates a new UIRenderEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUIRenderEventAllOf(type_ string, componentId string, props map[string]interface{}, context ContentKitContext) *UIRenderEventAllOf {
	this := UIRenderEventAllOf{}
	this.Type = type_
	this.ComponentId = componentId
	this.Props = props
	this.Context = context
	return &this
}

// NewUIRenderEventAllOfWithDefaults instantiates a new UIRenderEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUIRenderEventAllOfWithDefaults() *UIRenderEventAllOf {
	this := UIRenderEventAllOf{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *UIRenderEventAllOf) GetAuth() FetchEventAllOfAuth {
	if o == nil || IsNil(o.Auth) {
		var ret FetchEventAllOfAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIRenderEventAllOf) GetAuthOk() (*FetchEventAllOfAuth, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *UIRenderEventAllOf) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given FetchEventAllOfAuth and assigns it to the Auth field.
func (o *UIRenderEventAllOf) SetAuth(v FetchEventAllOfAuth) {
	o.Auth = &v
}

// GetType returns the Type field value
func (o *UIRenderEventAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UIRenderEventAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UIRenderEventAllOf) SetType(v string) {
	o.Type = v
}

// GetComponentId returns the ComponentId field value
func (o *UIRenderEventAllOf) GetComponentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value
// and a boolean to check if the value has been set.
func (o *UIRenderEventAllOf) GetComponentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentId, true
}

// SetComponentId sets field value
func (o *UIRenderEventAllOf) SetComponentId(v string) {
	o.ComponentId = v
}

// GetProps returns the Props field value
func (o *UIRenderEventAllOf) GetProps() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Props
}

// GetPropsOk returns a tuple with the Props field value
// and a boolean to check if the value has been set.
func (o *UIRenderEventAllOf) GetPropsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Props, true
}

// SetProps sets field value
func (o *UIRenderEventAllOf) SetProps(v map[string]interface{}) {
	o.Props = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UIRenderEventAllOf) GetState() map[string]interface{} {
	if o == nil || IsNil(o.State) {
		var ret map[string]interface{}
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIRenderEventAllOf) GetStateOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.State) {
		return map[string]interface{}{}, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UIRenderEventAllOf) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given map[string]interface{} and assigns it to the State field.
func (o *UIRenderEventAllOf) SetState(v map[string]interface{}) {
	o.State = v
}

// GetContext returns the Context field value
func (o *UIRenderEventAllOf) GetContext() ContentKitContext {
	if o == nil {
		var ret ContentKitContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *UIRenderEventAllOf) GetContextOk() (*ContentKitContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *UIRenderEventAllOf) SetContext(v ContentKitContext) {
	o.Context = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *UIRenderEventAllOf) GetAction() map[string]interface{} {
	if o == nil || IsNil(o.Action) {
		var ret map[string]interface{}
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIRenderEventAllOf) GetActionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Action) {
		return map[string]interface{}{}, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *UIRenderEventAllOf) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given map[string]interface{} and assigns it to the Action field.
func (o *UIRenderEventAllOf) SetAction(v map[string]interface{}) {
	o.Action = v
}

func (o UIRenderEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UIRenderEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	toSerialize["type"] = o.Type
	toSerialize["componentId"] = o.ComponentId
	toSerialize["props"] = o.Props
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["context"] = o.Context
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableUIRenderEventAllOf struct {
	value *UIRenderEventAllOf
	isSet bool
}

func (v NullableUIRenderEventAllOf) Get() *UIRenderEventAllOf {
	return v.value
}

func (v *NullableUIRenderEventAllOf) Set(val *UIRenderEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUIRenderEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUIRenderEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUIRenderEventAllOf(val *UIRenderEventAllOf) *NullableUIRenderEventAllOf {
	return &NullableUIRenderEventAllOf{value: val, isSet: true}
}

func (v NullableUIRenderEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUIRenderEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
