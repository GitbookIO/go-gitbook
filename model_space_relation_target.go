/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// SpaceRelationTarget - Other space in the relation. If undefined, the current user doesn't have access to it.
type SpaceRelationTarget struct {
	Space             *Space
	SpaceRelationEdge *SpaceRelationEdge
}

// SpaceAsSpaceRelationTarget is a convenience function that returns Space wrapped in SpaceRelationTarget
func SpaceAsSpaceRelationTarget(v *Space) SpaceRelationTarget {
	return SpaceRelationTarget{
		Space: v,
	}
}

// SpaceRelationEdgeAsSpaceRelationTarget is a convenience function that returns SpaceRelationEdge wrapped in SpaceRelationTarget
func SpaceRelationEdgeAsSpaceRelationTarget(v *SpaceRelationEdge) SpaceRelationTarget {
	return SpaceRelationTarget{
		SpaceRelationEdge: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpaceRelationTarget) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Space
	err = newStrictDecoder(data).Decode(&dst.Space)
	if err == nil {
		jsonSpace, _ := json.Marshal(dst.Space)
		if string(jsonSpace) == "{}" { // empty struct
			dst.Space = nil
		} else {
			match++
		}
	} else {
		dst.Space = nil
	}

	// try to unmarshal data into SpaceRelationEdge
	err = newStrictDecoder(data).Decode(&dst.SpaceRelationEdge)
	if err == nil {
		jsonSpaceRelationEdge, _ := json.Marshal(dst.SpaceRelationEdge)
		if string(jsonSpaceRelationEdge) == "{}" { // empty struct
			dst.SpaceRelationEdge = nil
		} else {
			match++
		}
	} else {
		dst.SpaceRelationEdge = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Space = nil
		dst.SpaceRelationEdge = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpaceRelationTarget)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpaceRelationTarget)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpaceRelationTarget) MarshalJSON() ([]byte, error) {
	if src.Space != nil {
		return json.Marshal(&src.Space)
	}

	if src.SpaceRelationEdge != nil {
		return json.Marshal(&src.SpaceRelationEdge)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpaceRelationTarget) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Space != nil {
		return obj.Space
	}

	if obj.SpaceRelationEdge != nil {
		return obj.SpaceRelationEdge
	}

	// all schemas are nil
	return nil
}

type NullableSpaceRelationTarget struct {
	value *SpaceRelationTarget
	isSet bool
}

func (v NullableSpaceRelationTarget) Get() *SpaceRelationTarget {
	return v.value
}

func (v *NullableSpaceRelationTarget) Set(val *SpaceRelationTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceRelationTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceRelationTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceRelationTarget(val *SpaceRelationTarget) *NullableSpaceRelationTarget {
	return &NullableSpaceRelationTarget{value: val, isSet: true}
}

func (v NullableSpaceRelationTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceRelationTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
