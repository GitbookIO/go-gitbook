/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the CommentAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentAllOf{}

// CommentAllOf struct for CommentAllOf
type CommentAllOf struct {
	// Type of Object, always equals to \"comment\"
	Object string `json:"object"`
	// Unique identifier for the comment.
	Id        string          `json:"id"`
	PostedBy  User            `json:"postedBy"`
	PostedAt  string          `json:"postedAt"`
	EditedAt  *string         `json:"editedAt,omitempty"`
	Reactions []EmojiReaction `json:"reactions"`
	// The number of replies to this comment.
	Replies float32            `json:"replies"`
	Body    Document           `json:"body"`
	Target  CommentAllOfTarget `json:"target"`
	Urls    CommentAllOfUrls   `json:"urls"`
}

// NewCommentAllOf instantiates a new CommentAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentAllOf(object string, id string, postedBy User, postedAt string, reactions []EmojiReaction, replies float32, body Document, target CommentAllOfTarget, urls CommentAllOfUrls) *CommentAllOf {
	this := CommentAllOf{}
	this.Object = object
	this.Id = id
	this.PostedBy = postedBy
	this.PostedAt = postedAt
	this.Reactions = reactions
	this.Replies = replies
	this.Body = body
	this.Target = target
	this.Urls = urls
	return &this
}

// NewCommentAllOfWithDefaults instantiates a new CommentAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentAllOfWithDefaults() *CommentAllOf {
	this := CommentAllOf{}
	return &this
}

// GetObject returns the Object field value
func (o *CommentAllOf) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *CommentAllOf) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *CommentAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CommentAllOf) SetId(v string) {
	o.Id = v
}

// GetPostedBy returns the PostedBy field value
func (o *CommentAllOf) GetPostedBy() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.PostedBy
}

// GetPostedByOk returns a tuple with the PostedBy field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetPostedByOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostedBy, true
}

// SetPostedBy sets field value
func (o *CommentAllOf) SetPostedBy(v User) {
	o.PostedBy = v
}

// GetPostedAt returns the PostedAt field value
func (o *CommentAllOf) GetPostedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostedAt
}

// GetPostedAtOk returns a tuple with the PostedAt field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetPostedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostedAt, true
}

// SetPostedAt sets field value
func (o *CommentAllOf) SetPostedAt(v string) {
	o.PostedAt = v
}

// GetEditedAt returns the EditedAt field value if set, zero value otherwise.
func (o *CommentAllOf) GetEditedAt() string {
	if o == nil || IsNil(o.EditedAt) {
		var ret string
		return ret
	}
	return *o.EditedAt
}

// GetEditedAtOk returns a tuple with the EditedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetEditedAtOk() (*string, bool) {
	if o == nil || IsNil(o.EditedAt) {
		return nil, false
	}
	return o.EditedAt, true
}

// HasEditedAt returns a boolean if a field has been set.
func (o *CommentAllOf) HasEditedAt() bool {
	if o != nil && !IsNil(o.EditedAt) {
		return true
	}

	return false
}

// SetEditedAt gets a reference to the given string and assigns it to the EditedAt field.
func (o *CommentAllOf) SetEditedAt(v string) {
	o.EditedAt = &v
}

// GetReactions returns the Reactions field value
func (o *CommentAllOf) GetReactions() []EmojiReaction {
	if o == nil {
		var ret []EmojiReaction
		return ret
	}

	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetReactionsOk() ([]EmojiReaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reactions, true
}

// SetReactions sets field value
func (o *CommentAllOf) SetReactions(v []EmojiReaction) {
	o.Reactions = v
}

// GetReplies returns the Replies field value
func (o *CommentAllOf) GetReplies() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Replies
}

// GetRepliesOk returns a tuple with the Replies field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetRepliesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replies, true
}

// SetReplies sets field value
func (o *CommentAllOf) SetReplies(v float32) {
	o.Replies = v
}

// GetBody returns the Body field value
func (o *CommentAllOf) GetBody() Document {
	if o == nil {
		var ret Document
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetBodyOk() (*Document, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CommentAllOf) SetBody(v Document) {
	o.Body = v
}

// GetTarget returns the Target field value
func (o *CommentAllOf) GetTarget() CommentAllOfTarget {
	if o == nil {
		var ret CommentAllOfTarget
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetTargetOk() (*CommentAllOfTarget, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *CommentAllOf) SetTarget(v CommentAllOfTarget) {
	o.Target = v
}

// GetUrls returns the Urls field value
func (o *CommentAllOf) GetUrls() CommentAllOfUrls {
	if o == nil {
		var ret CommentAllOfUrls
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *CommentAllOf) GetUrlsOk() (*CommentAllOfUrls, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Urls, true
}

// SetUrls sets field value
func (o *CommentAllOf) SetUrls(v CommentAllOfUrls) {
	o.Urls = v
}

func (o CommentAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["postedBy"] = o.PostedBy
	toSerialize["postedAt"] = o.PostedAt
	if !IsNil(o.EditedAt) {
		toSerialize["editedAt"] = o.EditedAt
	}
	toSerialize["reactions"] = o.Reactions
	toSerialize["replies"] = o.Replies
	toSerialize["body"] = o.Body
	toSerialize["target"] = o.Target
	toSerialize["urls"] = o.Urls
	return toSerialize, nil
}

type NullableCommentAllOf struct {
	value *CommentAllOf
	isSet bool
}

func (v NullableCommentAllOf) Get() *CommentAllOf {
	return v.value
}

func (v *NullableCommentAllOf) Set(val *CommentAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentAllOf(val *CommentAllOf) *NullableCommentAllOf {
	return &NullableCommentAllOf{value: val, isSet: true}
}

func (v NullableCommentAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
