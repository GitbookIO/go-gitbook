/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// IntegrationConfigurationPropertiesValueAllOf1 - struct for IntegrationConfigurationPropertiesValueAllOf1
type IntegrationConfigurationPropertiesValueAllOf1 struct {
	IntegrationConfigurationPropertiesValueAllOf1OneOf  *IntegrationConfigurationPropertiesValueAllOf1OneOf
	IntegrationConfigurationPropertiesValueAllOf1OneOf1 *IntegrationConfigurationPropertiesValueAllOf1OneOf1
	IntegrationConfigurationPropertiesValueAllOf1OneOf2 *IntegrationConfigurationPropertiesValueAllOf1OneOf2
	IntegrationConfigurationPropertiesValueAllOf1OneOf3 *IntegrationConfigurationPropertiesValueAllOf1OneOf3
}

// IntegrationConfigurationPropertiesValueAllOf1OneOfAsIntegrationConfigurationPropertiesValueAllOf1 is a convenience function that returns IntegrationConfigurationPropertiesValueAllOf1OneOf wrapped in IntegrationConfigurationPropertiesValueAllOf1
func IntegrationConfigurationPropertiesValueAllOf1OneOfAsIntegrationConfigurationPropertiesValueAllOf1(v *IntegrationConfigurationPropertiesValueAllOf1OneOf) IntegrationConfigurationPropertiesValueAllOf1 {
	return IntegrationConfigurationPropertiesValueAllOf1{
		IntegrationConfigurationPropertiesValueAllOf1OneOf: v,
	}
}

// IntegrationConfigurationPropertiesValueAllOf1OneOf1AsIntegrationConfigurationPropertiesValueAllOf1 is a convenience function that returns IntegrationConfigurationPropertiesValueAllOf1OneOf1 wrapped in IntegrationConfigurationPropertiesValueAllOf1
func IntegrationConfigurationPropertiesValueAllOf1OneOf1AsIntegrationConfigurationPropertiesValueAllOf1(v *IntegrationConfigurationPropertiesValueAllOf1OneOf1) IntegrationConfigurationPropertiesValueAllOf1 {
	return IntegrationConfigurationPropertiesValueAllOf1{
		IntegrationConfigurationPropertiesValueAllOf1OneOf1: v,
	}
}

// IntegrationConfigurationPropertiesValueAllOf1OneOf2AsIntegrationConfigurationPropertiesValueAllOf1 is a convenience function that returns IntegrationConfigurationPropertiesValueAllOf1OneOf2 wrapped in IntegrationConfigurationPropertiesValueAllOf1
func IntegrationConfigurationPropertiesValueAllOf1OneOf2AsIntegrationConfigurationPropertiesValueAllOf1(v *IntegrationConfigurationPropertiesValueAllOf1OneOf2) IntegrationConfigurationPropertiesValueAllOf1 {
	return IntegrationConfigurationPropertiesValueAllOf1{
		IntegrationConfigurationPropertiesValueAllOf1OneOf2: v,
	}
}

// IntegrationConfigurationPropertiesValueAllOf1OneOf3AsIntegrationConfigurationPropertiesValueAllOf1 is a convenience function that returns IntegrationConfigurationPropertiesValueAllOf1OneOf3 wrapped in IntegrationConfigurationPropertiesValueAllOf1
func IntegrationConfigurationPropertiesValueAllOf1OneOf3AsIntegrationConfigurationPropertiesValueAllOf1(v *IntegrationConfigurationPropertiesValueAllOf1OneOf3) IntegrationConfigurationPropertiesValueAllOf1 {
	return IntegrationConfigurationPropertiesValueAllOf1{
		IntegrationConfigurationPropertiesValueAllOf1OneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntegrationConfigurationPropertiesValueAllOf1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntegrationConfigurationPropertiesValueAllOf1OneOf
	err = newStrictDecoder(data).Decode(&dst.IntegrationConfigurationPropertiesValueAllOf1OneOf)
	if err == nil {
		jsonIntegrationConfigurationPropertiesValueAllOf1OneOf, _ := json.Marshal(dst.IntegrationConfigurationPropertiesValueAllOf1OneOf)
		if string(jsonIntegrationConfigurationPropertiesValueAllOf1OneOf) == "{}" { // empty struct
			dst.IntegrationConfigurationPropertiesValueAllOf1OneOf = nil
		} else {
			match++
		}
	} else {
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf = nil
	}

	// try to unmarshal data into IntegrationConfigurationPropertiesValueAllOf1OneOf1
	err = newStrictDecoder(data).Decode(&dst.IntegrationConfigurationPropertiesValueAllOf1OneOf1)
	if err == nil {
		jsonIntegrationConfigurationPropertiesValueAllOf1OneOf1, _ := json.Marshal(dst.IntegrationConfigurationPropertiesValueAllOf1OneOf1)
		if string(jsonIntegrationConfigurationPropertiesValueAllOf1OneOf1) == "{}" { // empty struct
			dst.IntegrationConfigurationPropertiesValueAllOf1OneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf1 = nil
	}

	// try to unmarshal data into IntegrationConfigurationPropertiesValueAllOf1OneOf2
	err = newStrictDecoder(data).Decode(&dst.IntegrationConfigurationPropertiesValueAllOf1OneOf2)
	if err == nil {
		jsonIntegrationConfigurationPropertiesValueAllOf1OneOf2, _ := json.Marshal(dst.IntegrationConfigurationPropertiesValueAllOf1OneOf2)
		if string(jsonIntegrationConfigurationPropertiesValueAllOf1OneOf2) == "{}" { // empty struct
			dst.IntegrationConfigurationPropertiesValueAllOf1OneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf2 = nil
	}

	// try to unmarshal data into IntegrationConfigurationPropertiesValueAllOf1OneOf3
	err = newStrictDecoder(data).Decode(&dst.IntegrationConfigurationPropertiesValueAllOf1OneOf3)
	if err == nil {
		jsonIntegrationConfigurationPropertiesValueAllOf1OneOf3, _ := json.Marshal(dst.IntegrationConfigurationPropertiesValueAllOf1OneOf3)
		if string(jsonIntegrationConfigurationPropertiesValueAllOf1OneOf3) == "{}" { // empty struct
			dst.IntegrationConfigurationPropertiesValueAllOf1OneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf = nil
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf1 = nil
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf2 = nil
		dst.IntegrationConfigurationPropertiesValueAllOf1OneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntegrationConfigurationPropertiesValueAllOf1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntegrationConfigurationPropertiesValueAllOf1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntegrationConfigurationPropertiesValueAllOf1) MarshalJSON() ([]byte, error) {
	if src.IntegrationConfigurationPropertiesValueAllOf1OneOf != nil {
		return json.Marshal(&src.IntegrationConfigurationPropertiesValueAllOf1OneOf)
	}

	if src.IntegrationConfigurationPropertiesValueAllOf1OneOf1 != nil {
		return json.Marshal(&src.IntegrationConfigurationPropertiesValueAllOf1OneOf1)
	}

	if src.IntegrationConfigurationPropertiesValueAllOf1OneOf2 != nil {
		return json.Marshal(&src.IntegrationConfigurationPropertiesValueAllOf1OneOf2)
	}

	if src.IntegrationConfigurationPropertiesValueAllOf1OneOf3 != nil {
		return json.Marshal(&src.IntegrationConfigurationPropertiesValueAllOf1OneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntegrationConfigurationPropertiesValueAllOf1) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IntegrationConfigurationPropertiesValueAllOf1OneOf != nil {
		return obj.IntegrationConfigurationPropertiesValueAllOf1OneOf
	}

	if obj.IntegrationConfigurationPropertiesValueAllOf1OneOf1 != nil {
		return obj.IntegrationConfigurationPropertiesValueAllOf1OneOf1
	}

	if obj.IntegrationConfigurationPropertiesValueAllOf1OneOf2 != nil {
		return obj.IntegrationConfigurationPropertiesValueAllOf1OneOf2
	}

	if obj.IntegrationConfigurationPropertiesValueAllOf1OneOf3 != nil {
		return obj.IntegrationConfigurationPropertiesValueAllOf1OneOf3
	}

	// all schemas are nil
	return nil
}

type NullableIntegrationConfigurationPropertiesValueAllOf1 struct {
	value *IntegrationConfigurationPropertiesValueAllOf1
	isSet bool
}

func (v NullableIntegrationConfigurationPropertiesValueAllOf1) Get() *IntegrationConfigurationPropertiesValueAllOf1 {
	return v.value
}

func (v *NullableIntegrationConfigurationPropertiesValueAllOf1) Set(val *IntegrationConfigurationPropertiesValueAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationConfigurationPropertiesValueAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationConfigurationPropertiesValueAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationConfigurationPropertiesValueAllOf1(val *IntegrationConfigurationPropertiesValueAllOf1) *NullableIntegrationConfigurationPropertiesValueAllOf1 {
	return &NullableIntegrationConfigurationPropertiesValueAllOf1{value: val, isSet: true}
}

func (v NullableIntegrationConfigurationPropertiesValueAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationConfigurationPropertiesValueAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
