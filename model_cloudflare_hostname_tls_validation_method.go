/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// CloudflareHostnameTLSValidationMethod The Cloudflare Hostname TLS validation method
type CloudflareHostnameTLSValidationMethod string

// List of CloudflareHostnameTLSValidationMethod
const (
	CLOUDFLAREHOSTNAMETLSVALIDATIONMETHOD_HTTP  CloudflareHostnameTLSValidationMethod = "http"
	CLOUDFLAREHOSTNAMETLSVALIDATIONMETHOD_TXT   CloudflareHostnameTLSValidationMethod = "txt"
	CLOUDFLAREHOSTNAMETLSVALIDATIONMETHOD_EMAIL CloudflareHostnameTLSValidationMethod = "email"
)

// All allowed values of CloudflareHostnameTLSValidationMethod enum
var AllowedCloudflareHostnameTLSValidationMethodEnumValues = []CloudflareHostnameTLSValidationMethod{
	"http",
	"txt",
	"email",
}

func (v *CloudflareHostnameTLSValidationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudflareHostnameTLSValidationMethod(value)
	for _, existing := range AllowedCloudflareHostnameTLSValidationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudflareHostnameTLSValidationMethod", value)
}

// NewCloudflareHostnameTLSValidationMethodFromValue returns a pointer to a valid CloudflareHostnameTLSValidationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudflareHostnameTLSValidationMethodFromValue(v string) (*CloudflareHostnameTLSValidationMethod, error) {
	ev := CloudflareHostnameTLSValidationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudflareHostnameTLSValidationMethod: valid values are %v", v, AllowedCloudflareHostnameTLSValidationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudflareHostnameTLSValidationMethod) IsValid() bool {
	for _, existing := range AllowedCloudflareHostnameTLSValidationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudflareHostnameTLSValidationMethod value
func (v CloudflareHostnameTLSValidationMethod) Ptr() *CloudflareHostnameTLSValidationMethod {
	return &v
}

type NullableCloudflareHostnameTLSValidationMethod struct {
	value *CloudflareHostnameTLSValidationMethod
	isSet bool
}

func (v NullableCloudflareHostnameTLSValidationMethod) Get() *CloudflareHostnameTLSValidationMethod {
	return v.value
}

func (v *NullableCloudflareHostnameTLSValidationMethod) Set(val *CloudflareHostnameTLSValidationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudflareHostnameTLSValidationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudflareHostnameTLSValidationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudflareHostnameTLSValidationMethod(val *CloudflareHostnameTLSValidationMethod) *NullableCloudflareHostnameTLSValidationMethod {
	return &NullableCloudflareHostnameTLSValidationMethod{value: val, isSet: true}
}

func (v NullableCloudflareHostnameTLSValidationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudflareHostnameTLSValidationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
