/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// ContentKitContext - struct for ContentKitContext
type ContentKitContext struct {
	ContentKitContextOneOf *ContentKitContextOneOf
}

// ContentKitContextOneOfAsContentKitContext is a convenience function that returns ContentKitContextOneOf wrapped in ContentKitContext
func ContentKitContextOneOfAsContentKitContext(v *ContentKitContextOneOf) ContentKitContext {
	return ContentKitContext{
		ContentKitContextOneOf: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentKitContext) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContentKitContextOneOf
	err = newStrictDecoder(data).Decode(&dst.ContentKitContextOneOf)
	if err == nil {
		jsonContentKitContextOneOf, _ := json.Marshal(dst.ContentKitContextOneOf)
		if string(jsonContentKitContextOneOf) == "{}" { // empty struct
			dst.ContentKitContextOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitContextOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContentKitContextOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentKitContext)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentKitContext)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentKitContext) MarshalJSON() ([]byte, error) {
	if src.ContentKitContextOneOf != nil {
		return json.Marshal(&src.ContentKitContextOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentKitContext) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ContentKitContextOneOf != nil {
		return obj.ContentKitContextOneOf
	}

	// all schemas are nil
	return nil
}

type NullableContentKitContext struct {
	value *ContentKitContext
	isSet bool
}

func (v NullableContentKitContext) Get() *ContentKitContext {
	return v.value
}

func (v *NullableContentKitContext) Set(val *ContentKitContext) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitContext) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitContext(val *ContentKitContext) *NullableContentKitContext {
	return &NullableContentKitContext{value: val, isSet: true}
}

func (v NullableContentKitContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
