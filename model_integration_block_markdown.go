/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// IntegrationBlockMarkdown - struct for IntegrationBlockMarkdown
type IntegrationBlockMarkdown struct {
	IntegrationBlockMarkdownOneOf *IntegrationBlockMarkdownOneOf
}

// IntegrationBlockMarkdownOneOfAsIntegrationBlockMarkdown is a convenience function that returns IntegrationBlockMarkdownOneOf wrapped in IntegrationBlockMarkdown
func IntegrationBlockMarkdownOneOfAsIntegrationBlockMarkdown(v *IntegrationBlockMarkdownOneOf) IntegrationBlockMarkdown {
	return IntegrationBlockMarkdown{
		IntegrationBlockMarkdownOneOf: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntegrationBlockMarkdown) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntegrationBlockMarkdownOneOf
	err = newStrictDecoder(data).Decode(&dst.IntegrationBlockMarkdownOneOf)
	if err == nil {
		jsonIntegrationBlockMarkdownOneOf, _ := json.Marshal(dst.IntegrationBlockMarkdownOneOf)
		if string(jsonIntegrationBlockMarkdownOneOf) == "{}" { // empty struct
			dst.IntegrationBlockMarkdownOneOf = nil
		} else {
			match++
		}
	} else {
		dst.IntegrationBlockMarkdownOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntegrationBlockMarkdownOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntegrationBlockMarkdown)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntegrationBlockMarkdown)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntegrationBlockMarkdown) MarshalJSON() ([]byte, error) {
	if src.IntegrationBlockMarkdownOneOf != nil {
		return json.Marshal(&src.IntegrationBlockMarkdownOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntegrationBlockMarkdown) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IntegrationBlockMarkdownOneOf != nil {
		return obj.IntegrationBlockMarkdownOneOf
	}

	// all schemas are nil
	return nil
}

type NullableIntegrationBlockMarkdown struct {
	value *IntegrationBlockMarkdown
	isSet bool
}

func (v NullableIntegrationBlockMarkdown) Get() *IntegrationBlockMarkdown {
	return v.value
}

func (v *NullableIntegrationBlockMarkdown) Set(val *IntegrationBlockMarkdown) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationBlockMarkdown) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationBlockMarkdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationBlockMarkdown(val *IntegrationBlockMarkdown) *NullableIntegrationBlockMarkdown {
	return &NullableIntegrationBlockMarkdown{value: val, isSet: true}
}

func (v NullableIntegrationBlockMarkdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationBlockMarkdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
