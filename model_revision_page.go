/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// RevisionPage - struct for RevisionPage
type RevisionPage struct {
	RevisionPageDocument *RevisionPageDocument
	RevisionPageGroup    *RevisionPageGroup
	RevisionPageLink     *RevisionPageLink
}

// RevisionPageDocumentAsRevisionPage is a convenience function that returns RevisionPageDocument wrapped in RevisionPage
func RevisionPageDocumentAsRevisionPage(v *RevisionPageDocument) RevisionPage {
	return RevisionPage{
		RevisionPageDocument: v,
	}
}

// RevisionPageGroupAsRevisionPage is a convenience function that returns RevisionPageGroup wrapped in RevisionPage
func RevisionPageGroupAsRevisionPage(v *RevisionPageGroup) RevisionPage {
	return RevisionPage{
		RevisionPageGroup: v,
	}
}

// RevisionPageLinkAsRevisionPage is a convenience function that returns RevisionPageLink wrapped in RevisionPage
func RevisionPageLinkAsRevisionPage(v *RevisionPageLink) RevisionPage {
	return RevisionPage{
		RevisionPageLink: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RevisionPage) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RevisionPageDocument
	err = newStrictDecoder(data).Decode(&dst.RevisionPageDocument)
	if err == nil {
		jsonRevisionPageDocument, _ := json.Marshal(dst.RevisionPageDocument)
		if string(jsonRevisionPageDocument) == "{}" { // empty struct
			dst.RevisionPageDocument = nil
		} else {
			match++
		}
	} else {
		dst.RevisionPageDocument = nil
	}

	// try to unmarshal data into RevisionPageGroup
	err = newStrictDecoder(data).Decode(&dst.RevisionPageGroup)
	if err == nil {
		jsonRevisionPageGroup, _ := json.Marshal(dst.RevisionPageGroup)
		if string(jsonRevisionPageGroup) == "{}" { // empty struct
			dst.RevisionPageGroup = nil
		} else {
			match++
		}
	} else {
		dst.RevisionPageGroup = nil
	}

	// try to unmarshal data into RevisionPageLink
	err = newStrictDecoder(data).Decode(&dst.RevisionPageLink)
	if err == nil {
		jsonRevisionPageLink, _ := json.Marshal(dst.RevisionPageLink)
		if string(jsonRevisionPageLink) == "{}" { // empty struct
			dst.RevisionPageLink = nil
		} else {
			match++
		}
	} else {
		dst.RevisionPageLink = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RevisionPageDocument = nil
		dst.RevisionPageGroup = nil
		dst.RevisionPageLink = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RevisionPage)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RevisionPage)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RevisionPage) MarshalJSON() ([]byte, error) {
	if src.RevisionPageDocument != nil {
		return json.Marshal(&src.RevisionPageDocument)
	}

	if src.RevisionPageGroup != nil {
		return json.Marshal(&src.RevisionPageGroup)
	}

	if src.RevisionPageLink != nil {
		return json.Marshal(&src.RevisionPageLink)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RevisionPage) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RevisionPageDocument != nil {
		return obj.RevisionPageDocument
	}

	if obj.RevisionPageGroup != nil {
		return obj.RevisionPageGroup
	}

	if obj.RevisionPageLink != nil {
		return obj.RevisionPageLink
	}

	// all schemas are nil
	return nil
}

type NullableRevisionPage struct {
	value *RevisionPage
	isSet bool
}

func (v NullableRevisionPage) Get() *RevisionPage {
	return v.value
}

func (v *NullableRevisionPage) Set(val *RevisionPage) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionPage) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionPage(val *RevisionPage) *NullableRevisionPage {
	return &NullableRevisionPage{value: val, isSet: true}
}

func (v NullableRevisionPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
