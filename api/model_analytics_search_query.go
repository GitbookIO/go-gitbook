// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the AnalyticsSearchQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsSearchQuery{}

// AnalyticsSearchQuery Analytics entry for a search query.
type AnalyticsSearchQuery struct {
	Query string `json:"query"`
	// Number of searches done by users.
	Searches float32 `json:"searches"`
	// Number of objects matching this search.
	Hits float32 `json:"hits"`
	// Number of pages matching this search.
	PageHits float32 `json:"pageHits"`
	// Number of sections matching this search.
	SectionHits float32 `json:"sectionHits"`
}

// NewAnalyticsSearchQuery instantiates a new AnalyticsSearchQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsSearchQuery(query string, searches float32, hits float32, pageHits float32, sectionHits float32) *AnalyticsSearchQuery {
	this := AnalyticsSearchQuery{}
	this.Query = query
	this.Searches = searches
	this.Hits = hits
	this.PageHits = pageHits
	this.SectionHits = sectionHits
	return &this
}

// NewAnalyticsSearchQueryWithDefaults instantiates a new AnalyticsSearchQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsSearchQueryWithDefaults() *AnalyticsSearchQuery {
	this := AnalyticsSearchQuery{}
	return &this
}

// GetQuery returns the Query field value
func (o *AnalyticsSearchQuery) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *AnalyticsSearchQuery) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *AnalyticsSearchQuery) SetQuery(v string) {
	o.Query = v
}

// GetSearches returns the Searches field value
func (o *AnalyticsSearchQuery) GetSearches() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Searches
}

// GetSearchesOk returns a tuple with the Searches field value
// and a boolean to check if the value has been set.
func (o *AnalyticsSearchQuery) GetSearchesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Searches, true
}

// SetSearches sets field value
func (o *AnalyticsSearchQuery) SetSearches(v float32) {
	o.Searches = v
}

// GetHits returns the Hits field value
func (o *AnalyticsSearchQuery) GetHits() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value
// and a boolean to check if the value has been set.
func (o *AnalyticsSearchQuery) GetHitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hits, true
}

// SetHits sets field value
func (o *AnalyticsSearchQuery) SetHits(v float32) {
	o.Hits = v
}

// GetPageHits returns the PageHits field value
func (o *AnalyticsSearchQuery) GetPageHits() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PageHits
}

// GetPageHitsOk returns a tuple with the PageHits field value
// and a boolean to check if the value has been set.
func (o *AnalyticsSearchQuery) GetPageHitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageHits, true
}

// SetPageHits sets field value
func (o *AnalyticsSearchQuery) SetPageHits(v float32) {
	o.PageHits = v
}

// GetSectionHits returns the SectionHits field value
func (o *AnalyticsSearchQuery) GetSectionHits() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SectionHits
}

// GetSectionHitsOk returns a tuple with the SectionHits field value
// and a boolean to check if the value has been set.
func (o *AnalyticsSearchQuery) GetSectionHitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionHits, true
}

// SetSectionHits sets field value
func (o *AnalyticsSearchQuery) SetSectionHits(v float32) {
	o.SectionHits = v
}

func (o AnalyticsSearchQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsSearchQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	toSerialize["searches"] = o.Searches
	toSerialize["hits"] = o.Hits
	toSerialize["pageHits"] = o.PageHits
	toSerialize["sectionHits"] = o.SectionHits
	return toSerialize, nil
}

type NullableAnalyticsSearchQuery struct {
	value *AnalyticsSearchQuery
	isSet bool
}

func (v NullableAnalyticsSearchQuery) Get() *AnalyticsSearchQuery {
	return v.value
}

func (v *NullableAnalyticsSearchQuery) Set(val *AnalyticsSearchQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsSearchQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsSearchQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsSearchQuery(val *AnalyticsSearchQuery) *NullableAnalyticsSearchQuery {
	return &NullableAnalyticsSearchQuery{value: val, isSet: true}
}

func (v NullableAnalyticsSearchQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsSearchQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
