// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the GitSyncState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitSyncState{}

// GitSyncState struct for GitSyncState
type GitSyncState struct {
	// The provider of the Git Sync installation.
	InstallationProvider *string           `json:"installationProvider,omitempty"`
	Operation            *GitSyncOperation `json:"operation,omitempty"`
	// The URL to the repository tree, used when rendering public content.
	Url       *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// NewGitSyncState instantiates a new GitSyncState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitSyncState() *GitSyncState {
	this := GitSyncState{}
	return &this
}

// NewGitSyncStateWithDefaults instantiates a new GitSyncState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitSyncStateWithDefaults() *GitSyncState {
	this := GitSyncState{}
	return &this
}

// GetInstallationProvider returns the InstallationProvider field value if set, zero value otherwise.
func (o *GitSyncState) GetInstallationProvider() string {
	if o == nil || IsNil(o.InstallationProvider) {
		var ret string
		return ret
	}
	return *o.InstallationProvider
}

// GetInstallationProviderOk returns a tuple with the InstallationProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSyncState) GetInstallationProviderOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationProvider) {
		return nil, false
	}
	return o.InstallationProvider, true
}

// HasInstallationProvider returns a boolean if a field has been set.
func (o *GitSyncState) HasInstallationProvider() bool {
	if o != nil && !IsNil(o.InstallationProvider) {
		return true
	}

	return false
}

// SetInstallationProvider gets a reference to the given string and assigns it to the InstallationProvider field.
func (o *GitSyncState) SetInstallationProvider(v string) {
	o.InstallationProvider = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *GitSyncState) GetOperation() GitSyncOperation {
	if o == nil || IsNil(o.Operation) {
		var ret GitSyncOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSyncState) GetOperationOk() (*GitSyncOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *GitSyncState) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given GitSyncOperation and assigns it to the Operation field.
func (o *GitSyncState) SetOperation(v GitSyncOperation) {
	o.Operation = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GitSyncState) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSyncState) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GitSyncState) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GitSyncState) SetUrl(v string) {
	o.Url = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GitSyncState) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSyncState) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GitSyncState) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *GitSyncState) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o GitSyncState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitSyncState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstallationProvider) {
		toSerialize["installationProvider"] = o.InstallationProvider
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableGitSyncState struct {
	value *GitSyncState
	isSet bool
}

func (v NullableGitSyncState) Get() *GitSyncState {
	return v.value
}

func (v *NullableGitSyncState) Set(val *GitSyncState) {
	v.value = val
	v.isSet = true
}

func (v NullableGitSyncState) IsSet() bool {
	return v.isSet
}

func (v *NullableGitSyncState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitSyncState(val *GitSyncState) *NullableGitSyncState {
	return &NullableGitSyncState{value: val, isSet: true}
}

func (v NullableGitSyncState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitSyncState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
