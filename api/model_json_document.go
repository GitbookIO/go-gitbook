/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the JSONDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONDocument{}

// JSONDocument struct for JSONDocument
type JSONDocument struct {
	Document JSONDocumentDocument `json:"document"`
}

// NewJSONDocument instantiates a new JSONDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONDocument(document JSONDocumentDocument) *JSONDocument {
	this := JSONDocument{}
	this.Document = document
	return &this
}

// NewJSONDocumentWithDefaults instantiates a new JSONDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONDocumentWithDefaults() *JSONDocument {
	this := JSONDocument{}
	return &this
}

// GetDocument returns the Document field value
func (o *JSONDocument) GetDocument() JSONDocumentDocument {
	if o == nil {
		var ret JSONDocumentDocument
		return ret
	}

	return o.Document
}

// GetDocumentOk returns a tuple with the Document field value
// and a boolean to check if the value has been set.
func (o *JSONDocument) GetDocumentOk() (*JSONDocumentDocument, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Document, true
}

// SetDocument sets field value
func (o *JSONDocument) SetDocument(v JSONDocumentDocument) {
	o.Document = v
}

func (o JSONDocument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["document"] = o.Document
	return toSerialize, nil
}

type NullableJSONDocument struct {
	value *JSONDocument
	isSet bool
}

func (v NullableJSONDocument) Get() *JSONDocument {
	return v.value
}

func (v *NullableJSONDocument) Set(val *JSONDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONDocument(val *JSONDocument) *NullableJSONDocument {
	return &NullableJSONDocument{value: val, isSet: true}
}

func (v NullableJSONDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
