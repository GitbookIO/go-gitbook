/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// IntegrationCategory the model 'IntegrationCategory'
type IntegrationCategory string

// List of IntegrationCategory
const (
	INTEGRATIONCATEGORY_ANALYTICS     IntegrationCategory = "analytics"
	INTEGRATIONCATEGORY_COLLABORATION IntegrationCategory = "collaboration"
	INTEGRATIONCATEGORY_MARKETING     IntegrationCategory = "marketing"
	INTEGRATIONCATEGORY_CONTENT       IntegrationCategory = "content"
	INTEGRATIONCATEGORY_GITSYNC       IntegrationCategory = "gitsync"
	INTEGRATIONCATEGORY_OTHER         IntegrationCategory = "other"
)

// All allowed values of IntegrationCategory enum
var AllowedIntegrationCategoryEnumValues = []IntegrationCategory{
	"analytics",
	"collaboration",
	"marketing",
	"content",
	"gitsync",
	"other",
}

func (v *IntegrationCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationCategory(value)
	for _, existing := range AllowedIntegrationCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationCategory", value)
}

// NewIntegrationCategoryFromValue returns a pointer to a valid IntegrationCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationCategoryFromValue(v string) (*IntegrationCategory, error) {
	ev := IntegrationCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationCategory: valid values are %v", v, AllowedIntegrationCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationCategory) IsValid() bool {
	for _, existing := range AllowedIntegrationCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationCategory value
func (v IntegrationCategory) Ptr() *IntegrationCategory {
	return &v
}

type NullableIntegrationCategory struct {
	value *IntegrationCategory
	isSet bool
}

func (v NullableIntegrationCategory) Get() *IntegrationCategory {
	return v.value
}

func (v *NullableIntegrationCategory) Set(val *IntegrationCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationCategory(val *IntegrationCategory) *NullableIntegrationCategory {
	return &NullableIntegrationCategory{value: val, isSet: true}
}

func (v NullableIntegrationCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
