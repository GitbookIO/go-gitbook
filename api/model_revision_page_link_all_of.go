// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RevisionPageLinkAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevisionPageLinkAllOf{}

// RevisionPageLinkAllOf struct for RevisionPageLinkAllOf
type RevisionPageLinkAllOf struct {
	// Deprecated
	Kind string  `json:"kind"`
	Type string  `json:"type"`
	Href *string `json:"href,omitempty"`
}

// NewRevisionPageLinkAllOf instantiates a new RevisionPageLinkAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionPageLinkAllOf(kind string, type_ string) *RevisionPageLinkAllOf {
	this := RevisionPageLinkAllOf{}
	this.Kind = kind
	this.Type = type_
	return &this
}

// NewRevisionPageLinkAllOfWithDefaults instantiates a new RevisionPageLinkAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionPageLinkAllOfWithDefaults() *RevisionPageLinkAllOf {
	this := RevisionPageLinkAllOf{}
	return &this
}

// GetKind returns the Kind field value
// Deprecated
func (o *RevisionPageLinkAllOf) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *RevisionPageLinkAllOf) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
// Deprecated
func (o *RevisionPageLinkAllOf) SetKind(v string) {
	o.Kind = v
}

// GetType returns the Type field value
func (o *RevisionPageLinkAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RevisionPageLinkAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RevisionPageLinkAllOf) SetType(v string) {
	o.Type = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RevisionPageLinkAllOf) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionPageLinkAllOf) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RevisionPageLinkAllOf) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RevisionPageLinkAllOf) SetHref(v string) {
	o.Href = &v
}

func (o RevisionPageLinkAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevisionPageLinkAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["type"] = o.Type
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	return toSerialize, nil
}

type NullableRevisionPageLinkAllOf struct {
	value *RevisionPageLinkAllOf
	isSet bool
}

func (v NullableRevisionPageLinkAllOf) Get() *RevisionPageLinkAllOf {
	return v.value
}

func (v *NullableRevisionPageLinkAllOf) Set(val *RevisionPageLinkAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionPageLinkAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionPageLinkAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionPageLinkAllOf(val *RevisionPageLinkAllOf) *NullableRevisionPageLinkAllOf {
	return &NullableRevisionPageLinkAllOf{value: val, isSet: true}
}

func (v NullableRevisionPageLinkAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionPageLinkAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
