// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// CloudflareHostnameTLSStatus The Cloudflare Hostname TLS status
type CloudflareHostnameTLSStatus string

// List of CloudflareHostnameTLSStatus
const (
	CLOUDFLAREHOSTNAMETLSSTATUS_INITIALIZING       CloudflareHostnameTLSStatus = "initializing"
	CLOUDFLAREHOSTNAMETLSSTATUS_PENDING_VALIDATION CloudflareHostnameTLSStatus = "pending_validation"
	CLOUDFLAREHOSTNAMETLSSTATUS_PENDING_ISSUANCE   CloudflareHostnameTLSStatus = "pending_issuance"
	CLOUDFLAREHOSTNAMETLSSTATUS_PENDING_DEPLOYMENT CloudflareHostnameTLSStatus = "pending_deployment"
	CLOUDFLAREHOSTNAMETLSSTATUS_ACTIVE             CloudflareHostnameTLSStatus = "active"
	CLOUDFLAREHOSTNAMETLSSTATUS_PENDING_DELETION   CloudflareHostnameTLSStatus = "pending_deletion"
	CLOUDFLAREHOSTNAMETLSSTATUS_PENDING_CLEANUP    CloudflareHostnameTLSStatus = "pending_cleanup"
	CLOUDFLAREHOSTNAMETLSSTATUS_DELETED            CloudflareHostnameTLSStatus = "deleted"
)

// All allowed values of CloudflareHostnameTLSStatus enum
var AllowedCloudflareHostnameTLSStatusEnumValues = []CloudflareHostnameTLSStatus{
	"initializing",
	"pending_validation",
	"pending_issuance",
	"pending_deployment",
	"active",
	"pending_deletion",
	"pending_cleanup",
	"deleted",
}

func (v *CloudflareHostnameTLSStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudflareHostnameTLSStatus(value)
	for _, existing := range AllowedCloudflareHostnameTLSStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudflareHostnameTLSStatus", value)
}

// NewCloudflareHostnameTLSStatusFromValue returns a pointer to a valid CloudflareHostnameTLSStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudflareHostnameTLSStatusFromValue(v string) (*CloudflareHostnameTLSStatus, error) {
	ev := CloudflareHostnameTLSStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudflareHostnameTLSStatus: valid values are %v", v, AllowedCloudflareHostnameTLSStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudflareHostnameTLSStatus) IsValid() bool {
	for _, existing := range AllowedCloudflareHostnameTLSStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudflareHostnameTLSStatus value
func (v CloudflareHostnameTLSStatus) Ptr() *CloudflareHostnameTLSStatus {
	return &v
}

type NullableCloudflareHostnameTLSStatus struct {
	value *CloudflareHostnameTLSStatus
	isSet bool
}

func (v NullableCloudflareHostnameTLSStatus) Get() *CloudflareHostnameTLSStatus {
	return v.value
}

func (v *NullableCloudflareHostnameTLSStatus) Set(val *CloudflareHostnameTLSStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudflareHostnameTLSStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudflareHostnameTLSStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudflareHostnameTLSStatus(val *CloudflareHostnameTLSStatus) *NullableCloudflareHostnameTLSStatus {
	return &NullableCloudflareHostnameTLSStatus{value: val, isSet: true}
}

func (v NullableCloudflareHostnameTLSStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudflareHostnameTLSStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
