/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationEventTrace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationEventTrace{}

// IntegrationEventTrace struct for IntegrationEventTrace
type IntegrationEventTrace struct {
	Logs []IntegrationEventLog `json:"logs"`
}

// NewIntegrationEventTrace instantiates a new IntegrationEventTrace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationEventTrace(logs []IntegrationEventLog) *IntegrationEventTrace {
	this := IntegrationEventTrace{}
	this.Logs = logs
	return &this
}

// NewIntegrationEventTraceWithDefaults instantiates a new IntegrationEventTrace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationEventTraceWithDefaults() *IntegrationEventTrace {
	this := IntegrationEventTrace{}
	return &this
}

// GetLogs returns the Logs field value
func (o *IntegrationEventTrace) GetLogs() []IntegrationEventLog {
	if o == nil {
		var ret []IntegrationEventLog
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *IntegrationEventTrace) GetLogsOk() ([]IntegrationEventLog, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logs, true
}

// SetLogs sets field value
func (o *IntegrationEventTrace) SetLogs(v []IntegrationEventLog) {
	o.Logs = v
}

func (o IntegrationEventTrace) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationEventTrace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logs"] = o.Logs
	return toSerialize, nil
}

type NullableIntegrationEventTrace struct {
	value *IntegrationEventTrace
	isSet bool
}

func (v NullableIntegrationEventTrace) Get() *IntegrationEventTrace {
	return v.value
}

func (v *NullableIntegrationEventTrace) Set(val *IntegrationEventTrace) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationEventTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationEventTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationEventTrace(val *IntegrationEventTrace) *NullableIntegrationEventTrace {
	return &NullableIntegrationEventTrace{value: val, isSet: true}
}

func (v NullableIntegrationEventTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationEventTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
