/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the UserContentPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserContentPermission{}

// UserContentPermission Permission of a user in a content.
type UserContentPermission struct {
	Permission MemberRole `json:"permission"`
	User       User       `json:"user"`
}

// NewUserContentPermission instantiates a new UserContentPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserContentPermission(permission MemberRole, user User) *UserContentPermission {
	this := UserContentPermission{}
	this.Permission = permission
	this.User = user
	return &this
}

// NewUserContentPermissionWithDefaults instantiates a new UserContentPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserContentPermissionWithDefaults() *UserContentPermission {
	this := UserContentPermission{}
	return &this
}

// GetPermission returns the Permission field value
func (o *UserContentPermission) GetPermission() MemberRole {
	if o == nil {
		var ret MemberRole
		return ret
	}

	return o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value
// and a boolean to check if the value has been set.
func (o *UserContentPermission) GetPermissionOk() (*MemberRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permission, true
}

// SetPermission sets field value
func (o *UserContentPermission) SetPermission(v MemberRole) {
	o.Permission = v
}

// GetUser returns the User field value
func (o *UserContentPermission) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserContentPermission) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserContentPermission) SetUser(v User) {
	o.User = v
}

func (o UserContentPermission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserContentPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permission"] = o.Permission
	toSerialize["user"] = o.User
	return toSerialize, nil
}

type NullableUserContentPermission struct {
	value *UserContentPermission
	isSet bool
}

func (v NullableUserContentPermission) Get() *UserContentPermission {
	return v.value
}

func (v *NullableUserContentPermission) Set(val *UserContentPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableUserContentPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableUserContentPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserContentPermission(val *UserContentPermission) *NullableUserContentPermission {
	return &NullableUserContentPermission{value: val, isSet: true}
}

func (v NullableUserContentPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserContentPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
