// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2{}

// IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 struct for IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2
type IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 struct {
	Type    string `json:"type"`
	Default *bool  `json:"default,omitempty"`
}

// NewIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 instantiates a new IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2(type_ string) *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 {
	this := IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2{}
	this.Type = type_
	return &this
}

// NewIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2WithDefaults instantiates a new IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2WithDefaults() *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 {
	this := IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2{}
	return &this
}

// GetType returns the Type field value
func (o *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) SetType(v string) {
	o.Type = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) SetDefault(v bool) {
	o.Default = &v
}

func (o IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	return toSerialize, nil
}

type NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 struct {
	value *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2
	isSet bool
}

func (v NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) Get() *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 {
	return v.value
}

func (v *NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) Set(val *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2(val *IntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) *NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2 {
	return &NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2{value: val, isSet: true}
}

func (v NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationConfigurationSchemaPropertiesValueAllOf1OneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
