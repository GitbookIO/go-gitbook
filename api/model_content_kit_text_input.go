// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitTextInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitTextInput{}

// ContentKitTextInput Text input to prompt the user.
type ContentKitTextInput struct {
	Type string `json:"type"`
	// State binding. The value of the input will be stored as a property in the state named after this ID.
	State string `json:"state"`
	// Text value to initialize the input with.
	InitialValue *string `json:"initialValue,omitempty"`
	// Text that appears in the form control when it has no value set
	Placeholder *string `json:"placeholder,omitempty"`
	Multiline   *bool   `json:"multiline,omitempty"`
}

// NewContentKitTextInput instantiates a new ContentKitTextInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitTextInput(type_ string, state string) *ContentKitTextInput {
	this := ContentKitTextInput{}
	this.Type = type_
	this.State = state
	return &this
}

// NewContentKitTextInputWithDefaults instantiates a new ContentKitTextInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitTextInputWithDefaults() *ContentKitTextInput {
	this := ContentKitTextInput{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitTextInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitTextInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitTextInput) SetType(v string) {
	o.Type = v
}

// GetState returns the State field value
func (o *ContentKitTextInput) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ContentKitTextInput) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ContentKitTextInput) SetState(v string) {
	o.State = v
}

// GetInitialValue returns the InitialValue field value if set, zero value otherwise.
func (o *ContentKitTextInput) GetInitialValue() string {
	if o == nil || IsNil(o.InitialValue) {
		var ret string
		return ret
	}
	return *o.InitialValue
}

// GetInitialValueOk returns a tuple with the InitialValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitTextInput) GetInitialValueOk() (*string, bool) {
	if o == nil || IsNil(o.InitialValue) {
		return nil, false
	}
	return o.InitialValue, true
}

// HasInitialValue returns a boolean if a field has been set.
func (o *ContentKitTextInput) HasInitialValue() bool {
	if o != nil && !IsNil(o.InitialValue) {
		return true
	}

	return false
}

// SetInitialValue gets a reference to the given string and assigns it to the InitialValue field.
func (o *ContentKitTextInput) SetInitialValue(v string) {
	o.InitialValue = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *ContentKitTextInput) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitTextInput) GetPlaceholderOk() (*string, bool) {
	if o == nil || IsNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *ContentKitTextInput) HasPlaceholder() bool {
	if o != nil && !IsNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *ContentKitTextInput) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetMultiline returns the Multiline field value if set, zero value otherwise.
func (o *ContentKitTextInput) GetMultiline() bool {
	if o == nil || IsNil(o.Multiline) {
		var ret bool
		return ret
	}
	return *o.Multiline
}

// GetMultilineOk returns a tuple with the Multiline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitTextInput) GetMultilineOk() (*bool, bool) {
	if o == nil || IsNil(o.Multiline) {
		return nil, false
	}
	return o.Multiline, true
}

// HasMultiline returns a boolean if a field has been set.
func (o *ContentKitTextInput) HasMultiline() bool {
	if o != nil && !IsNil(o.Multiline) {
		return true
	}

	return false
}

// SetMultiline gets a reference to the given bool and assigns it to the Multiline field.
func (o *ContentKitTextInput) SetMultiline(v bool) {
	o.Multiline = &v
}

func (o ContentKitTextInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitTextInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["state"] = o.State
	if !IsNil(o.InitialValue) {
		toSerialize["initialValue"] = o.InitialValue
	}
	if !IsNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	if !IsNil(o.Multiline) {
		toSerialize["multiline"] = o.Multiline
	}
	return toSerialize, nil
}

type NullableContentKitTextInput struct {
	value *ContentKitTextInput
	isSet bool
}

func (v NullableContentKitTextInput) Get() *ContentKitTextInput {
	return v.value
}

func (v *NullableContentKitTextInput) Set(val *ContentKitTextInput) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitTextInput) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitTextInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitTextInput(val *ContentKitTextInput) *NullableContentKitTextInput {
	return &NullableContentKitTextInput{value: val, isSet: true}
}

func (v NullableContentKitTextInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitTextInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
