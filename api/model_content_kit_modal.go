/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitModal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitModal{}

// ContentKitModal Overlay modal.
type ContentKitModal struct {
	Type     string                    `json:"type"`
	Title    *string                   `json:"title,omitempty"`
	Subtitle []ContentKitInlineElement `json:"subtitle,omitempty"`
	Size     *string                   `json:"size,omitempty"`
	// Data passed back to the parent view when the modal is closed. These data are accessible in the \"@ui.modal.close\"
	ReturnValue map[string]interface{}        `json:"returnValue,omitempty"`
	Children    []ContentKitDescendantElement `json:"children"`
	Submit      *ContentKitButton             `json:"submit,omitempty"`
}

// NewContentKitModal instantiates a new ContentKitModal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitModal(type_ string, children []ContentKitDescendantElement) *ContentKitModal {
	this := ContentKitModal{}
	this.Type = type_
	this.Children = children
	return &this
}

// NewContentKitModalWithDefaults instantiates a new ContentKitModal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitModalWithDefaults() *ContentKitModal {
	this := ContentKitModal{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitModal) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitModal) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitModal) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ContentKitModal) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitModal) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ContentKitModal) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ContentKitModal) SetTitle(v string) {
	o.Title = &v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *ContentKitModal) GetSubtitle() []ContentKitInlineElement {
	if o == nil || IsNil(o.Subtitle) {
		var ret []ContentKitInlineElement
		return ret
	}
	return o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitModal) GetSubtitleOk() ([]ContentKitInlineElement, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *ContentKitModal) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given []ContentKitInlineElement and assigns it to the Subtitle field.
func (o *ContentKitModal) SetSubtitle(v []ContentKitInlineElement) {
	o.Subtitle = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ContentKitModal) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitModal) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ContentKitModal) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *ContentKitModal) SetSize(v string) {
	o.Size = &v
}

// GetReturnValue returns the ReturnValue field value if set, zero value otherwise.
func (o *ContentKitModal) GetReturnValue() map[string]interface{} {
	if o == nil || IsNil(o.ReturnValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.ReturnValue
}

// GetReturnValueOk returns a tuple with the ReturnValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitModal) GetReturnValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ReturnValue) {
		return map[string]interface{}{}, false
	}
	return o.ReturnValue, true
}

// HasReturnValue returns a boolean if a field has been set.
func (o *ContentKitModal) HasReturnValue() bool {
	if o != nil && !IsNil(o.ReturnValue) {
		return true
	}

	return false
}

// SetReturnValue gets a reference to the given map[string]interface{} and assigns it to the ReturnValue field.
func (o *ContentKitModal) SetReturnValue(v map[string]interface{}) {
	o.ReturnValue = v
}

// GetChildren returns the Children field value
func (o *ContentKitModal) GetChildren() []ContentKitDescendantElement {
	if o == nil {
		var ret []ContentKitDescendantElement
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *ContentKitModal) GetChildrenOk() ([]ContentKitDescendantElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *ContentKitModal) SetChildren(v []ContentKitDescendantElement) {
	o.Children = v
}

// GetSubmit returns the Submit field value if set, zero value otherwise.
func (o *ContentKitModal) GetSubmit() ContentKitButton {
	if o == nil || IsNil(o.Submit) {
		var ret ContentKitButton
		return ret
	}
	return *o.Submit
}

// GetSubmitOk returns a tuple with the Submit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitModal) GetSubmitOk() (*ContentKitButton, bool) {
	if o == nil || IsNil(o.Submit) {
		return nil, false
	}
	return o.Submit, true
}

// HasSubmit returns a boolean if a field has been set.
func (o *ContentKitModal) HasSubmit() bool {
	if o != nil && !IsNil(o.Submit) {
		return true
	}

	return false
}

// SetSubmit gets a reference to the given ContentKitButton and assigns it to the Submit field.
func (o *ContentKitModal) SetSubmit(v ContentKitButton) {
	o.Submit = &v
}

func (o ContentKitModal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitModal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.ReturnValue) {
		toSerialize["returnValue"] = o.ReturnValue
	}
	toSerialize["children"] = o.Children
	if !IsNil(o.Submit) {
		toSerialize["submit"] = o.Submit
	}
	return toSerialize, nil
}

type NullableContentKitModal struct {
	value *ContentKitModal
	isSet bool
}

func (v NullableContentKitModal) Get() *ContentKitModal {
	return v.value
}

func (v *NullableContentKitModal) Set(val *ContentKitModal) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitModal) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitModal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitModal(val *ContentKitModal) *NullableContentKitModal {
	return &NullableContentKitModal{value: val, isSet: true}
}

func (v NullableContentKitModal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitModal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
