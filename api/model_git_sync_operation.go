/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the GitSyncOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitSyncOperation{}

// GitSyncOperation struct for GitSyncOperation
type GitSyncOperation struct {
	State       GitSyncOperationState `json:"state"`
	StartedAt   string                `json:"startedAt"`
	CompletedAt *string               `json:"completedAt,omitempty"`
	// Error details, defined if state is `failure`.
	Error *string `json:"error,omitempty"`
}

// NewGitSyncOperation instantiates a new GitSyncOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitSyncOperation(state GitSyncOperationState, startedAt string) *GitSyncOperation {
	this := GitSyncOperation{}
	this.State = state
	this.StartedAt = startedAt
	return &this
}

// NewGitSyncOperationWithDefaults instantiates a new GitSyncOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitSyncOperationWithDefaults() *GitSyncOperation {
	this := GitSyncOperation{}
	return &this
}

// GetState returns the State field value
func (o *GitSyncOperation) GetState() GitSyncOperationState {
	if o == nil {
		var ret GitSyncOperationState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *GitSyncOperation) GetStateOk() (*GitSyncOperationState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *GitSyncOperation) SetState(v GitSyncOperationState) {
	o.State = v
}

// GetStartedAt returns the StartedAt field value
func (o *GitSyncOperation) GetStartedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *GitSyncOperation) GetStartedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *GitSyncOperation) SetStartedAt(v string) {
	o.StartedAt = v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *GitSyncOperation) GetCompletedAt() string {
	if o == nil || IsNil(o.CompletedAt) {
		var ret string
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSyncOperation) GetCompletedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *GitSyncOperation) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given string and assigns it to the CompletedAt field.
func (o *GitSyncOperation) SetCompletedAt(v string) {
	o.CompletedAt = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *GitSyncOperation) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitSyncOperation) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *GitSyncOperation) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *GitSyncOperation) SetError(v string) {
	o.Error = &v
}

func (o GitSyncOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitSyncOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	toSerialize["startedAt"] = o.StartedAt
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableGitSyncOperation struct {
	value *GitSyncOperation
	isSet bool
}

func (v NullableGitSyncOperation) Get() *GitSyncOperation {
	return v.value
}

func (v *NullableGitSyncOperation) Set(val *GitSyncOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableGitSyncOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableGitSyncOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitSyncOperation(val *GitSyncOperation) *NullableGitSyncOperation {
	return &NullableGitSyncOperation{value: val, isSet: true}
}

func (v NullableGitSyncOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitSyncOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
