/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the SpaceEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceEntity{}

// SpaceEntity Link between an integration entity and a space.
type SpaceEntity struct {
	Entity IntegrationEntity `json:"entity"`
	// Environments the entity is linked to
	Environments []string        `json:"environments"`
	Urls         SpaceEntityUrls `json:"urls"`
}

// NewSpaceEntity instantiates a new SpaceEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceEntity(entity IntegrationEntity, environments []string, urls SpaceEntityUrls) *SpaceEntity {
	this := SpaceEntity{}
	this.Entity = entity
	this.Environments = environments
	this.Urls = urls
	return &this
}

// NewSpaceEntityWithDefaults instantiates a new SpaceEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceEntityWithDefaults() *SpaceEntity {
	this := SpaceEntity{}
	return &this
}

// GetEntity returns the Entity field value
func (o *SpaceEntity) GetEntity() IntegrationEntity {
	if o == nil {
		var ret IntegrationEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *SpaceEntity) GetEntityOk() (*IntegrationEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *SpaceEntity) SetEntity(v IntegrationEntity) {
	o.Entity = v
}

// GetEnvironments returns the Environments field value
func (o *SpaceEntity) GetEnvironments() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
func (o *SpaceEntity) GetEnvironmentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environments, true
}

// SetEnvironments sets field value
func (o *SpaceEntity) SetEnvironments(v []string) {
	o.Environments = v
}

// GetUrls returns the Urls field value
func (o *SpaceEntity) GetUrls() SpaceEntityUrls {
	if o == nil {
		var ret SpaceEntityUrls
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *SpaceEntity) GetUrlsOk() (*SpaceEntityUrls, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Urls, true
}

// SetUrls sets field value
func (o *SpaceEntity) SetUrls(v SpaceEntityUrls) {
	o.Urls = v
}

func (o SpaceEntity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity"] = o.Entity
	toSerialize["environments"] = o.Environments
	toSerialize["urls"] = o.Urls
	return toSerialize, nil
}

type NullableSpaceEntity struct {
	value *SpaceEntity
	isSet bool
}

func (v NullableSpaceEntity) Get() *SpaceEntity {
	return v.value
}

func (v *NullableSpaceEntity) Set(val *SpaceEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceEntity(val *SpaceEntity) *NullableSpaceEntity {
	return &NullableSpaceEntity{value: val, isSet: true}
}

func (v NullableSpaceEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
