/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the SpaceRelationPairAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceRelationPairAllOf{}

// SpaceRelationPairAllOf Relation between an origin space and another space
type SpaceRelationPairAllOf struct {
	Target SpaceRelationEdge `json:"target"`
	Source SpaceRelationEdge `json:"source"`
}

// NewSpaceRelationPairAllOf instantiates a new SpaceRelationPairAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceRelationPairAllOf(target SpaceRelationEdge, source SpaceRelationEdge) *SpaceRelationPairAllOf {
	this := SpaceRelationPairAllOf{}
	this.Target = target
	this.Source = source
	return &this
}

// NewSpaceRelationPairAllOfWithDefaults instantiates a new SpaceRelationPairAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceRelationPairAllOfWithDefaults() *SpaceRelationPairAllOf {
	this := SpaceRelationPairAllOf{}
	return &this
}

// GetTarget returns the Target field value
func (o *SpaceRelationPairAllOf) GetTarget() SpaceRelationEdge {
	if o == nil {
		var ret SpaceRelationEdge
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *SpaceRelationPairAllOf) GetTargetOk() (*SpaceRelationEdge, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *SpaceRelationPairAllOf) SetTarget(v SpaceRelationEdge) {
	o.Target = v
}

// GetSource returns the Source field value
func (o *SpaceRelationPairAllOf) GetSource() SpaceRelationEdge {
	if o == nil {
		var ret SpaceRelationEdge
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *SpaceRelationPairAllOf) GetSourceOk() (*SpaceRelationEdge, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *SpaceRelationPairAllOf) SetSource(v SpaceRelationEdge) {
	o.Source = v
}

func (o SpaceRelationPairAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceRelationPairAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target"] = o.Target
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

type NullableSpaceRelationPairAllOf struct {
	value *SpaceRelationPairAllOf
	isSet bool
}

func (v NullableSpaceRelationPairAllOf) Get() *SpaceRelationPairAllOf {
	return v.value
}

func (v *NullableSpaceRelationPairAllOf) Set(val *SpaceRelationPairAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceRelationPairAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceRelationPairAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceRelationPairAllOf(val *SpaceRelationPairAllOf) *NullableSpaceRelationPairAllOf {
	return &NullableSpaceRelationPairAllOf{value: val, isSet: true}
}

func (v NullableSpaceRelationPairAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceRelationPairAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
