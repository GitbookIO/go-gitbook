/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the MarkdownDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarkdownDocument{}

// MarkdownDocument struct for MarkdownDocument
type MarkdownDocument struct {
	// Content of the document formatted as markdown
	Markdown string `json:"markdown"`
}

// NewMarkdownDocument instantiates a new MarkdownDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkdownDocument(markdown string) *MarkdownDocument {
	this := MarkdownDocument{}
	this.Markdown = markdown
	return &this
}

// NewMarkdownDocumentWithDefaults instantiates a new MarkdownDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkdownDocumentWithDefaults() *MarkdownDocument {
	this := MarkdownDocument{}
	return &this
}

// GetMarkdown returns the Markdown field value
func (o *MarkdownDocument) GetMarkdown() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value
// and a boolean to check if the value has been set.
func (o *MarkdownDocument) GetMarkdownOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Markdown, true
}

// SetMarkdown sets field value
func (o *MarkdownDocument) SetMarkdown(v string) {
	o.Markdown = v
}

func (o MarkdownDocument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarkdownDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["markdown"] = o.Markdown
	return toSerialize, nil
}

type NullableMarkdownDocument struct {
	value *MarkdownDocument
	isSet bool
}

func (v NullableMarkdownDocument) Get() *MarkdownDocument {
	return v.value
}

func (v *NullableMarkdownDocument) Set(val *MarkdownDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkdownDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkdownDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkdownDocument(val *MarkdownDocument) *NullableMarkdownDocument {
	return &NullableMarkdownDocument{value: val, isSet: true}
}

func (v NullableMarkdownDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkdownDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
