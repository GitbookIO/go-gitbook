/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the UIRenderEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UIRenderEvent{}

// UIRenderEvent struct for UIRenderEvent
type UIRenderEvent struct {
	Auth *FetchEventAllOfAuth `json:"auth,omitempty"`
	// Type of the event.
	Type        string `json:"type"`
	ComponentId string `json:"componentId"`
	// Properties to render the UI.
	Props map[string]interface{} `json:"props"`
	// State of the UI.
	State   map[string]interface{} `json:"state,omitempty"`
	Context ContentKitContext      `json:"context"`
	Action  map[string]interface{} `json:"action,omitempty"`
	// Unique identifier for the event.
	EventId string `json:"eventId"`
	// ID of the integration installation
	InstallationId string `json:"installationId"`
	// ID of the space
	SpaceId string `json:"spaceId"`
}

// NewUIRenderEvent instantiates a new UIRenderEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUIRenderEvent(type_ string, componentId string, props map[string]interface{}, context ContentKitContext, eventId string, installationId string, spaceId string) *UIRenderEvent {
	this := UIRenderEvent{}
	this.Type = type_
	this.ComponentId = componentId
	this.Props = props
	this.Context = context
	this.EventId = eventId
	this.InstallationId = installationId
	this.SpaceId = spaceId
	return &this
}

// NewUIRenderEventWithDefaults instantiates a new UIRenderEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUIRenderEventWithDefaults() *UIRenderEvent {
	this := UIRenderEvent{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *UIRenderEvent) GetAuth() FetchEventAllOfAuth {
	if o == nil || IsNil(o.Auth) {
		var ret FetchEventAllOfAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetAuthOk() (*FetchEventAllOfAuth, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *UIRenderEvent) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given FetchEventAllOfAuth and assigns it to the Auth field.
func (o *UIRenderEvent) SetAuth(v FetchEventAllOfAuth) {
	o.Auth = &v
}

// GetType returns the Type field value
func (o *UIRenderEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UIRenderEvent) SetType(v string) {
	o.Type = v
}

// GetComponentId returns the ComponentId field value
func (o *UIRenderEvent) GetComponentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetComponentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentId, true
}

// SetComponentId sets field value
func (o *UIRenderEvent) SetComponentId(v string) {
	o.ComponentId = v
}

// GetProps returns the Props field value
func (o *UIRenderEvent) GetProps() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Props
}

// GetPropsOk returns a tuple with the Props field value
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetPropsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Props, true
}

// SetProps sets field value
func (o *UIRenderEvent) SetProps(v map[string]interface{}) {
	o.Props = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UIRenderEvent) GetState() map[string]interface{} {
	if o == nil || IsNil(o.State) {
		var ret map[string]interface{}
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetStateOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.State) {
		return map[string]interface{}{}, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UIRenderEvent) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given map[string]interface{} and assigns it to the State field.
func (o *UIRenderEvent) SetState(v map[string]interface{}) {
	o.State = v
}

// GetContext returns the Context field value
func (o *UIRenderEvent) GetContext() ContentKitContext {
	if o == nil {
		var ret ContentKitContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetContextOk() (*ContentKitContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *UIRenderEvent) SetContext(v ContentKitContext) {
	o.Context = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *UIRenderEvent) GetAction() map[string]interface{} {
	if o == nil || IsNil(o.Action) {
		var ret map[string]interface{}
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetActionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Action) {
		return map[string]interface{}{}, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *UIRenderEvent) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given map[string]interface{} and assigns it to the Action field.
func (o *UIRenderEvent) SetAction(v map[string]interface{}) {
	o.Action = v
}

// GetEventId returns the EventId field value
func (o *UIRenderEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *UIRenderEvent) SetEventId(v string) {
	o.EventId = v
}

// GetInstallationId returns the InstallationId field value
func (o *UIRenderEvent) GetInstallationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetInstallationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallationId, true
}

// SetInstallationId sets field value
func (o *UIRenderEvent) SetInstallationId(v string) {
	o.InstallationId = v
}

// GetSpaceId returns the SpaceId field value
func (o *UIRenderEvent) GetSpaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value
// and a boolean to check if the value has been set.
func (o *UIRenderEvent) GetSpaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceId, true
}

// SetSpaceId sets field value
func (o *UIRenderEvent) SetSpaceId(v string) {
	o.SpaceId = v
}

func (o UIRenderEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UIRenderEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	toSerialize["type"] = o.Type
	toSerialize["componentId"] = o.ComponentId
	toSerialize["props"] = o.Props
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["context"] = o.Context
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	toSerialize["eventId"] = o.EventId
	toSerialize["installationId"] = o.InstallationId
	toSerialize["spaceId"] = o.SpaceId
	return toSerialize, nil
}

type NullableUIRenderEvent struct {
	value *UIRenderEvent
	isSet bool
}

func (v NullableUIRenderEvent) Get() *UIRenderEvent {
	return v.value
}

func (v *NullableUIRenderEvent) Set(val *UIRenderEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUIRenderEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUIRenderEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUIRenderEvent(val *UIRenderEvent) *NullableUIRenderEvent {
	return &NullableUIRenderEvent{value: val, isSet: true}
}

func (v NullableUIRenderEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUIRenderEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
