/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// APIIntegrationScope the model 'APIIntegrationScope'
type APIIntegrationScope string

// List of APIIntegrationScope
const (
	APIINTEGRATIONSCOPE_READ               APIIntegrationScope = "integration:read"
	APIINTEGRATIONSCOPE_UPDATE             APIIntegrationScope = "integration:update"
	APIINTEGRATIONSCOPE_INSTALLATIONREAD   APIIntegrationScope = "integration:installation:read"
	APIINTEGRATIONSCOPE_INSTALLATIONUPDATE APIIntegrationScope = "integration:installation:update"
)

// All allowed values of APIIntegrationScope enum
var AllowedAPIIntegrationScopeEnumValues = []APIIntegrationScope{
	"integration:read",
	"integration:update",
	"integration:installation:read",
	"integration:installation:update",
}

func (v *APIIntegrationScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := APIIntegrationScope(value)
	for _, existing := range AllowedAPIIntegrationScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid APIIntegrationScope", value)
}

// NewAPIIntegrationScopeFromValue returns a pointer to a valid APIIntegrationScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAPIIntegrationScopeFromValue(v string) (*APIIntegrationScope, error) {
	ev := APIIntegrationScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for APIIntegrationScope: valid values are %v", v, AllowedAPIIntegrationScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v APIIntegrationScope) IsValid() bool {
	for _, existing := range AllowedAPIIntegrationScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to APIIntegrationScope value
func (v APIIntegrationScope) Ptr() *APIIntegrationScope {
	return &v
}

type NullableAPIIntegrationScope struct {
	value *APIIntegrationScope
	isSet bool
}

func (v NullableAPIIntegrationScope) Get() *APIIntegrationScope {
	return v.value
}

func (v *NullableAPIIntegrationScope) Set(val *APIIntegrationScope) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIIntegrationScope) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIIntegrationScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIIntegrationScope(val *APIIntegrationScope) *NullableAPIIntegrationScope {
	return &NullableAPIIntegrationScope{value: val, isSet: true}
}

func (v NullableAPIIntegrationScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIIntegrationScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
