// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the BillingUpgradeOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingUpgradeOneOf{}

// BillingUpgradeOneOf struct for BillingUpgradeOneOf
type BillingUpgradeOneOf struct {
	Result string `json:"result"`
	// Stripe payment session ID
	SessionId string `json:"sessionId"`
}

// NewBillingUpgradeOneOf instantiates a new BillingUpgradeOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingUpgradeOneOf(result string, sessionId string) *BillingUpgradeOneOf {
	this := BillingUpgradeOneOf{}
	this.Result = result
	this.SessionId = sessionId
	return &this
}

// NewBillingUpgradeOneOfWithDefaults instantiates a new BillingUpgradeOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingUpgradeOneOfWithDefaults() *BillingUpgradeOneOf {
	this := BillingUpgradeOneOf{}
	return &this
}

// GetResult returns the Result field value
func (o *BillingUpgradeOneOf) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *BillingUpgradeOneOf) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *BillingUpgradeOneOf) SetResult(v string) {
	o.Result = v
}

// GetSessionId returns the SessionId field value
func (o *BillingUpgradeOneOf) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *BillingUpgradeOneOf) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *BillingUpgradeOneOf) SetSessionId(v string) {
	o.SessionId = v
}

func (o BillingUpgradeOneOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingUpgradeOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["sessionId"] = o.SessionId
	return toSerialize, nil
}

type NullableBillingUpgradeOneOf struct {
	value *BillingUpgradeOneOf
	isSet bool
}

func (v NullableBillingUpgradeOneOf) Get() *BillingUpgradeOneOf {
	return v.value
}

func (v *NullableBillingUpgradeOneOf) Set(val *BillingUpgradeOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingUpgradeOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingUpgradeOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingUpgradeOneOf(val *BillingUpgradeOneOf) *NullableBillingUpgradeOneOf {
	return &NullableBillingUpgradeOneOf{value: val, isSet: true}
}

func (v NullableBillingUpgradeOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingUpgradeOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
