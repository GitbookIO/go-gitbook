/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// RecordingEvent - struct for RecordingEvent
type RecordingEvent struct {
	RecordingFileAddedEvent       *RecordingFileAddedEvent
	RecordingFileChangedEvent     *RecordingFileChangedEvent
	RecordingFileRemovedEvent     *RecordingFileRemovedEvent
	RecordingSpeechEvent          *RecordingSpeechEvent
	RecordingTerminalCommandEvent *RecordingTerminalCommandEvent
	RecordingThreadMessageEvent   *RecordingThreadMessageEvent
}

// RecordingFileAddedEventAsRecordingEvent is a convenience function that returns RecordingFileAddedEvent wrapped in RecordingEvent
func RecordingFileAddedEventAsRecordingEvent(v *RecordingFileAddedEvent) RecordingEvent {
	return RecordingEvent{
		RecordingFileAddedEvent: v,
	}
}

// RecordingFileChangedEventAsRecordingEvent is a convenience function that returns RecordingFileChangedEvent wrapped in RecordingEvent
func RecordingFileChangedEventAsRecordingEvent(v *RecordingFileChangedEvent) RecordingEvent {
	return RecordingEvent{
		RecordingFileChangedEvent: v,
	}
}

// RecordingFileRemovedEventAsRecordingEvent is a convenience function that returns RecordingFileRemovedEvent wrapped in RecordingEvent
func RecordingFileRemovedEventAsRecordingEvent(v *RecordingFileRemovedEvent) RecordingEvent {
	return RecordingEvent{
		RecordingFileRemovedEvent: v,
	}
}

// RecordingSpeechEventAsRecordingEvent is a convenience function that returns RecordingSpeechEvent wrapped in RecordingEvent
func RecordingSpeechEventAsRecordingEvent(v *RecordingSpeechEvent) RecordingEvent {
	return RecordingEvent{
		RecordingSpeechEvent: v,
	}
}

// RecordingTerminalCommandEventAsRecordingEvent is a convenience function that returns RecordingTerminalCommandEvent wrapped in RecordingEvent
func RecordingTerminalCommandEventAsRecordingEvent(v *RecordingTerminalCommandEvent) RecordingEvent {
	return RecordingEvent{
		RecordingTerminalCommandEvent: v,
	}
}

// RecordingThreadMessageEventAsRecordingEvent is a convenience function that returns RecordingThreadMessageEvent wrapped in RecordingEvent
func RecordingThreadMessageEventAsRecordingEvent(v *RecordingThreadMessageEvent) RecordingEvent {
	return RecordingEvent{
		RecordingThreadMessageEvent: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RecordingEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RecordingFileAddedEvent
	err = newStrictDecoder(data).Decode(&dst.RecordingFileAddedEvent)
	if err == nil {
		jsonRecordingFileAddedEvent, _ := json.Marshal(dst.RecordingFileAddedEvent)
		if string(jsonRecordingFileAddedEvent) == "{}" { // empty struct
			dst.RecordingFileAddedEvent = nil
		} else {
			match++
		}
	} else {
		dst.RecordingFileAddedEvent = nil
	}

	// try to unmarshal data into RecordingFileChangedEvent
	err = newStrictDecoder(data).Decode(&dst.RecordingFileChangedEvent)
	if err == nil {
		jsonRecordingFileChangedEvent, _ := json.Marshal(dst.RecordingFileChangedEvent)
		if string(jsonRecordingFileChangedEvent) == "{}" { // empty struct
			dst.RecordingFileChangedEvent = nil
		} else {
			match++
		}
	} else {
		dst.RecordingFileChangedEvent = nil
	}

	// try to unmarshal data into RecordingFileRemovedEvent
	err = newStrictDecoder(data).Decode(&dst.RecordingFileRemovedEvent)
	if err == nil {
		jsonRecordingFileRemovedEvent, _ := json.Marshal(dst.RecordingFileRemovedEvent)
		if string(jsonRecordingFileRemovedEvent) == "{}" { // empty struct
			dst.RecordingFileRemovedEvent = nil
		} else {
			match++
		}
	} else {
		dst.RecordingFileRemovedEvent = nil
	}

	// try to unmarshal data into RecordingSpeechEvent
	err = newStrictDecoder(data).Decode(&dst.RecordingSpeechEvent)
	if err == nil {
		jsonRecordingSpeechEvent, _ := json.Marshal(dst.RecordingSpeechEvent)
		if string(jsonRecordingSpeechEvent) == "{}" { // empty struct
			dst.RecordingSpeechEvent = nil
		} else {
			match++
		}
	} else {
		dst.RecordingSpeechEvent = nil
	}

	// try to unmarshal data into RecordingTerminalCommandEvent
	err = newStrictDecoder(data).Decode(&dst.RecordingTerminalCommandEvent)
	if err == nil {
		jsonRecordingTerminalCommandEvent, _ := json.Marshal(dst.RecordingTerminalCommandEvent)
		if string(jsonRecordingTerminalCommandEvent) == "{}" { // empty struct
			dst.RecordingTerminalCommandEvent = nil
		} else {
			match++
		}
	} else {
		dst.RecordingTerminalCommandEvent = nil
	}

	// try to unmarshal data into RecordingThreadMessageEvent
	err = newStrictDecoder(data).Decode(&dst.RecordingThreadMessageEvent)
	if err == nil {
		jsonRecordingThreadMessageEvent, _ := json.Marshal(dst.RecordingThreadMessageEvent)
		if string(jsonRecordingThreadMessageEvent) == "{}" { // empty struct
			dst.RecordingThreadMessageEvent = nil
		} else {
			match++
		}
	} else {
		dst.RecordingThreadMessageEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RecordingFileAddedEvent = nil
		dst.RecordingFileChangedEvent = nil
		dst.RecordingFileRemovedEvent = nil
		dst.RecordingSpeechEvent = nil
		dst.RecordingTerminalCommandEvent = nil
		dst.RecordingThreadMessageEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RecordingEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RecordingEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RecordingEvent) MarshalJSON() ([]byte, error) {
	if src.RecordingFileAddedEvent != nil {
		return json.Marshal(&src.RecordingFileAddedEvent)
	}

	if src.RecordingFileChangedEvent != nil {
		return json.Marshal(&src.RecordingFileChangedEvent)
	}

	if src.RecordingFileRemovedEvent != nil {
		return json.Marshal(&src.RecordingFileRemovedEvent)
	}

	if src.RecordingSpeechEvent != nil {
		return json.Marshal(&src.RecordingSpeechEvent)
	}

	if src.RecordingTerminalCommandEvent != nil {
		return json.Marshal(&src.RecordingTerminalCommandEvent)
	}

	if src.RecordingThreadMessageEvent != nil {
		return json.Marshal(&src.RecordingThreadMessageEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RecordingEvent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RecordingFileAddedEvent != nil {
		return obj.RecordingFileAddedEvent
	}

	if obj.RecordingFileChangedEvent != nil {
		return obj.RecordingFileChangedEvent
	}

	if obj.RecordingFileRemovedEvent != nil {
		return obj.RecordingFileRemovedEvent
	}

	if obj.RecordingSpeechEvent != nil {
		return obj.RecordingSpeechEvent
	}

	if obj.RecordingTerminalCommandEvent != nil {
		return obj.RecordingTerminalCommandEvent
	}

	if obj.RecordingThreadMessageEvent != nil {
		return obj.RecordingThreadMessageEvent
	}

	// all schemas are nil
	return nil
}

type NullableRecordingEvent struct {
	value *RecordingEvent
	isSet bool
}

func (v NullableRecordingEvent) Get() *RecordingEvent {
	return v.value
}

func (v *NullableRecordingEvent) Set(val *RecordingEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingEvent(val *RecordingEvent) *NullableRecordingEvent {
	return &NullableRecordingEvent{value: val, isSet: true}
}

func (v NullableRecordingEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
