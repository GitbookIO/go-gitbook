/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitBlockControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitBlockControl{}

// ContentKitBlockControl Control menu item displayed for the block.
type ContentKitBlockControl struct {
	Icon    *ContentKitIcon    `json:"icon,omitempty"`
	Label   string             `json:"label"`
	OnPress ContentKitAction   `json:"onPress"`
	Confirm *ContentKitConfirm `json:"confirm,omitempty"`
}

// NewContentKitBlockControl instantiates a new ContentKitBlockControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitBlockControl(label string, onPress ContentKitAction) *ContentKitBlockControl {
	this := ContentKitBlockControl{}
	this.Label = label
	this.OnPress = onPress
	return &this
}

// NewContentKitBlockControlWithDefaults instantiates a new ContentKitBlockControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitBlockControlWithDefaults() *ContentKitBlockControl {
	this := ContentKitBlockControl{}
	return &this
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ContentKitBlockControl) GetIcon() ContentKitIcon {
	if o == nil || IsNil(o.Icon) {
		var ret ContentKitIcon
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitBlockControl) GetIconOk() (*ContentKitIcon, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ContentKitBlockControl) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given ContentKitIcon and assigns it to the Icon field.
func (o *ContentKitBlockControl) SetIcon(v ContentKitIcon) {
	o.Icon = &v
}

// GetLabel returns the Label field value
func (o *ContentKitBlockControl) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ContentKitBlockControl) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ContentKitBlockControl) SetLabel(v string) {
	o.Label = v
}

// GetOnPress returns the OnPress field value
func (o *ContentKitBlockControl) GetOnPress() ContentKitAction {
	if o == nil {
		var ret ContentKitAction
		return ret
	}

	return o.OnPress
}

// GetOnPressOk returns a tuple with the OnPress field value
// and a boolean to check if the value has been set.
func (o *ContentKitBlockControl) GetOnPressOk() (*ContentKitAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnPress, true
}

// SetOnPress sets field value
func (o *ContentKitBlockControl) SetOnPress(v ContentKitAction) {
	o.OnPress = v
}

// GetConfirm returns the Confirm field value if set, zero value otherwise.
func (o *ContentKitBlockControl) GetConfirm() ContentKitConfirm {
	if o == nil || IsNil(o.Confirm) {
		var ret ContentKitConfirm
		return ret
	}
	return *o.Confirm
}

// GetConfirmOk returns a tuple with the Confirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitBlockControl) GetConfirmOk() (*ContentKitConfirm, bool) {
	if o == nil || IsNil(o.Confirm) {
		return nil, false
	}
	return o.Confirm, true
}

// HasConfirm returns a boolean if a field has been set.
func (o *ContentKitBlockControl) HasConfirm() bool {
	if o != nil && !IsNil(o.Confirm) {
		return true
	}

	return false
}

// SetConfirm gets a reference to the given ContentKitConfirm and assigns it to the Confirm field.
func (o *ContentKitBlockControl) SetConfirm(v ContentKitConfirm) {
	o.Confirm = &v
}

func (o ContentKitBlockControl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitBlockControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["label"] = o.Label
	toSerialize["onPress"] = o.OnPress
	if !IsNil(o.Confirm) {
		toSerialize["confirm"] = o.Confirm
	}
	return toSerialize, nil
}

type NullableContentKitBlockControl struct {
	value *ContentKitBlockControl
	isSet bool
}

func (v NullableContentKitBlockControl) Get() *ContentKitBlockControl {
	return v.value
}

func (v *NullableContentKitBlockControl) Set(val *ContentKitBlockControl) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitBlockControl) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitBlockControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitBlockControl(val *ContentKitBlockControl) *NullableContentKitBlockControl {
	return &NullableContentKitBlockControl{value: val, isSet: true}
}

func (v NullableContentKitBlockControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitBlockControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
