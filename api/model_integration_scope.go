/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// IntegrationScope the model 'IntegrationScope'
type IntegrationScope string

// List of IntegrationScope
const (
	INTEGRATIONSCOPE_ENTITIESWRITE      IntegrationScope = "entities:write"
	INTEGRATIONSCOPE_RECORDINGWRITE     IntegrationScope = "recording:write"
	INTEGRATIONSCOPE_SPACEVIEWSREAD     IntegrationScope = "space:views:read"
	INTEGRATIONSCOPE_SPACECONTENTREAD   IntegrationScope = "space:content:read"
	INTEGRATIONSCOPE_SPACECONTENTWRITE  IntegrationScope = "space:content:write"
	INTEGRATIONSCOPE_SPACEMETADATAREAD  IntegrationScope = "space:metadata:read"
	INTEGRATIONSCOPE_SPACEMETADATAWRITE IntegrationScope = "space:metadata:write"
	INTEGRATIONSCOPE_SPACESCRIPTINJECT  IntegrationScope = "space:script:inject"
	INTEGRATIONSCOPE_SPACESCRIPTCOOKIES IntegrationScope = "space:script:cookies"
	INTEGRATIONSCOPE_SPACEGITSYNC       IntegrationScope = "space:git:sync"
)

// All allowed values of IntegrationScope enum
var AllowedIntegrationScopeEnumValues = []IntegrationScope{
	"entities:write",
	"recording:write",
	"space:views:read",
	"space:content:read",
	"space:content:write",
	"space:metadata:read",
	"space:metadata:write",
	"space:script:inject",
	"space:script:cookies",
	"space:git:sync",
}

func (v *IntegrationScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationScope(value)
	for _, existing := range AllowedIntegrationScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationScope", value)
}

// NewIntegrationScopeFromValue returns a pointer to a valid IntegrationScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationScopeFromValue(v string) (*IntegrationScope, error) {
	ev := IntegrationScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationScope: valid values are %v", v, AllowedIntegrationScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationScope) IsValid() bool {
	for _, existing := range AllowedIntegrationScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationScope value
func (v IntegrationScope) Ptr() *IntegrationScope {
	return &v
}

type NullableIntegrationScope struct {
	value *IntegrationScope
	isSet bool
}

func (v NullableIntegrationScope) Get() *IntegrationScope {
	return v.value
}

func (v *NullableIntegrationScope) Set(val *IntegrationScope) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationScope) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationScope(val *IntegrationScope) *NullableIntegrationScope {
	return &NullableIntegrationScope{value: val, isSet: true}
}

func (v NullableIntegrationScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
