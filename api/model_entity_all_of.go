/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the EntityAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityAllOf{}

// EntityAllOf Entity created and managed by an integration, representing an external element.
type EntityAllOf struct {
	// Unique ID for the entity in GitBook
	Id string `json:"id"`
	// Type of an entity
	Type string          `json:"type"`
	Urls EntityAllOfUrls `json:"urls"`
}

// NewEntityAllOf instantiates a new EntityAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityAllOf(id string, type_ string, urls EntityAllOfUrls) *EntityAllOf {
	this := EntityAllOf{}
	this.Id = id
	this.Type = type_
	this.Urls = urls
	return &this
}

// NewEntityAllOfWithDefaults instantiates a new EntityAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityAllOfWithDefaults() *EntityAllOf {
	this := EntityAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *EntityAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EntityAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EntityAllOf) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *EntityAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EntityAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EntityAllOf) SetType(v string) {
	o.Type = v
}

// GetUrls returns the Urls field value
func (o *EntityAllOf) GetUrls() EntityAllOfUrls {
	if o == nil {
		var ret EntityAllOfUrls
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *EntityAllOf) GetUrlsOk() (*EntityAllOfUrls, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Urls, true
}

// SetUrls sets field value
func (o *EntityAllOf) SetUrls(v EntityAllOfUrls) {
	o.Urls = v
}

func (o EntityAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["urls"] = o.Urls
	return toSerialize, nil
}

type NullableEntityAllOf struct {
	value *EntityAllOf
	isSet bool
}

func (v NullableEntityAllOf) Get() *EntityAllOf {
	return v.value
}

func (v *NullableEntityAllOf) Set(val *EntityAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityAllOf(val *EntityAllOf) *NullableEntityAllOf {
	return &NullableEntityAllOf{value: val, isSet: true}
}

func (v NullableEntityAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
