/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// BillingUpgrade - struct for BillingUpgrade
type BillingUpgrade struct {
	BillingUpgradeOneOf  *BillingUpgradeOneOf
	BillingUpgradeOneOf1 *BillingUpgradeOneOf1
	BillingUpgradeOneOf2 *BillingUpgradeOneOf2
	BillingUpgradeOneOf3 *BillingUpgradeOneOf3
}

// BillingUpgradeOneOfAsBillingUpgrade is a convenience function that returns BillingUpgradeOneOf wrapped in BillingUpgrade
func BillingUpgradeOneOfAsBillingUpgrade(v *BillingUpgradeOneOf) BillingUpgrade {
	return BillingUpgrade{
		BillingUpgradeOneOf: v,
	}
}

// BillingUpgradeOneOf1AsBillingUpgrade is a convenience function that returns BillingUpgradeOneOf1 wrapped in BillingUpgrade
func BillingUpgradeOneOf1AsBillingUpgrade(v *BillingUpgradeOneOf1) BillingUpgrade {
	return BillingUpgrade{
		BillingUpgradeOneOf1: v,
	}
}

// BillingUpgradeOneOf2AsBillingUpgrade is a convenience function that returns BillingUpgradeOneOf2 wrapped in BillingUpgrade
func BillingUpgradeOneOf2AsBillingUpgrade(v *BillingUpgradeOneOf2) BillingUpgrade {
	return BillingUpgrade{
		BillingUpgradeOneOf2: v,
	}
}

// BillingUpgradeOneOf3AsBillingUpgrade is a convenience function that returns BillingUpgradeOneOf3 wrapped in BillingUpgrade
func BillingUpgradeOneOf3AsBillingUpgrade(v *BillingUpgradeOneOf3) BillingUpgrade {
	return BillingUpgrade{
		BillingUpgradeOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BillingUpgrade) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BillingUpgradeOneOf
	err = newStrictDecoder(data).Decode(&dst.BillingUpgradeOneOf)
	if err == nil {
		jsonBillingUpgradeOneOf, _ := json.Marshal(dst.BillingUpgradeOneOf)
		if string(jsonBillingUpgradeOneOf) == "{}" { // empty struct
			dst.BillingUpgradeOneOf = nil
		} else {
			match++
		}
	} else {
		dst.BillingUpgradeOneOf = nil
	}

	// try to unmarshal data into BillingUpgradeOneOf1
	err = newStrictDecoder(data).Decode(&dst.BillingUpgradeOneOf1)
	if err == nil {
		jsonBillingUpgradeOneOf1, _ := json.Marshal(dst.BillingUpgradeOneOf1)
		if string(jsonBillingUpgradeOneOf1) == "{}" { // empty struct
			dst.BillingUpgradeOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.BillingUpgradeOneOf1 = nil
	}

	// try to unmarshal data into BillingUpgradeOneOf2
	err = newStrictDecoder(data).Decode(&dst.BillingUpgradeOneOf2)
	if err == nil {
		jsonBillingUpgradeOneOf2, _ := json.Marshal(dst.BillingUpgradeOneOf2)
		if string(jsonBillingUpgradeOneOf2) == "{}" { // empty struct
			dst.BillingUpgradeOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.BillingUpgradeOneOf2 = nil
	}

	// try to unmarshal data into BillingUpgradeOneOf3
	err = newStrictDecoder(data).Decode(&dst.BillingUpgradeOneOf3)
	if err == nil {
		jsonBillingUpgradeOneOf3, _ := json.Marshal(dst.BillingUpgradeOneOf3)
		if string(jsonBillingUpgradeOneOf3) == "{}" { // empty struct
			dst.BillingUpgradeOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.BillingUpgradeOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BillingUpgradeOneOf = nil
		dst.BillingUpgradeOneOf1 = nil
		dst.BillingUpgradeOneOf2 = nil
		dst.BillingUpgradeOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BillingUpgrade)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BillingUpgrade)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BillingUpgrade) MarshalJSON() ([]byte, error) {
	if src.BillingUpgradeOneOf != nil {
		return json.Marshal(&src.BillingUpgradeOneOf)
	}

	if src.BillingUpgradeOneOf1 != nil {
		return json.Marshal(&src.BillingUpgradeOneOf1)
	}

	if src.BillingUpgradeOneOf2 != nil {
		return json.Marshal(&src.BillingUpgradeOneOf2)
	}

	if src.BillingUpgradeOneOf3 != nil {
		return json.Marshal(&src.BillingUpgradeOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BillingUpgrade) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BillingUpgradeOneOf != nil {
		return obj.BillingUpgradeOneOf
	}

	if obj.BillingUpgradeOneOf1 != nil {
		return obj.BillingUpgradeOneOf1
	}

	if obj.BillingUpgradeOneOf2 != nil {
		return obj.BillingUpgradeOneOf2
	}

	if obj.BillingUpgradeOneOf3 != nil {
		return obj.BillingUpgradeOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableBillingUpgrade struct {
	value *BillingUpgrade
	isSet bool
}

func (v NullableBillingUpgrade) Get() *BillingUpgrade {
	return v.value
}

func (v *NullableBillingUpgrade) Set(val *BillingUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingUpgrade(val *BillingUpgrade) *NullableBillingUpgrade {
	return &NullableBillingUpgrade{value: val, isSet: true}
}

func (v NullableBillingUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
