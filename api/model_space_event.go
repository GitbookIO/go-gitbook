/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the SpaceEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceEvent{}

// SpaceEvent struct for SpaceEvent
type SpaceEvent struct {
	// Unique identifier for the event.
	EventId string `json:"eventId"`
	// Type of the event.
	Type string `json:"type"`
	// ID of the integration installation
	InstallationId string `json:"installationId"`
	// ID of the space
	SpaceId string `json:"spaceId"`
}

// NewSpaceEvent instantiates a new SpaceEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceEvent(eventId string, type_ string, installationId string, spaceId string) *SpaceEvent {
	this := SpaceEvent{}
	this.EventId = eventId
	this.Type = type_
	this.InstallationId = installationId
	this.SpaceId = spaceId
	return &this
}

// NewSpaceEventWithDefaults instantiates a new SpaceEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceEventWithDefaults() *SpaceEvent {
	this := SpaceEvent{}
	return &this
}

// GetEventId returns the EventId field value
func (o *SpaceEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *SpaceEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *SpaceEvent) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *SpaceEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SpaceEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SpaceEvent) SetType(v string) {
	o.Type = v
}

// GetInstallationId returns the InstallationId field value
func (o *SpaceEvent) GetInstallationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value
// and a boolean to check if the value has been set.
func (o *SpaceEvent) GetInstallationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallationId, true
}

// SetInstallationId sets field value
func (o *SpaceEvent) SetInstallationId(v string) {
	o.InstallationId = v
}

// GetSpaceId returns the SpaceId field value
func (o *SpaceEvent) GetSpaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value
// and a boolean to check if the value has been set.
func (o *SpaceEvent) GetSpaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceId, true
}

// SetSpaceId sets field value
func (o *SpaceEvent) SetSpaceId(v string) {
	o.SpaceId = v
}

func (o SpaceEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventId"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["installationId"] = o.InstallationId
	toSerialize["spaceId"] = o.SpaceId
	return toSerialize, nil
}

type NullableSpaceEvent struct {
	value *SpaceEvent
	isSet bool
}

func (v NullableSpaceEvent) Get() *SpaceEvent {
	return v.value
}

func (v *NullableSpaceEvent) Set(val *SpaceEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceEvent(val *SpaceEvent) *NullableSpaceEvent {
	return &NullableSpaceEvent{value: val, isSet: true}
}

func (v NullableSpaceEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
