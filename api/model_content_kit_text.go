/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitText type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitText{}

// ContentKitText Low level text element.
type ContentKitText struct {
	Type     string                 `json:"type"`
	Style    *string                `json:"style,omitempty"`
	Children ContentKitTextChildren `json:"children"`
}

// NewContentKitText instantiates a new ContentKitText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitText(type_ string, children ContentKitTextChildren) *ContentKitText {
	this := ContentKitText{}
	this.Type = type_
	this.Children = children
	return &this
}

// NewContentKitTextWithDefaults instantiates a new ContentKitText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitTextWithDefaults() *ContentKitText {
	this := ContentKitText{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitText) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitText) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitText) SetType(v string) {
	o.Type = v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *ContentKitText) GetStyle() string {
	if o == nil || IsNil(o.Style) {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitText) GetStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *ContentKitText) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *ContentKitText) SetStyle(v string) {
	o.Style = &v
}

// GetChildren returns the Children field value
func (o *ContentKitText) GetChildren() ContentKitTextChildren {
	if o == nil {
		var ret ContentKitTextChildren
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *ContentKitText) GetChildrenOk() (*ContentKitTextChildren, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Children, true
}

// SetChildren sets field value
func (o *ContentKitText) SetChildren(v ContentKitTextChildren) {
	o.Children = v
}

func (o ContentKitText) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitText) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	toSerialize["children"] = o.Children
	return toSerialize, nil
}

type NullableContentKitText struct {
	value *ContentKitText
	isSet bool
}

func (v NullableContentKitText) Get() *ContentKitText {
	return v.value
}

func (v *NullableContentKitText) Set(val *ContentKitText) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitText) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitText(val *ContentKitText) *NullableContentKitText {
	return &NullableContentKitText{value: val, isSet: true}
}

func (v NullableContentKitText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
