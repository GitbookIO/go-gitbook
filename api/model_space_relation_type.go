/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// SpaceRelationType the model 'SpaceRelationType'
type SpaceRelationType string

// List of SpaceRelationType
const (
	SPACERELATIONTYPE_DEPENDS_ON    SpaceRelationType = "dependsOn"
	SPACERELATIONTYPE_DEPENDENCY_OF SpaceRelationType = "dependencyOf"
	SPACERELATIONTYPE_PART_OF       SpaceRelationType = "partOf"
	SPACERELATIONTYPE_HAS_PART      SpaceRelationType = "hasPart"
)

// All allowed values of SpaceRelationType enum
var AllowedSpaceRelationTypeEnumValues = []SpaceRelationType{
	"dependsOn",
	"dependencyOf",
	"partOf",
	"hasPart",
}

func (v *SpaceRelationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpaceRelationType(value)
	for _, existing := range AllowedSpaceRelationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpaceRelationType", value)
}

// NewSpaceRelationTypeFromValue returns a pointer to a valid SpaceRelationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpaceRelationTypeFromValue(v string) (*SpaceRelationType, error) {
	ev := SpaceRelationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpaceRelationType: valid values are %v", v, AllowedSpaceRelationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpaceRelationType) IsValid() bool {
	for _, existing := range AllowedSpaceRelationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpaceRelationType value
func (v SpaceRelationType) Ptr() *SpaceRelationType {
	return &v
}

type NullableSpaceRelationType struct {
	value *SpaceRelationType
	isSet bool
}

func (v NullableSpaceRelationType) Get() *SpaceRelationType {
	return v.value
}

func (v *NullableSpaceRelationType) Set(val *SpaceRelationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceRelationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceRelationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceRelationType(val *SpaceRelationType) *NullableSpaceRelationType {
	return &NullableSpaceRelationType{value: val, isSet: true}
}

func (v NullableSpaceRelationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceRelationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
