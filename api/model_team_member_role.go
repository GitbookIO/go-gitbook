/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// TeamMemberRole \"The role of a team member. \"admin\": Can administrate team members. \"participant\": Can participate in a team.
type TeamMemberRole string

// List of TeamMemberRole
const (
	TEAMMEMBERROLE_ADMIN       TeamMemberRole = "admin"
	TEAMMEMBERROLE_PARTICIPANT TeamMemberRole = "participant"
)

// All allowed values of TeamMemberRole enum
var AllowedTeamMemberRoleEnumValues = []TeamMemberRole{
	"admin",
	"participant",
}

func (v *TeamMemberRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TeamMemberRole(value)
	for _, existing := range AllowedTeamMemberRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TeamMemberRole", value)
}

// NewTeamMemberRoleFromValue returns a pointer to a valid TeamMemberRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTeamMemberRoleFromValue(v string) (*TeamMemberRole, error) {
	ev := TeamMemberRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TeamMemberRole: valid values are %v", v, AllowedTeamMemberRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TeamMemberRole) IsValid() bool {
	for _, existing := range AllowedTeamMemberRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TeamMemberRole value
func (v TeamMemberRole) Ptr() *TeamMemberRole {
	return &v
}

type NullableTeamMemberRole struct {
	value *TeamMemberRole
	isSet bool
}

func (v NullableTeamMemberRole) Get() *TeamMemberRole {
	return v.value
}

func (v *NullableTeamMemberRole) Set(val *TeamMemberRole) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMemberRole) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMemberRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMemberRole(val *TeamMemberRole) *NullableTeamMemberRole {
	return &NullableTeamMemberRole{value: val, isSet: true}
}

func (v NullableTeamMemberRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMemberRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
