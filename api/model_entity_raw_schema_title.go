/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the EntityRawSchemaTitle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityRawSchemaTitle{}

// EntityRawSchemaTitle Title of the entity type
type EntityRawSchemaTitle struct {
	Singular string `json:"singular"`
	Plural   string `json:"plural"`
}

// NewEntityRawSchemaTitle instantiates a new EntityRawSchemaTitle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityRawSchemaTitle(singular string, plural string) *EntityRawSchemaTitle {
	this := EntityRawSchemaTitle{}
	this.Singular = singular
	this.Plural = plural
	return &this
}

// NewEntityRawSchemaTitleWithDefaults instantiates a new EntityRawSchemaTitle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityRawSchemaTitleWithDefaults() *EntityRawSchemaTitle {
	this := EntityRawSchemaTitle{}
	return &this
}

// GetSingular returns the Singular field value
func (o *EntityRawSchemaTitle) GetSingular() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Singular
}

// GetSingularOk returns a tuple with the Singular field value
// and a boolean to check if the value has been set.
func (o *EntityRawSchemaTitle) GetSingularOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Singular, true
}

// SetSingular sets field value
func (o *EntityRawSchemaTitle) SetSingular(v string) {
	o.Singular = v
}

// GetPlural returns the Plural field value
func (o *EntityRawSchemaTitle) GetPlural() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plural
}

// GetPluralOk returns a tuple with the Plural field value
// and a boolean to check if the value has been set.
func (o *EntityRawSchemaTitle) GetPluralOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plural, true
}

// SetPlural sets field value
func (o *EntityRawSchemaTitle) SetPlural(v string) {
	o.Plural = v
}

func (o EntityRawSchemaTitle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityRawSchemaTitle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["singular"] = o.Singular
	toSerialize["plural"] = o.Plural
	return toSerialize, nil
}

type NullableEntityRawSchemaTitle struct {
	value *EntityRawSchemaTitle
	isSet bool
}

func (v NullableEntityRawSchemaTitle) Get() *EntityRawSchemaTitle {
	return v.value
}

func (v *NullableEntityRawSchemaTitle) Set(val *EntityRawSchemaTitle) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityRawSchemaTitle) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityRawSchemaTitle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityRawSchemaTitle(val *EntityRawSchemaTitle) *NullableEntityRawSchemaTitle {
	return &NullableEntityRawSchemaTitle{value: val, isSet: true}
}

func (v NullableEntityRawSchemaTitle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityRawSchemaTitle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
