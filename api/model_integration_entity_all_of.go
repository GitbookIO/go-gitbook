/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationEntityAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationEntityAllOf{}

// IntegrationEntityAllOf Entity created and managed by an integration, representing a resource on an external service.
type IntegrationEntityAllOf struct {
	// Unique ID for the entity in GitBook
	Id string `json:"id"`
	// ID of the integration.
	Integration string `json:"integration"`
}

// NewIntegrationEntityAllOf instantiates a new IntegrationEntityAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationEntityAllOf(id string, integration string) *IntegrationEntityAllOf {
	this := IntegrationEntityAllOf{}
	this.Id = id
	this.Integration = integration
	return &this
}

// NewIntegrationEntityAllOfWithDefaults instantiates a new IntegrationEntityAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationEntityAllOfWithDefaults() *IntegrationEntityAllOf {
	this := IntegrationEntityAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *IntegrationEntityAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntityAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IntegrationEntityAllOf) SetId(v string) {
	o.Id = v
}

// GetIntegration returns the Integration field value
func (o *IntegrationEntityAllOf) GetIntegration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntityAllOf) GetIntegrationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Integration, true
}

// SetIntegration sets field value
func (o *IntegrationEntityAllOf) SetIntegration(v string) {
	o.Integration = v
}

func (o IntegrationEntityAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationEntityAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["integration"] = o.Integration
	return toSerialize, nil
}

type NullableIntegrationEntityAllOf struct {
	value *IntegrationEntityAllOf
	isSet bool
}

func (v NullableIntegrationEntityAllOf) Get() *IntegrationEntityAllOf {
	return v.value
}

func (v *NullableIntegrationEntityAllOf) Set(val *IntegrationEntityAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationEntityAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationEntityAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationEntityAllOf(val *IntegrationEntityAllOf) *NullableIntegrationEntityAllOf {
	return &NullableIntegrationEntityAllOf{value: val, isSet: true}
}

func (v NullableIntegrationEntityAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationEntityAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
