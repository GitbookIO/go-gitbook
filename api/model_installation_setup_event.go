/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the InstallationSetupEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallationSetupEvent{}

// InstallationSetupEvent struct for InstallationSetupEvent
type InstallationSetupEvent struct {
	// Unique identifier for the event.
	EventId string `json:"eventId"`
	Type    string `json:"type"`
	// ID of the integration installation
	InstallationId string                               `json:"installationId"`
	Status         IntegrationInstallationStatus        `json:"status"`
	Previous       *InstallationSetupEventAllOfPrevious `json:"previous,omitempty"`
}

// NewInstallationSetupEvent instantiates a new InstallationSetupEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallationSetupEvent(eventId string, type_ string, installationId string, status IntegrationInstallationStatus) *InstallationSetupEvent {
	this := InstallationSetupEvent{}
	this.EventId = eventId
	this.Type = type_
	this.InstallationId = installationId
	this.Status = status
	return &this
}

// NewInstallationSetupEventWithDefaults instantiates a new InstallationSetupEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallationSetupEventWithDefaults() *InstallationSetupEvent {
	this := InstallationSetupEvent{}
	return &this
}

// GetEventId returns the EventId field value
func (o *InstallationSetupEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *InstallationSetupEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *InstallationSetupEvent) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *InstallationSetupEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstallationSetupEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstallationSetupEvent) SetType(v string) {
	o.Type = v
}

// GetInstallationId returns the InstallationId field value
func (o *InstallationSetupEvent) GetInstallationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value
// and a boolean to check if the value has been set.
func (o *InstallationSetupEvent) GetInstallationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallationId, true
}

// SetInstallationId sets field value
func (o *InstallationSetupEvent) SetInstallationId(v string) {
	o.InstallationId = v
}

// GetStatus returns the Status field value
func (o *InstallationSetupEvent) GetStatus() IntegrationInstallationStatus {
	if o == nil {
		var ret IntegrationInstallationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InstallationSetupEvent) GetStatusOk() (*IntegrationInstallationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InstallationSetupEvent) SetStatus(v IntegrationInstallationStatus) {
	o.Status = v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *InstallationSetupEvent) GetPrevious() InstallationSetupEventAllOfPrevious {
	if o == nil || IsNil(o.Previous) {
		var ret InstallationSetupEventAllOfPrevious
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationSetupEvent) GetPreviousOk() (*InstallationSetupEventAllOfPrevious, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *InstallationSetupEvent) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given InstallationSetupEventAllOfPrevious and assigns it to the Previous field.
func (o *InstallationSetupEvent) SetPrevious(v InstallationSetupEventAllOfPrevious) {
	o.Previous = &v
}

func (o InstallationSetupEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallationSetupEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventId"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["installationId"] = o.InstallationId
	toSerialize["status"] = o.Status
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	return toSerialize, nil
}

type NullableInstallationSetupEvent struct {
	value *InstallationSetupEvent
	isSet bool
}

func (v NullableInstallationSetupEvent) Get() *InstallationSetupEvent {
	return v.value
}

func (v *NullableInstallationSetupEvent) Set(val *InstallationSetupEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallationSetupEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallationSetupEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallationSetupEvent(val *InstallationSetupEvent) *NullableInstallationSetupEvent {
	return &NullableInstallationSetupEvent{value: val, isSet: true}
}

func (v NullableInstallationSetupEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallationSetupEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
