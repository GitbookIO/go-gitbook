/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RecordingOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordingOutput{}

// RecordingOutput struct for RecordingOutput
type RecordingOutput struct {
	// URL of the generated page
	Url   string               `json:"url"`
	Space Space                `json:"space"`
	Page  RevisionPageDocument `json:"page"`
}

// NewRecordingOutput instantiates a new RecordingOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingOutput(url string, space Space, page RevisionPageDocument) *RecordingOutput {
	this := RecordingOutput{}
	this.Url = url
	this.Space = space
	this.Page = page
	return &this
}

// NewRecordingOutputWithDefaults instantiates a new RecordingOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingOutputWithDefaults() *RecordingOutput {
	this := RecordingOutput{}
	return &this
}

// GetUrl returns the Url field value
func (o *RecordingOutput) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RecordingOutput) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RecordingOutput) SetUrl(v string) {
	o.Url = v
}

// GetSpace returns the Space field value
func (o *RecordingOutput) GetSpace() Space {
	if o == nil {
		var ret Space
		return ret
	}

	return o.Space
}

// GetSpaceOk returns a tuple with the Space field value
// and a boolean to check if the value has been set.
func (o *RecordingOutput) GetSpaceOk() (*Space, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Space, true
}

// SetSpace sets field value
func (o *RecordingOutput) SetSpace(v Space) {
	o.Space = v
}

// GetPage returns the Page field value
func (o *RecordingOutput) GetPage() RevisionPageDocument {
	if o == nil {
		var ret RevisionPageDocument
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *RecordingOutput) GetPageOk() (*RevisionPageDocument, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *RecordingOutput) SetPage(v RevisionPageDocument) {
	o.Page = v
}

func (o RecordingOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["space"] = o.Space
	toSerialize["page"] = o.Page
	return toSerialize, nil
}

type NullableRecordingOutput struct {
	value *RecordingOutput
	isSet bool
}

func (v NullableRecordingOutput) Get() *RecordingOutput {
	return v.value
}

func (v *NullableRecordingOutput) Set(val *RecordingOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingOutput(val *RecordingOutput) *NullableRecordingOutput {
	return &NullableRecordingOutput{value: val, isSet: true}
}

func (v NullableRecordingOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
