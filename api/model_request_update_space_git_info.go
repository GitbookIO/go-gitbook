// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RequestUpdateSpaceGitInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestUpdateSpaceGitInfo{}

// RequestUpdateSpaceGitInfo Update metadata about the Git provider on the space
type RequestUpdateSpaceGitInfo struct {
	// The git provider
	Provider *string `json:"provider,omitempty"`
	// The repository's tree URL
	Url *string `json:"url,omitempty"`
}

// NewRequestUpdateSpaceGitInfo instantiates a new RequestUpdateSpaceGitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestUpdateSpaceGitInfo() *RequestUpdateSpaceGitInfo {
	this := RequestUpdateSpaceGitInfo{}
	return &this
}

// NewRequestUpdateSpaceGitInfoWithDefaults instantiates a new RequestUpdateSpaceGitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestUpdateSpaceGitInfoWithDefaults() *RequestUpdateSpaceGitInfo {
	this := RequestUpdateSpaceGitInfo{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *RequestUpdateSpaceGitInfo) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestUpdateSpaceGitInfo) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *RequestUpdateSpaceGitInfo) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *RequestUpdateSpaceGitInfo) SetProvider(v string) {
	o.Provider = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RequestUpdateSpaceGitInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestUpdateSpaceGitInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RequestUpdateSpaceGitInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RequestUpdateSpaceGitInfo) SetUrl(v string) {
	o.Url = &v
}

func (o RequestUpdateSpaceGitInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestUpdateSpaceGitInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableRequestUpdateSpaceGitInfo struct {
	value *RequestUpdateSpaceGitInfo
	isSet bool
}

func (v NullableRequestUpdateSpaceGitInfo) Get() *RequestUpdateSpaceGitInfo {
	return v.value
}

func (v *NullableRequestUpdateSpaceGitInfo) Set(val *RequestUpdateSpaceGitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestUpdateSpaceGitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestUpdateSpaceGitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestUpdateSpaceGitInfo(val *RequestUpdateSpaceGitInfo) *NullableRequestUpdateSpaceGitInfo {
	return &NullableRequestUpdateSpaceGitInfo{value: val, isSet: true}
}

func (v NullableRequestUpdateSpaceGitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestUpdateSpaceGitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
