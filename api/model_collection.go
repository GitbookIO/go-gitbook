/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the Collection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Collection{}

// Collection struct for Collection
type Collection struct {
	// Type of Object, always equals to \"collection\"
	Object string `json:"object"`
	// Unique identifier for the collection
	Id string `json:"id"`
	// Title of the collection
	Title string `json:"title"`
	// Path in the published URL
	Path           *string           `json:"path,omitempty"`
	Visibility     ContentVisibility `json:"visibility"`
	PublishingType *string           `json:"publishingType,omitempty"`
	// ID of the primary space for this collection
	PrimarySpace *string `json:"primarySpace,omitempty"`
	// ID of the parent collection, if any
	Collection *string `json:"collection,omitempty"`
}

// NewCollection instantiates a new Collection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollection(object string, id string, title string, visibility ContentVisibility) *Collection {
	this := Collection{}
	this.Object = object
	this.Id = id
	this.Title = title
	this.Visibility = visibility
	return &this
}

// NewCollectionWithDefaults instantiates a new Collection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionWithDefaults() *Collection {
	this := Collection{}
	return &this
}

// GetObject returns the Object field value
func (o *Collection) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Collection) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Collection) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *Collection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Collection) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Collection) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *Collection) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Collection) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Collection) SetTitle(v string) {
	o.Title = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Collection) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Collection) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Collection) SetPath(v string) {
	o.Path = &v
}

// GetVisibility returns the Visibility field value
func (o *Collection) GetVisibility() ContentVisibility {
	if o == nil {
		var ret ContentVisibility
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *Collection) GetVisibilityOk() (*ContentVisibility, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *Collection) SetVisibility(v ContentVisibility) {
	o.Visibility = v
}

// GetPublishingType returns the PublishingType field value if set, zero value otherwise.
func (o *Collection) GetPublishingType() string {
	if o == nil || IsNil(o.PublishingType) {
		var ret string
		return ret
	}
	return *o.PublishingType
}

// GetPublishingTypeOk returns a tuple with the PublishingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetPublishingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PublishingType) {
		return nil, false
	}
	return o.PublishingType, true
}

// HasPublishingType returns a boolean if a field has been set.
func (o *Collection) HasPublishingType() bool {
	if o != nil && !IsNil(o.PublishingType) {
		return true
	}

	return false
}

// SetPublishingType gets a reference to the given string and assigns it to the PublishingType field.
func (o *Collection) SetPublishingType(v string) {
	o.PublishingType = &v
}

// GetPrimarySpace returns the PrimarySpace field value if set, zero value otherwise.
func (o *Collection) GetPrimarySpace() string {
	if o == nil || IsNil(o.PrimarySpace) {
		var ret string
		return ret
	}
	return *o.PrimarySpace
}

// GetPrimarySpaceOk returns a tuple with the PrimarySpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetPrimarySpaceOk() (*string, bool) {
	if o == nil || IsNil(o.PrimarySpace) {
		return nil, false
	}
	return o.PrimarySpace, true
}

// HasPrimarySpace returns a boolean if a field has been set.
func (o *Collection) HasPrimarySpace() bool {
	if o != nil && !IsNil(o.PrimarySpace) {
		return true
	}

	return false
}

// SetPrimarySpace gets a reference to the given string and assigns it to the PrimarySpace field.
func (o *Collection) SetPrimarySpace(v string) {
	o.PrimarySpace = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *Collection) GetCollection() string {
	if o == nil || IsNil(o.Collection) {
		var ret string
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetCollectionOk() (*string, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *Collection) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given string and assigns it to the Collection field.
func (o *Collection) SetCollection(v string) {
	o.Collection = &v
}

func (o Collection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Collection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	toSerialize["visibility"] = o.Visibility
	if !IsNil(o.PublishingType) {
		toSerialize["publishingType"] = o.PublishingType
	}
	if !IsNil(o.PrimarySpace) {
		toSerialize["primarySpace"] = o.PrimarySpace
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	return toSerialize, nil
}

type NullableCollection struct {
	value *Collection
	isSet bool
}

func (v NullableCollection) Get() *Collection {
	return v.value
}

func (v *NullableCollection) Set(val *Collection) {
	v.value = val
	v.isSet = true
}

func (v NullableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollection(val *Collection) *NullableCollection {
	return &NullableCollection{value: val, isSet: true}
}

func (v NullableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
