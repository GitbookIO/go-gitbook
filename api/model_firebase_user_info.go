/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the FirebaseUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirebaseUserInfo{}

// FirebaseUserInfo The User Firebase Auth Info.
type FirebaseUserInfo struct {
	Uid         string  `json:"uid"`
	DisplayName *string `json:"displayName,omitempty"`
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	PhotoUrl    *string `json:"photoUrl,omitempty"`
	ProviderId  *string `json:"providerId,omitempty"`
}

// NewFirebaseUserInfo instantiates a new FirebaseUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirebaseUserInfo(uid string) *FirebaseUserInfo {
	this := FirebaseUserInfo{}
	this.Uid = uid
	return &this
}

// NewFirebaseUserInfoWithDefaults instantiates a new FirebaseUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirebaseUserInfoWithDefaults() *FirebaseUserInfo {
	this := FirebaseUserInfo{}
	return &this
}

// GetUid returns the Uid field value
func (o *FirebaseUserInfo) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *FirebaseUserInfo) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *FirebaseUserInfo) SetUid(v string) {
	o.Uid = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FirebaseUserInfo) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirebaseUserInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FirebaseUserInfo) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FirebaseUserInfo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *FirebaseUserInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirebaseUserInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *FirebaseUserInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *FirebaseUserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *FirebaseUserInfo) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirebaseUserInfo) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *FirebaseUserInfo) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *FirebaseUserInfo) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPhotoUrl returns the PhotoUrl field value if set, zero value otherwise.
func (o *FirebaseUserInfo) GetPhotoUrl() string {
	if o == nil || IsNil(o.PhotoUrl) {
		var ret string
		return ret
	}
	return *o.PhotoUrl
}

// GetPhotoUrlOk returns a tuple with the PhotoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirebaseUserInfo) GetPhotoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PhotoUrl) {
		return nil, false
	}
	return o.PhotoUrl, true
}

// HasPhotoUrl returns a boolean if a field has been set.
func (o *FirebaseUserInfo) HasPhotoUrl() bool {
	if o != nil && !IsNil(o.PhotoUrl) {
		return true
	}

	return false
}

// SetPhotoUrl gets a reference to the given string and assigns it to the PhotoUrl field.
func (o *FirebaseUserInfo) SetPhotoUrl(v string) {
	o.PhotoUrl = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *FirebaseUserInfo) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirebaseUserInfo) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *FirebaseUserInfo) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *FirebaseUserInfo) SetProviderId(v string) {
	o.ProviderId = &v
}

func (o FirebaseUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirebaseUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uid"] = o.Uid
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.PhotoUrl) {
		toSerialize["photoUrl"] = o.PhotoUrl
	}
	if !IsNil(o.ProviderId) {
		toSerialize["providerId"] = o.ProviderId
	}
	return toSerialize, nil
}

type NullableFirebaseUserInfo struct {
	value *FirebaseUserInfo
	isSet bool
}

func (v NullableFirebaseUserInfo) Get() *FirebaseUserInfo {
	return v.value
}

func (v *NullableFirebaseUserInfo) Set(val *FirebaseUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFirebaseUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFirebaseUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirebaseUserInfo(val *FirebaseUserInfo) *NullableFirebaseUserInfo {
	return &NullableFirebaseUserInfo{value: val, isSet: true}
}

func (v NullableFirebaseUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirebaseUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
