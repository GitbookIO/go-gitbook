/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the AnalyticsTopSearches type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsTopSearches{}

// AnalyticsTopSearches Top search queries for a content.
type AnalyticsTopSearches struct {
	// Number of searches done by users.
	Searches float32 `json:"searches"`
	// Top queries searched for this content.
	Queries []AnalyticsSearchQuery `json:"queries"`
}

// NewAnalyticsTopSearches instantiates a new AnalyticsTopSearches object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsTopSearches(searches float32, queries []AnalyticsSearchQuery) *AnalyticsTopSearches {
	this := AnalyticsTopSearches{}
	this.Searches = searches
	this.Queries = queries
	return &this
}

// NewAnalyticsTopSearchesWithDefaults instantiates a new AnalyticsTopSearches object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsTopSearchesWithDefaults() *AnalyticsTopSearches {
	this := AnalyticsTopSearches{}
	return &this
}

// GetSearches returns the Searches field value
func (o *AnalyticsTopSearches) GetSearches() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Searches
}

// GetSearchesOk returns a tuple with the Searches field value
// and a boolean to check if the value has been set.
func (o *AnalyticsTopSearches) GetSearchesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Searches, true
}

// SetSearches sets field value
func (o *AnalyticsTopSearches) SetSearches(v float32) {
	o.Searches = v
}

// GetQueries returns the Queries field value
func (o *AnalyticsTopSearches) GetQueries() []AnalyticsSearchQuery {
	if o == nil {
		var ret []AnalyticsSearchQuery
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *AnalyticsTopSearches) GetQueriesOk() ([]AnalyticsSearchQuery, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries, true
}

// SetQueries sets field value
func (o *AnalyticsTopSearches) SetQueries(v []AnalyticsSearchQuery) {
	o.Queries = v
}

func (o AnalyticsTopSearches) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsTopSearches) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["searches"] = o.Searches
	toSerialize["queries"] = o.Queries
	return toSerialize, nil
}

type NullableAnalyticsTopSearches struct {
	value *AnalyticsTopSearches
	isSet bool
}

func (v NullableAnalyticsTopSearches) Get() *AnalyticsTopSearches {
	return v.value
}

func (v *NullableAnalyticsTopSearches) Set(val *AnalyticsTopSearches) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsTopSearches) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsTopSearches) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsTopSearches(val *AnalyticsTopSearches) *NullableAnalyticsTopSearches {
	return &NullableAnalyticsTopSearches{value: val, isSet: true}
}

func (v NullableAnalyticsTopSearches) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsTopSearches) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
