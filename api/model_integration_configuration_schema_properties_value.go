// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationConfigurationSchemaPropertiesValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationConfigurationSchemaPropertiesValue{}

// IntegrationConfigurationSchemaPropertiesValue struct for IntegrationConfigurationSchemaPropertiesValue
type IntegrationConfigurationSchemaPropertiesValue struct {
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Type        string  `json:"type"`
	Default     *bool   `json:"default,omitempty"`
	CallbackUrl string  `json:"callback_url"`
	ButtonText  string  `json:"button_text"`
}

// NewIntegrationConfigurationSchemaPropertiesValue instantiates a new IntegrationConfigurationSchemaPropertiesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationConfigurationSchemaPropertiesValue(type_ string, callbackUrl string, buttonText string) *IntegrationConfigurationSchemaPropertiesValue {
	this := IntegrationConfigurationSchemaPropertiesValue{}
	this.Type = type_
	this.CallbackUrl = callbackUrl
	this.ButtonText = buttonText
	return &this
}

// NewIntegrationConfigurationSchemaPropertiesValueWithDefaults instantiates a new IntegrationConfigurationSchemaPropertiesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationConfigurationSchemaPropertiesValueWithDefaults() *IntegrationConfigurationSchemaPropertiesValue {
	this := IntegrationConfigurationSchemaPropertiesValue{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *IntegrationConfigurationSchemaPropertiesValue) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IntegrationConfigurationSchemaPropertiesValue) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *IntegrationConfigurationSchemaPropertiesValue) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntegrationConfigurationSchemaPropertiesValue) SetType(v string) {
	o.Type = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *IntegrationConfigurationSchemaPropertiesValue) SetDefault(v bool) {
	o.Default = &v
}

// GetCallbackUrl returns the CallbackUrl field value
func (o *IntegrationConfigurationSchemaPropertiesValue) GetCallbackUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallbackUrl, true
}

// SetCallbackUrl sets field value
func (o *IntegrationConfigurationSchemaPropertiesValue) SetCallbackUrl(v string) {
	o.CallbackUrl = v
}

// GetButtonText returns the ButtonText field value
func (o *IntegrationConfigurationSchemaPropertiesValue) GetButtonText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ButtonText
}

// GetButtonTextOk returns a tuple with the ButtonText field value
// and a boolean to check if the value has been set.
func (o *IntegrationConfigurationSchemaPropertiesValue) GetButtonTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ButtonText, true
}

// SetButtonText sets field value
func (o *IntegrationConfigurationSchemaPropertiesValue) SetButtonText(v string) {
	o.ButtonText = v
}

func (o IntegrationConfigurationSchemaPropertiesValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationConfigurationSchemaPropertiesValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	toSerialize["callback_url"] = o.CallbackUrl
	toSerialize["button_text"] = o.ButtonText
	return toSerialize, nil
}

type NullableIntegrationConfigurationSchemaPropertiesValue struct {
	value *IntegrationConfigurationSchemaPropertiesValue
	isSet bool
}

func (v NullableIntegrationConfigurationSchemaPropertiesValue) Get() *IntegrationConfigurationSchemaPropertiesValue {
	return v.value
}

func (v *NullableIntegrationConfigurationSchemaPropertiesValue) Set(val *IntegrationConfigurationSchemaPropertiesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationConfigurationSchemaPropertiesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationConfigurationSchemaPropertiesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationConfigurationSchemaPropertiesValue(val *IntegrationConfigurationSchemaPropertiesValue) *NullableIntegrationConfigurationSchemaPropertiesValue {
	return &NullableIntegrationConfigurationSchemaPropertiesValue{value: val, isSet: true}
}

func (v NullableIntegrationConfigurationSchemaPropertiesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationConfigurationSchemaPropertiesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
