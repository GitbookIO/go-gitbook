/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the CommentReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentReply{}

// CommentReply struct for CommentReply
type CommentReply struct {
	// Type of Object, always equals to \"comment-reply\"
	Object string `json:"object"`
	// Unique identifier for the reply.
	Id        string           `json:"id"`
	PostedBy  User             `json:"postedBy"`
	PostedAt  string           `json:"postedAt"`
	EditedAt  *string          `json:"editedAt,omitempty"`
	Reactions []EmojiReaction  `json:"reactions"`
	Body      Document         `json:"body"`
	Urls      CommentReplyUrls `json:"urls"`
}

// NewCommentReply instantiates a new CommentReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentReply(object string, id string, postedBy User, postedAt string, reactions []EmojiReaction, body Document, urls CommentReplyUrls) *CommentReply {
	this := CommentReply{}
	this.Object = object
	this.Id = id
	this.PostedBy = postedBy
	this.PostedAt = postedAt
	this.Reactions = reactions
	this.Body = body
	this.Urls = urls
	return &this
}

// NewCommentReplyWithDefaults instantiates a new CommentReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentReplyWithDefaults() *CommentReply {
	this := CommentReply{}
	return &this
}

// GetObject returns the Object field value
func (o *CommentReply) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *CommentReply) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *CommentReply) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *CommentReply) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CommentReply) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CommentReply) SetId(v string) {
	o.Id = v
}

// GetPostedBy returns the PostedBy field value
func (o *CommentReply) GetPostedBy() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.PostedBy
}

// GetPostedByOk returns a tuple with the PostedBy field value
// and a boolean to check if the value has been set.
func (o *CommentReply) GetPostedByOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostedBy, true
}

// SetPostedBy sets field value
func (o *CommentReply) SetPostedBy(v User) {
	o.PostedBy = v
}

// GetPostedAt returns the PostedAt field value
func (o *CommentReply) GetPostedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostedAt
}

// GetPostedAtOk returns a tuple with the PostedAt field value
// and a boolean to check if the value has been set.
func (o *CommentReply) GetPostedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostedAt, true
}

// SetPostedAt sets field value
func (o *CommentReply) SetPostedAt(v string) {
	o.PostedAt = v
}

// GetEditedAt returns the EditedAt field value if set, zero value otherwise.
func (o *CommentReply) GetEditedAt() string {
	if o == nil || IsNil(o.EditedAt) {
		var ret string
		return ret
	}
	return *o.EditedAt
}

// GetEditedAtOk returns a tuple with the EditedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentReply) GetEditedAtOk() (*string, bool) {
	if o == nil || IsNil(o.EditedAt) {
		return nil, false
	}
	return o.EditedAt, true
}

// HasEditedAt returns a boolean if a field has been set.
func (o *CommentReply) HasEditedAt() bool {
	if o != nil && !IsNil(o.EditedAt) {
		return true
	}

	return false
}

// SetEditedAt gets a reference to the given string and assigns it to the EditedAt field.
func (o *CommentReply) SetEditedAt(v string) {
	o.EditedAt = &v
}

// GetReactions returns the Reactions field value
func (o *CommentReply) GetReactions() []EmojiReaction {
	if o == nil {
		var ret []EmojiReaction
		return ret
	}

	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value
// and a boolean to check if the value has been set.
func (o *CommentReply) GetReactionsOk() ([]EmojiReaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reactions, true
}

// SetReactions sets field value
func (o *CommentReply) SetReactions(v []EmojiReaction) {
	o.Reactions = v
}

// GetBody returns the Body field value
func (o *CommentReply) GetBody() Document {
	if o == nil {
		var ret Document
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CommentReply) GetBodyOk() (*Document, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CommentReply) SetBody(v Document) {
	o.Body = v
}

// GetUrls returns the Urls field value
func (o *CommentReply) GetUrls() CommentReplyUrls {
	if o == nil {
		var ret CommentReplyUrls
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *CommentReply) GetUrlsOk() (*CommentReplyUrls, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Urls, true
}

// SetUrls sets field value
func (o *CommentReply) SetUrls(v CommentReplyUrls) {
	o.Urls = v
}

func (o CommentReply) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["postedBy"] = o.PostedBy
	toSerialize["postedAt"] = o.PostedAt
	if !IsNil(o.EditedAt) {
		toSerialize["editedAt"] = o.EditedAt
	}
	toSerialize["reactions"] = o.Reactions
	toSerialize["body"] = o.Body
	toSerialize["urls"] = o.Urls
	return toSerialize, nil
}

type NullableCommentReply struct {
	value *CommentReply
	isSet bool
}

func (v NullableCommentReply) Get() *CommentReply {
	return v.value
}

func (v *NullableCommentReply) Set(val *CommentReply) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentReply) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentReply(val *CommentReply) *NullableCommentReply {
	return &NullableCommentReply{value: val, isSet: true}
}

func (v NullableCommentReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
