// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RevisionTypeUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevisionTypeUpdate{}

// RevisionTypeUpdate struct for RevisionTypeUpdate
type RevisionTypeUpdate struct {
	// Type of Object, always equals to \"revision\"
	Object string `json:"object"`
	// Unique identifier for the revision
	Id string `json:"id"`
	// IDs of the parent revisions
	Parents []string         `json:"parents"`
	Pages   []RevisionPage   `json:"pages"`
	Files   []RevisionFile   `json:"files"`
	Git     *RevisionBaseGit `json:"git,omitempty"`
	Urls    RevisionBaseUrls `json:"urls"`
	// Revision created when updating a change request with changes from primary.
	Type string `json:"type"`
}

// NewRevisionTypeUpdate instantiates a new RevisionTypeUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionTypeUpdate(object string, id string, parents []string, pages []RevisionPage, files []RevisionFile, urls RevisionBaseUrls, type_ string) *RevisionTypeUpdate {
	this := RevisionTypeUpdate{}
	this.Object = object
	this.Id = id
	this.Parents = parents
	this.Pages = pages
	this.Files = files
	this.Urls = urls
	this.Type = type_
	return &this
}

// NewRevisionTypeUpdateWithDefaults instantiates a new RevisionTypeUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionTypeUpdateWithDefaults() *RevisionTypeUpdate {
	this := RevisionTypeUpdate{}
	return &this
}

// GetObject returns the Object field value
func (o *RevisionTypeUpdate) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *RevisionTypeUpdate) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *RevisionTypeUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RevisionTypeUpdate) SetId(v string) {
	o.Id = v
}

// GetParents returns the Parents field value
func (o *RevisionTypeUpdate) GetParents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetParentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parents, true
}

// SetParents sets field value
func (o *RevisionTypeUpdate) SetParents(v []string) {
	o.Parents = v
}

// GetPages returns the Pages field value
func (o *RevisionTypeUpdate) GetPages() []RevisionPage {
	if o == nil {
		var ret []RevisionPage
		return ret
	}

	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetPagesOk() ([]RevisionPage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pages, true
}

// SetPages sets field value
func (o *RevisionTypeUpdate) SetPages(v []RevisionPage) {
	o.Pages = v
}

// GetFiles returns the Files field value
func (o *RevisionTypeUpdate) GetFiles() []RevisionFile {
	if o == nil {
		var ret []RevisionFile
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetFilesOk() ([]RevisionFile, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *RevisionTypeUpdate) SetFiles(v []RevisionFile) {
	o.Files = v
}

// GetGit returns the Git field value if set, zero value otherwise.
func (o *RevisionTypeUpdate) GetGit() RevisionBaseGit {
	if o == nil || IsNil(o.Git) {
		var ret RevisionBaseGit
		return ret
	}
	return *o.Git
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetGitOk() (*RevisionBaseGit, bool) {
	if o == nil || IsNil(o.Git) {
		return nil, false
	}
	return o.Git, true
}

// HasGit returns a boolean if a field has been set.
func (o *RevisionTypeUpdate) HasGit() bool {
	if o != nil && !IsNil(o.Git) {
		return true
	}

	return false
}

// SetGit gets a reference to the given RevisionBaseGit and assigns it to the Git field.
func (o *RevisionTypeUpdate) SetGit(v RevisionBaseGit) {
	o.Git = &v
}

// GetUrls returns the Urls field value
func (o *RevisionTypeUpdate) GetUrls() RevisionBaseUrls {
	if o == nil {
		var ret RevisionBaseUrls
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetUrlsOk() (*RevisionBaseUrls, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Urls, true
}

// SetUrls sets field value
func (o *RevisionTypeUpdate) SetUrls(v RevisionBaseUrls) {
	o.Urls = v
}

// GetType returns the Type field value
func (o *RevisionTypeUpdate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RevisionTypeUpdate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RevisionTypeUpdate) SetType(v string) {
	o.Type = v
}

func (o RevisionTypeUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevisionTypeUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["parents"] = o.Parents
	toSerialize["pages"] = o.Pages
	toSerialize["files"] = o.Files
	if !IsNil(o.Git) {
		toSerialize["git"] = o.Git
	}
	toSerialize["urls"] = o.Urls
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableRevisionTypeUpdate struct {
	value *RevisionTypeUpdate
	isSet bool
}

func (v NullableRevisionTypeUpdate) Get() *RevisionTypeUpdate {
	return v.value
}

func (v *NullableRevisionTypeUpdate) Set(val *RevisionTypeUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionTypeUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionTypeUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionTypeUpdate(val *RevisionTypeUpdate) *NullableRevisionTypeUpdate {
	return &NullableRevisionTypeUpdate{value: val, isSet: true}
}

func (v NullableRevisionTypeUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionTypeUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
