/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the UpsertEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertEntity{}

// UpsertEntity Entity to create or update in an integration's installation.
type UpsertEntity struct {
	// Unique ID of the entity in the context of the integration's entity type
	EntityId string `json:"entityId"`
	// Map of values stored as properties on the entity
	Properties map[string]UpsertEntityPropertiesValue `json:"properties"`
}

// NewUpsertEntity instantiates a new UpsertEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertEntity(entityId string, properties map[string]UpsertEntityPropertiesValue) *UpsertEntity {
	this := UpsertEntity{}
	this.EntityId = entityId
	this.Properties = properties
	return &this
}

// NewUpsertEntityWithDefaults instantiates a new UpsertEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertEntityWithDefaults() *UpsertEntity {
	this := UpsertEntity{}
	return &this
}

// GetEntityId returns the EntityId field value
func (o *UpsertEntity) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *UpsertEntity) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *UpsertEntity) SetEntityId(v string) {
	o.EntityId = v
}

// GetProperties returns the Properties field value
func (o *UpsertEntity) GetProperties() map[string]UpsertEntityPropertiesValue {
	if o == nil {
		var ret map[string]UpsertEntityPropertiesValue
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *UpsertEntity) GetPropertiesOk() (*map[string]UpsertEntityPropertiesValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *UpsertEntity) SetProperties(v map[string]UpsertEntityPropertiesValue) {
	o.Properties = v
}

func (o UpsertEntity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityId"] = o.EntityId
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableUpsertEntity struct {
	value *UpsertEntity
	isSet bool
}

func (v NullableUpsertEntity) Get() *UpsertEntity {
	return v.value
}

func (v *NullableUpsertEntity) Set(val *UpsertEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertEntity(val *UpsertEntity) *NullableUpsertEntity {
	return &NullableUpsertEntity{value: val, isSet: true}
}

func (v NullableUpsertEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
