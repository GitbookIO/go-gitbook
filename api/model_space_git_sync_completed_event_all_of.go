/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the SpaceGitSyncCompletedEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceGitSyncCompletedEventAllOf{}

// SpaceGitSyncCompletedEventAllOf Event when a GitSync operation has been completed.
type SpaceGitSyncCompletedEventAllOf struct {
	Type  string `json:"type"`
	State string `json:"state"`
	// Unique identifier of the new content revision
	RevisionId string `json:"revisionId"`
	// Unique identifier for the commit (sha)
	CommitId string `json:"commitId"`
}

// NewSpaceGitSyncCompletedEventAllOf instantiates a new SpaceGitSyncCompletedEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceGitSyncCompletedEventAllOf(type_ string, state string, revisionId string, commitId string) *SpaceGitSyncCompletedEventAllOf {
	this := SpaceGitSyncCompletedEventAllOf{}
	this.Type = type_
	this.State = state
	this.RevisionId = revisionId
	this.CommitId = commitId
	return &this
}

// NewSpaceGitSyncCompletedEventAllOfWithDefaults instantiates a new SpaceGitSyncCompletedEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceGitSyncCompletedEventAllOfWithDefaults() *SpaceGitSyncCompletedEventAllOf {
	this := SpaceGitSyncCompletedEventAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *SpaceGitSyncCompletedEventAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SpaceGitSyncCompletedEventAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SpaceGitSyncCompletedEventAllOf) SetType(v string) {
	o.Type = v
}

// GetState returns the State field value
func (o *SpaceGitSyncCompletedEventAllOf) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SpaceGitSyncCompletedEventAllOf) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SpaceGitSyncCompletedEventAllOf) SetState(v string) {
	o.State = v
}

// GetRevisionId returns the RevisionId field value
func (o *SpaceGitSyncCompletedEventAllOf) GetRevisionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionId
}

// GetRevisionIdOk returns a tuple with the RevisionId field value
// and a boolean to check if the value has been set.
func (o *SpaceGitSyncCompletedEventAllOf) GetRevisionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionId, true
}

// SetRevisionId sets field value
func (o *SpaceGitSyncCompletedEventAllOf) SetRevisionId(v string) {
	o.RevisionId = v
}

// GetCommitId returns the CommitId field value
func (o *SpaceGitSyncCompletedEventAllOf) GetCommitId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value
// and a boolean to check if the value has been set.
func (o *SpaceGitSyncCompletedEventAllOf) GetCommitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitId, true
}

// SetCommitId sets field value
func (o *SpaceGitSyncCompletedEventAllOf) SetCommitId(v string) {
	o.CommitId = v
}

func (o SpaceGitSyncCompletedEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceGitSyncCompletedEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["state"] = o.State
	toSerialize["revisionId"] = o.RevisionId
	toSerialize["commitId"] = o.CommitId
	return toSerialize, nil
}

type NullableSpaceGitSyncCompletedEventAllOf struct {
	value *SpaceGitSyncCompletedEventAllOf
	isSet bool
}

func (v NullableSpaceGitSyncCompletedEventAllOf) Get() *SpaceGitSyncCompletedEventAllOf {
	return v.value
}

func (v *NullableSpaceGitSyncCompletedEventAllOf) Set(val *SpaceGitSyncCompletedEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceGitSyncCompletedEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceGitSyncCompletedEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceGitSyncCompletedEventAllOf(val *SpaceGitSyncCompletedEventAllOf) *NullableSpaceGitSyncCompletedEventAllOf {
	return &NullableSpaceGitSyncCompletedEventAllOf{value: val, isSet: true}
}

func (v NullableSpaceGitSyncCompletedEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceGitSyncCompletedEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
