/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// BillingProduct Name of the product
type BillingProduct string

// List of BillingProduct
const (
	BILLINGPRODUCT_FREE       BillingProduct = "free"
	BILLINGPRODUCT_PLUS       BillingProduct = "plus"
	BILLINGPRODUCT_PRO        BillingProduct = "pro"
	BILLINGPRODUCT_TEAM       BillingProduct = "team"
	BILLINGPRODUCT_BUSINESS   BillingProduct = "business"
	BILLINGPRODUCT_LEGACY     BillingProduct = "legacy"
	BILLINGPRODUCT_STARTUP    BillingProduct = "startup"
	BILLINGPRODUCT_ENTERPRISE BillingProduct = "enterprise"
)

// All allowed values of BillingProduct enum
var AllowedBillingProductEnumValues = []BillingProduct{
	"free",
	"plus",
	"pro",
	"team",
	"business",
	"legacy",
	"startup",
	"enterprise",
}

func (v *BillingProduct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingProduct(value)
	for _, existing := range AllowedBillingProductEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingProduct", value)
}

// NewBillingProductFromValue returns a pointer to a valid BillingProduct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingProductFromValue(v string) (*BillingProduct, error) {
	ev := BillingProduct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingProduct: valid values are %v", v, AllowedBillingProductEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingProduct) IsValid() bool {
	for _, existing := range AllowedBillingProductEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingProduct value
func (v BillingProduct) Ptr() *BillingProduct {
	return &v
}

type NullableBillingProduct struct {
	value *BillingProduct
	isSet bool
}

func (v NullableBillingProduct) Get() *BillingProduct {
	return v.value
}

func (v *NullableBillingProduct) Set(val *BillingProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingProduct(val *BillingProduct) *NullableBillingProduct {
	return &NullableBillingProduct{value: val, isSet: true}
}

func (v NullableBillingProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
