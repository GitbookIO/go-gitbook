/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the FetchEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchEvent{}

// FetchEvent struct for FetchEvent
type FetchEvent struct {
	// Unique identifier for the event.
	EventId string `json:"eventId"`
	Type    string `json:"type"`
	// The space ID, if requests are specific to a single space
	SpaceId *string `json:"spaceId,omitempty"`
	// The installation ID, if requests are specific to a single installation
	InstallationId *string              `json:"installationId,omitempty"`
	Auth           *FetchEventAllOfAuth `json:"auth,omitempty"`
	Request        FetchRequest         `json:"request"`
}

// NewFetchEvent instantiates a new FetchEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchEvent(eventId string, type_ string, request FetchRequest) *FetchEvent {
	this := FetchEvent{}
	this.EventId = eventId
	this.Type = type_
	this.Request = request
	return &this
}

// NewFetchEventWithDefaults instantiates a new FetchEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchEventWithDefaults() *FetchEvent {
	this := FetchEvent{}
	return &this
}

// GetEventId returns the EventId field value
func (o *FetchEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *FetchEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *FetchEvent) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *FetchEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FetchEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FetchEvent) SetType(v string) {
	o.Type = v
}

// GetSpaceId returns the SpaceId field value if set, zero value otherwise.
func (o *FetchEvent) GetSpaceId() string {
	if o == nil || IsNil(o.SpaceId) {
		var ret string
		return ret
	}
	return *o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchEvent) GetSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceId) {
		return nil, false
	}
	return o.SpaceId, true
}

// HasSpaceId returns a boolean if a field has been set.
func (o *FetchEvent) HasSpaceId() bool {
	if o != nil && !IsNil(o.SpaceId) {
		return true
	}

	return false
}

// SetSpaceId gets a reference to the given string and assigns it to the SpaceId field.
func (o *FetchEvent) SetSpaceId(v string) {
	o.SpaceId = &v
}

// GetInstallationId returns the InstallationId field value if set, zero value otherwise.
func (o *FetchEvent) GetInstallationId() string {
	if o == nil || IsNil(o.InstallationId) {
		var ret string
		return ret
	}
	return *o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchEvent) GetInstallationIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationId) {
		return nil, false
	}
	return o.InstallationId, true
}

// HasInstallationId returns a boolean if a field has been set.
func (o *FetchEvent) HasInstallationId() bool {
	if o != nil && !IsNil(o.InstallationId) {
		return true
	}

	return false
}

// SetInstallationId gets a reference to the given string and assigns it to the InstallationId field.
func (o *FetchEvent) SetInstallationId(v string) {
	o.InstallationId = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *FetchEvent) GetAuth() FetchEventAllOfAuth {
	if o == nil || IsNil(o.Auth) {
		var ret FetchEventAllOfAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchEvent) GetAuthOk() (*FetchEventAllOfAuth, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *FetchEvent) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given FetchEventAllOfAuth and assigns it to the Auth field.
func (o *FetchEvent) SetAuth(v FetchEventAllOfAuth) {
	o.Auth = &v
}

// GetRequest returns the Request field value
func (o *FetchEvent) GetRequest() FetchRequest {
	if o == nil {
		var ret FetchRequest
		return ret
	}

	return o.Request
}

// GetRequestOk returns a tuple with the Request field value
// and a boolean to check if the value has been set.
func (o *FetchEvent) GetRequestOk() (*FetchRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Request, true
}

// SetRequest sets field value
func (o *FetchEvent) SetRequest(v FetchRequest) {
	o.Request = v
}

func (o FetchEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventId"] = o.EventId
	toSerialize["type"] = o.Type
	if !IsNil(o.SpaceId) {
		toSerialize["spaceId"] = o.SpaceId
	}
	if !IsNil(o.InstallationId) {
		toSerialize["installationId"] = o.InstallationId
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	toSerialize["request"] = o.Request
	return toSerialize, nil
}

type NullableFetchEvent struct {
	value *FetchEvent
	isSet bool
}

func (v NullableFetchEvent) Get() *FetchEvent {
	return v.value
}

func (v *NullableFetchEvent) Set(val *FetchEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchEvent(val *FetchEvent) *NullableFetchEvent {
	return &NullableFetchEvent{value: val, isSet: true}
}

func (v NullableFetchEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
