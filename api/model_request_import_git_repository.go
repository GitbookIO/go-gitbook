// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RequestImportGitRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestImportGitRepository{}

// RequestImportGitRepository struct for RequestImportGitRepository
type RequestImportGitRepository struct {
	// URL of the Git repository to import. It can contain basic auth credentials.
	Url string `json:"url"`
	// Git ref to import in the format \"refs/heads/main\"
	Ref string `json:"ref"`
	// Unique identifier to use to cache the Git repository across multiple operations.
	RepoCacheID *string `json:"repoCacheID,omitempty"`
	// URL to use as a prefix for external file references.
	RepoTreeURL *string `json:"repoTreeURL,omitempty"`
	// URL to use as a prefix for the commit URL.
	RepoCommitURL *string `json:"repoCommitURL,omitempty"`
	// Path to a root directory for the project in the repository.
	RepoProjectDirectory *string `json:"repoProjectDirectory,omitempty"`
	Force                *bool   `json:"force,omitempty"`
	// If true, the import will generate a revision without updating the space primary content.
	Standalone *bool                      `json:"standalone,omitempty"`
	GitInfo    *RequestUpdateSpaceGitInfo `json:"gitInfo,omitempty"`
}

// NewRequestImportGitRepository instantiates a new RequestImportGitRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestImportGitRepository(url string, ref string) *RequestImportGitRepository {
	this := RequestImportGitRepository{}
	this.Url = url
	this.Ref = ref
	return &this
}

// NewRequestImportGitRepositoryWithDefaults instantiates a new RequestImportGitRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestImportGitRepositoryWithDefaults() *RequestImportGitRepository {
	this := RequestImportGitRepository{}
	return &this
}

// GetUrl returns the Url field value
func (o *RequestImportGitRepository) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RequestImportGitRepository) SetUrl(v string) {
	o.Url = v
}

// GetRef returns the Ref field value
func (o *RequestImportGitRepository) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *RequestImportGitRepository) SetRef(v string) {
	o.Ref = v
}

// GetRepoCacheID returns the RepoCacheID field value if set, zero value otherwise.
func (o *RequestImportGitRepository) GetRepoCacheID() string {
	if o == nil || IsNil(o.RepoCacheID) {
		var ret string
		return ret
	}
	return *o.RepoCacheID
}

// GetRepoCacheIDOk returns a tuple with the RepoCacheID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetRepoCacheIDOk() (*string, bool) {
	if o == nil || IsNil(o.RepoCacheID) {
		return nil, false
	}
	return o.RepoCacheID, true
}

// HasRepoCacheID returns a boolean if a field has been set.
func (o *RequestImportGitRepository) HasRepoCacheID() bool {
	if o != nil && !IsNil(o.RepoCacheID) {
		return true
	}

	return false
}

// SetRepoCacheID gets a reference to the given string and assigns it to the RepoCacheID field.
func (o *RequestImportGitRepository) SetRepoCacheID(v string) {
	o.RepoCacheID = &v
}

// GetRepoTreeURL returns the RepoTreeURL field value if set, zero value otherwise.
func (o *RequestImportGitRepository) GetRepoTreeURL() string {
	if o == nil || IsNil(o.RepoTreeURL) {
		var ret string
		return ret
	}
	return *o.RepoTreeURL
}

// GetRepoTreeURLOk returns a tuple with the RepoTreeURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetRepoTreeURLOk() (*string, bool) {
	if o == nil || IsNil(o.RepoTreeURL) {
		return nil, false
	}
	return o.RepoTreeURL, true
}

// HasRepoTreeURL returns a boolean if a field has been set.
func (o *RequestImportGitRepository) HasRepoTreeURL() bool {
	if o != nil && !IsNil(o.RepoTreeURL) {
		return true
	}

	return false
}

// SetRepoTreeURL gets a reference to the given string and assigns it to the RepoTreeURL field.
func (o *RequestImportGitRepository) SetRepoTreeURL(v string) {
	o.RepoTreeURL = &v
}

// GetRepoCommitURL returns the RepoCommitURL field value if set, zero value otherwise.
func (o *RequestImportGitRepository) GetRepoCommitURL() string {
	if o == nil || IsNil(o.RepoCommitURL) {
		var ret string
		return ret
	}
	return *o.RepoCommitURL
}

// GetRepoCommitURLOk returns a tuple with the RepoCommitURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetRepoCommitURLOk() (*string, bool) {
	if o == nil || IsNil(o.RepoCommitURL) {
		return nil, false
	}
	return o.RepoCommitURL, true
}

// HasRepoCommitURL returns a boolean if a field has been set.
func (o *RequestImportGitRepository) HasRepoCommitURL() bool {
	if o != nil && !IsNil(o.RepoCommitURL) {
		return true
	}

	return false
}

// SetRepoCommitURL gets a reference to the given string and assigns it to the RepoCommitURL field.
func (o *RequestImportGitRepository) SetRepoCommitURL(v string) {
	o.RepoCommitURL = &v
}

// GetRepoProjectDirectory returns the RepoProjectDirectory field value if set, zero value otherwise.
func (o *RequestImportGitRepository) GetRepoProjectDirectory() string {
	if o == nil || IsNil(o.RepoProjectDirectory) {
		var ret string
		return ret
	}
	return *o.RepoProjectDirectory
}

// GetRepoProjectDirectoryOk returns a tuple with the RepoProjectDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetRepoProjectDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.RepoProjectDirectory) {
		return nil, false
	}
	return o.RepoProjectDirectory, true
}

// HasRepoProjectDirectory returns a boolean if a field has been set.
func (o *RequestImportGitRepository) HasRepoProjectDirectory() bool {
	if o != nil && !IsNil(o.RepoProjectDirectory) {
		return true
	}

	return false
}

// SetRepoProjectDirectory gets a reference to the given string and assigns it to the RepoProjectDirectory field.
func (o *RequestImportGitRepository) SetRepoProjectDirectory(v string) {
	o.RepoProjectDirectory = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *RequestImportGitRepository) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *RequestImportGitRepository) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *RequestImportGitRepository) SetForce(v bool) {
	o.Force = &v
}

// GetStandalone returns the Standalone field value if set, zero value otherwise.
func (o *RequestImportGitRepository) GetStandalone() bool {
	if o == nil || IsNil(o.Standalone) {
		var ret bool
		return ret
	}
	return *o.Standalone
}

// GetStandaloneOk returns a tuple with the Standalone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetStandaloneOk() (*bool, bool) {
	if o == nil || IsNil(o.Standalone) {
		return nil, false
	}
	return o.Standalone, true
}

// HasStandalone returns a boolean if a field has been set.
func (o *RequestImportGitRepository) HasStandalone() bool {
	if o != nil && !IsNil(o.Standalone) {
		return true
	}

	return false
}

// SetStandalone gets a reference to the given bool and assigns it to the Standalone field.
func (o *RequestImportGitRepository) SetStandalone(v bool) {
	o.Standalone = &v
}

// GetGitInfo returns the GitInfo field value if set, zero value otherwise.
func (o *RequestImportGitRepository) GetGitInfo() RequestUpdateSpaceGitInfo {
	if o == nil || IsNil(o.GitInfo) {
		var ret RequestUpdateSpaceGitInfo
		return ret
	}
	return *o.GitInfo
}

// GetGitInfoOk returns a tuple with the GitInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestImportGitRepository) GetGitInfoOk() (*RequestUpdateSpaceGitInfo, bool) {
	if o == nil || IsNil(o.GitInfo) {
		return nil, false
	}
	return o.GitInfo, true
}

// HasGitInfo returns a boolean if a field has been set.
func (o *RequestImportGitRepository) HasGitInfo() bool {
	if o != nil && !IsNil(o.GitInfo) {
		return true
	}

	return false
}

// SetGitInfo gets a reference to the given RequestUpdateSpaceGitInfo and assigns it to the GitInfo field.
func (o *RequestImportGitRepository) SetGitInfo(v RequestUpdateSpaceGitInfo) {
	o.GitInfo = &v
}

func (o RequestImportGitRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestImportGitRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["ref"] = o.Ref
	if !IsNil(o.RepoCacheID) {
		toSerialize["repoCacheID"] = o.RepoCacheID
	}
	if !IsNil(o.RepoTreeURL) {
		toSerialize["repoTreeURL"] = o.RepoTreeURL
	}
	if !IsNil(o.RepoCommitURL) {
		toSerialize["repoCommitURL"] = o.RepoCommitURL
	}
	if !IsNil(o.RepoProjectDirectory) {
		toSerialize["repoProjectDirectory"] = o.RepoProjectDirectory
	}
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	if !IsNil(o.Standalone) {
		toSerialize["standalone"] = o.Standalone
	}
	if !IsNil(o.GitInfo) {
		toSerialize["gitInfo"] = o.GitInfo
	}
	return toSerialize, nil
}

type NullableRequestImportGitRepository struct {
	value *RequestImportGitRepository
	isSet bool
}

func (v NullableRequestImportGitRepository) Get() *RequestImportGitRepository {
	return v.value
}

func (v *NullableRequestImportGitRepository) Set(val *RequestImportGitRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestImportGitRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestImportGitRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestImportGitRepository(val *RequestImportGitRepository) *NullableRequestImportGitRepository {
	return &NullableRequestImportGitRepository{value: val, isSet: true}
}

func (v NullableRequestImportGitRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestImportGitRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
