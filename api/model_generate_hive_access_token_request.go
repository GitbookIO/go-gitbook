/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the GenerateHiveAccessTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateHiveAccessTokenRequest{}

// GenerateHiveAccessTokenRequest struct for GenerateHiveAccessTokenRequest
type GenerateHiveAccessTokenRequest struct {
	Spaces []string `json:"spaces,omitempty"`
}

// NewGenerateHiveAccessTokenRequest instantiates a new GenerateHiveAccessTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateHiveAccessTokenRequest() *GenerateHiveAccessTokenRequest {
	this := GenerateHiveAccessTokenRequest{}
	return &this
}

// NewGenerateHiveAccessTokenRequestWithDefaults instantiates a new GenerateHiveAccessTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateHiveAccessTokenRequestWithDefaults() *GenerateHiveAccessTokenRequest {
	this := GenerateHiveAccessTokenRequest{}
	return &this
}

// GetSpaces returns the Spaces field value if set, zero value otherwise.
func (o *GenerateHiveAccessTokenRequest) GetSpaces() []string {
	if o == nil || IsNil(o.Spaces) {
		var ret []string
		return ret
	}
	return o.Spaces
}

// GetSpacesOk returns a tuple with the Spaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateHiveAccessTokenRequest) GetSpacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Spaces) {
		return nil, false
	}
	return o.Spaces, true
}

// HasSpaces returns a boolean if a field has been set.
func (o *GenerateHiveAccessTokenRequest) HasSpaces() bool {
	if o != nil && !IsNil(o.Spaces) {
		return true
	}

	return false
}

// SetSpaces gets a reference to the given []string and assigns it to the Spaces field.
func (o *GenerateHiveAccessTokenRequest) SetSpaces(v []string) {
	o.Spaces = v
}

func (o GenerateHiveAccessTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateHiveAccessTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Spaces) {
		toSerialize["spaces"] = o.Spaces
	}
	return toSerialize, nil
}

type NullableGenerateHiveAccessTokenRequest struct {
	value *GenerateHiveAccessTokenRequest
	isSet bool
}

func (v NullableGenerateHiveAccessTokenRequest) Get() *GenerateHiveAccessTokenRequest {
	return v.value
}

func (v *NullableGenerateHiveAccessTokenRequest) Set(val *GenerateHiveAccessTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateHiveAccessTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateHiveAccessTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateHiveAccessTokenRequest(val *GenerateHiveAccessTokenRequest) *NullableGenerateHiveAccessTokenRequest {
	return &NullableGenerateHiveAccessTokenRequest{value: val, isSet: true}
}

func (v NullableGenerateHiveAccessTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateHiveAccessTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
