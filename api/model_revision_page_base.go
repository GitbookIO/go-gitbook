/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RevisionPageBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevisionPageBase{}

// RevisionPageBase struct for RevisionPageBase
type RevisionPageBase struct {
	// Unique identifier for the page in the revision
	Id string `json:"id"`
	// Title of the page
	Title string `json:"title"`
}

// NewRevisionPageBase instantiates a new RevisionPageBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionPageBase(id string, title string) *RevisionPageBase {
	this := RevisionPageBase{}
	this.Id = id
	this.Title = title
	return &this
}

// NewRevisionPageBaseWithDefaults instantiates a new RevisionPageBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionPageBaseWithDefaults() *RevisionPageBase {
	this := RevisionPageBase{}
	return &this
}

// GetId returns the Id field value
func (o *RevisionPageBase) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RevisionPageBase) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RevisionPageBase) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *RevisionPageBase) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *RevisionPageBase) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *RevisionPageBase) SetTitle(v string) {
	o.Title = v
}

func (o RevisionPageBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevisionPageBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

type NullableRevisionPageBase struct {
	value *RevisionPageBase
	isSet bool
}

func (v NullableRevisionPageBase) Get() *RevisionPageBase {
	return v.value
}

func (v *NullableRevisionPageBase) Set(val *RevisionPageBase) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionPageBase) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionPageBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionPageBase(val *RevisionPageBase) *NullableRevisionPageBase {
	return &NullableRevisionPageBase{value: val, isSet: true}
}

func (v NullableRevisionPageBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionPageBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
