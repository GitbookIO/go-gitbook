// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RecordingFileAddedEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordingFileAddedEventAllOf{}

// RecordingFileAddedEventAllOf struct for RecordingFileAddedEventAllOf
type RecordingFileAddedEventAllOf struct {
	Type         string `json:"type"`
	Filename     string `json:"filename"`
	FileSnapshot string `json:"fileSnapshot"`
}

// NewRecordingFileAddedEventAllOf instantiates a new RecordingFileAddedEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingFileAddedEventAllOf(type_ string, filename string, fileSnapshot string) *RecordingFileAddedEventAllOf {
	this := RecordingFileAddedEventAllOf{}
	this.Type = type_
	this.Filename = filename
	this.FileSnapshot = fileSnapshot
	return &this
}

// NewRecordingFileAddedEventAllOfWithDefaults instantiates a new RecordingFileAddedEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingFileAddedEventAllOfWithDefaults() *RecordingFileAddedEventAllOf {
	this := RecordingFileAddedEventAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *RecordingFileAddedEventAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecordingFileAddedEventAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecordingFileAddedEventAllOf) SetType(v string) {
	o.Type = v
}

// GetFilename returns the Filename field value
func (o *RecordingFileAddedEventAllOf) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *RecordingFileAddedEventAllOf) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *RecordingFileAddedEventAllOf) SetFilename(v string) {
	o.Filename = v
}

// GetFileSnapshot returns the FileSnapshot field value
func (o *RecordingFileAddedEventAllOf) GetFileSnapshot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileSnapshot
}

// GetFileSnapshotOk returns a tuple with the FileSnapshot field value
// and a boolean to check if the value has been set.
func (o *RecordingFileAddedEventAllOf) GetFileSnapshotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSnapshot, true
}

// SetFileSnapshot sets field value
func (o *RecordingFileAddedEventAllOf) SetFileSnapshot(v string) {
	o.FileSnapshot = v
}

func (o RecordingFileAddedEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingFileAddedEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["filename"] = o.Filename
	toSerialize["fileSnapshot"] = o.FileSnapshot
	return toSerialize, nil
}

type NullableRecordingFileAddedEventAllOf struct {
	value *RecordingFileAddedEventAllOf
	isSet bool
}

func (v NullableRecordingFileAddedEventAllOf) Get() *RecordingFileAddedEventAllOf {
	return v.value
}

func (v *NullableRecordingFileAddedEventAllOf) Set(val *RecordingFileAddedEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingFileAddedEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingFileAddedEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingFileAddedEventAllOf(val *RecordingFileAddedEventAllOf) *NullableRecordingFileAddedEventAllOf {
	return &NullableRecordingFileAddedEventAllOf{value: val, isSet: true}
}

func (v NullableRecordingFileAddedEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingFileAddedEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
