/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// ContentKitDefaultAction - struct for ContentKitDefaultAction
type ContentKitDefaultAction struct {
	ContentKitDefaultActionOneOf  *ContentKitDefaultActionOneOf
	ContentKitDefaultActionOneOf1 *ContentKitDefaultActionOneOf1
	ContentKitDefaultActionOneOf2 *ContentKitDefaultActionOneOf2
	ContentKitDefaultActionOneOf3 *ContentKitDefaultActionOneOf3
	ContentKitDefaultActionOneOf4 *ContentKitDefaultActionOneOf4
}

// ContentKitDefaultActionOneOfAsContentKitDefaultAction is a convenience function that returns ContentKitDefaultActionOneOf wrapped in ContentKitDefaultAction
func ContentKitDefaultActionOneOfAsContentKitDefaultAction(v *ContentKitDefaultActionOneOf) ContentKitDefaultAction {
	return ContentKitDefaultAction{
		ContentKitDefaultActionOneOf: v,
	}
}

// ContentKitDefaultActionOneOf1AsContentKitDefaultAction is a convenience function that returns ContentKitDefaultActionOneOf1 wrapped in ContentKitDefaultAction
func ContentKitDefaultActionOneOf1AsContentKitDefaultAction(v *ContentKitDefaultActionOneOf1) ContentKitDefaultAction {
	return ContentKitDefaultAction{
		ContentKitDefaultActionOneOf1: v,
	}
}

// ContentKitDefaultActionOneOf2AsContentKitDefaultAction is a convenience function that returns ContentKitDefaultActionOneOf2 wrapped in ContentKitDefaultAction
func ContentKitDefaultActionOneOf2AsContentKitDefaultAction(v *ContentKitDefaultActionOneOf2) ContentKitDefaultAction {
	return ContentKitDefaultAction{
		ContentKitDefaultActionOneOf2: v,
	}
}

// ContentKitDefaultActionOneOf3AsContentKitDefaultAction is a convenience function that returns ContentKitDefaultActionOneOf3 wrapped in ContentKitDefaultAction
func ContentKitDefaultActionOneOf3AsContentKitDefaultAction(v *ContentKitDefaultActionOneOf3) ContentKitDefaultAction {
	return ContentKitDefaultAction{
		ContentKitDefaultActionOneOf3: v,
	}
}

// ContentKitDefaultActionOneOf4AsContentKitDefaultAction is a convenience function that returns ContentKitDefaultActionOneOf4 wrapped in ContentKitDefaultAction
func ContentKitDefaultActionOneOf4AsContentKitDefaultAction(v *ContentKitDefaultActionOneOf4) ContentKitDefaultAction {
	return ContentKitDefaultAction{
		ContentKitDefaultActionOneOf4: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentKitDefaultAction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContentKitDefaultActionOneOf
	err = newStrictDecoder(data).Decode(&dst.ContentKitDefaultActionOneOf)
	if err == nil {
		jsonContentKitDefaultActionOneOf, _ := json.Marshal(dst.ContentKitDefaultActionOneOf)
		if string(jsonContentKitDefaultActionOneOf) == "{}" { // empty struct
			dst.ContentKitDefaultActionOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitDefaultActionOneOf = nil
	}

	// try to unmarshal data into ContentKitDefaultActionOneOf1
	err = newStrictDecoder(data).Decode(&dst.ContentKitDefaultActionOneOf1)
	if err == nil {
		jsonContentKitDefaultActionOneOf1, _ := json.Marshal(dst.ContentKitDefaultActionOneOf1)
		if string(jsonContentKitDefaultActionOneOf1) == "{}" { // empty struct
			dst.ContentKitDefaultActionOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitDefaultActionOneOf1 = nil
	}

	// try to unmarshal data into ContentKitDefaultActionOneOf2
	err = newStrictDecoder(data).Decode(&dst.ContentKitDefaultActionOneOf2)
	if err == nil {
		jsonContentKitDefaultActionOneOf2, _ := json.Marshal(dst.ContentKitDefaultActionOneOf2)
		if string(jsonContentKitDefaultActionOneOf2) == "{}" { // empty struct
			dst.ContentKitDefaultActionOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitDefaultActionOneOf2 = nil
	}

	// try to unmarshal data into ContentKitDefaultActionOneOf3
	err = newStrictDecoder(data).Decode(&dst.ContentKitDefaultActionOneOf3)
	if err == nil {
		jsonContentKitDefaultActionOneOf3, _ := json.Marshal(dst.ContentKitDefaultActionOneOf3)
		if string(jsonContentKitDefaultActionOneOf3) == "{}" { // empty struct
			dst.ContentKitDefaultActionOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitDefaultActionOneOf3 = nil
	}

	// try to unmarshal data into ContentKitDefaultActionOneOf4
	err = newStrictDecoder(data).Decode(&dst.ContentKitDefaultActionOneOf4)
	if err == nil {
		jsonContentKitDefaultActionOneOf4, _ := json.Marshal(dst.ContentKitDefaultActionOneOf4)
		if string(jsonContentKitDefaultActionOneOf4) == "{}" { // empty struct
			dst.ContentKitDefaultActionOneOf4 = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitDefaultActionOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContentKitDefaultActionOneOf = nil
		dst.ContentKitDefaultActionOneOf1 = nil
		dst.ContentKitDefaultActionOneOf2 = nil
		dst.ContentKitDefaultActionOneOf3 = nil
		dst.ContentKitDefaultActionOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentKitDefaultAction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentKitDefaultAction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentKitDefaultAction) MarshalJSON() ([]byte, error) {
	if src.ContentKitDefaultActionOneOf != nil {
		return json.Marshal(&src.ContentKitDefaultActionOneOf)
	}

	if src.ContentKitDefaultActionOneOf1 != nil {
		return json.Marshal(&src.ContentKitDefaultActionOneOf1)
	}

	if src.ContentKitDefaultActionOneOf2 != nil {
		return json.Marshal(&src.ContentKitDefaultActionOneOf2)
	}

	if src.ContentKitDefaultActionOneOf3 != nil {
		return json.Marshal(&src.ContentKitDefaultActionOneOf3)
	}

	if src.ContentKitDefaultActionOneOf4 != nil {
		return json.Marshal(&src.ContentKitDefaultActionOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentKitDefaultAction) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ContentKitDefaultActionOneOf != nil {
		return obj.ContentKitDefaultActionOneOf
	}

	if obj.ContentKitDefaultActionOneOf1 != nil {
		return obj.ContentKitDefaultActionOneOf1
	}

	if obj.ContentKitDefaultActionOneOf2 != nil {
		return obj.ContentKitDefaultActionOneOf2
	}

	if obj.ContentKitDefaultActionOneOf3 != nil {
		return obj.ContentKitDefaultActionOneOf3
	}

	if obj.ContentKitDefaultActionOneOf4 != nil {
		return obj.ContentKitDefaultActionOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableContentKitDefaultAction struct {
	value *ContentKitDefaultAction
	isSet bool
}

func (v NullableContentKitDefaultAction) Get() *ContentKitDefaultAction {
	return v.value
}

func (v *NullableContentKitDefaultAction) Set(val *ContentKitDefaultAction) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitDefaultAction) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitDefaultAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitDefaultAction(val *ContentKitDefaultAction) *NullableContentKitDefaultAction {
	return &NullableContentKitDefaultAction{value: val, isSet: true}
}

func (v NullableContentKitDefaultAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitDefaultAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
