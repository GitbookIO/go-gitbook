// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitLink{}

// ContentKitLink struct for ContentKitLink
type ContentKitLink struct {
	Type     string                 `json:"type"`
	Target   ContentKitLinkTarget   `json:"target"`
	Children ContentKitLinkChildren `json:"children"`
}

// NewContentKitLink instantiates a new ContentKitLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitLink(type_ string, target ContentKitLinkTarget, children ContentKitLinkChildren) *ContentKitLink {
	this := ContentKitLink{}
	this.Type = type_
	this.Target = target
	this.Children = children
	return &this
}

// NewContentKitLinkWithDefaults instantiates a new ContentKitLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitLinkWithDefaults() *ContentKitLink {
	this := ContentKitLink{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitLink) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitLink) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitLink) SetType(v string) {
	o.Type = v
}

// GetTarget returns the Target field value
func (o *ContentKitLink) GetTarget() ContentKitLinkTarget {
	if o == nil {
		var ret ContentKitLinkTarget
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *ContentKitLink) GetTargetOk() (*ContentKitLinkTarget, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *ContentKitLink) SetTarget(v ContentKitLinkTarget) {
	o.Target = v
}

// GetChildren returns the Children field value
func (o *ContentKitLink) GetChildren() ContentKitLinkChildren {
	if o == nil {
		var ret ContentKitLinkChildren
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *ContentKitLink) GetChildrenOk() (*ContentKitLinkChildren, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Children, true
}

// SetChildren sets field value
func (o *ContentKitLink) SetChildren(v ContentKitLinkChildren) {
	o.Children = v
}

func (o ContentKitLink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["target"] = o.Target
	toSerialize["children"] = o.Children
	return toSerialize, nil
}

type NullableContentKitLink struct {
	value *ContentKitLink
	isSet bool
}

func (v NullableContentKitLink) Get() *ContentKitLink {
	return v.value
}

func (v *NullableContentKitLink) Set(val *ContentKitLink) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitLink) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitLink(val *ContentKitLink) *NullableContentKitLink {
	return &NullableContentKitLink{value: val, isSet: true}
}

func (v NullableContentKitLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
