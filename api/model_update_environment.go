/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the UpdateEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEnvironment{}

// UpdateEnvironment An object containing the new title for an Environment
type UpdateEnvironment struct {
	Title *string `json:"title,omitempty"`
	// Whether or not an environment is considered to have elevated responsibilities over other environments. Useful for distinguishing a production environment from a staging environment. Multiple primary environments are allowed. Your organization must have at least one primary environment.
	Primary *bool `json:"primary,omitempty"`
}

// NewUpdateEnvironment instantiates a new UpdateEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEnvironment() *UpdateEnvironment {
	this := UpdateEnvironment{}
	return &this
}

// NewUpdateEnvironmentWithDefaults instantiates a new UpdateEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEnvironmentWithDefaults() *UpdateEnvironment {
	this := UpdateEnvironment{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateEnvironment) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEnvironment) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateEnvironment) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateEnvironment) SetTitle(v string) {
	o.Title = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *UpdateEnvironment) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEnvironment) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *UpdateEnvironment) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *UpdateEnvironment) SetPrimary(v bool) {
	o.Primary = &v
}

func (o UpdateEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	return toSerialize, nil
}

type NullableUpdateEnvironment struct {
	value *UpdateEnvironment
	isSet bool
}

func (v NullableUpdateEnvironment) Get() *UpdateEnvironment {
	return v.value
}

func (v *NullableUpdateEnvironment) Set(val *UpdateEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEnvironment(val *UpdateEnvironment) *NullableUpdateEnvironment {
	return &NullableUpdateEnvironment{value: val, isSet: true}
}

func (v NullableUpdateEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
