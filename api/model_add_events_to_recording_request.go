/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the AddEventsToRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddEventsToRecordingRequest{}

// AddEventsToRecordingRequest struct for AddEventsToRecordingRequest
type AddEventsToRecordingRequest struct {
	Events []RecordingEvent `json:"events"`
}

// NewAddEventsToRecordingRequest instantiates a new AddEventsToRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddEventsToRecordingRequest(events []RecordingEvent) *AddEventsToRecordingRequest {
	this := AddEventsToRecordingRequest{}
	this.Events = events
	return &this
}

// NewAddEventsToRecordingRequestWithDefaults instantiates a new AddEventsToRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddEventsToRecordingRequestWithDefaults() *AddEventsToRecordingRequest {
	this := AddEventsToRecordingRequest{}
	return &this
}

// GetEvents returns the Events field value
func (o *AddEventsToRecordingRequest) GetEvents() []RecordingEvent {
	if o == nil {
		var ret []RecordingEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *AddEventsToRecordingRequest) GetEventsOk() ([]RecordingEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *AddEventsToRecordingRequest) SetEvents(v []RecordingEvent) {
	o.Events = v
}

func (o AddEventsToRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddEventsToRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

type NullableAddEventsToRecordingRequest struct {
	value *AddEventsToRecordingRequest
	isSet bool
}

func (v NullableAddEventsToRecordingRequest) Get() *AddEventsToRecordingRequest {
	return v.value
}

func (v *NullableAddEventsToRecordingRequest) Set(val *AddEventsToRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddEventsToRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddEventsToRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddEventsToRecordingRequest(val *AddEventsToRecordingRequest) *NullableAddEventsToRecordingRequest {
	return &NullableAddEventsToRecordingRequest{value: val, isSet: true}
}

func (v NullableAddEventsToRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddEventsToRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
