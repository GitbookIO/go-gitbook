/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitHStack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitHStack{}

// ContentKitHStack Horizontal stack of boxes.
type ContentKitHStack struct {
	Type     string                        `json:"type"`
	Align    *string                       `json:"align,omitempty"`
	Children []ContentKitDescendantElement `json:"children"`
}

// NewContentKitHStack instantiates a new ContentKitHStack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitHStack(type_ string, children []ContentKitDescendantElement) *ContentKitHStack {
	this := ContentKitHStack{}
	this.Type = type_
	var align string = "start"
	this.Align = &align
	this.Children = children
	return &this
}

// NewContentKitHStackWithDefaults instantiates a new ContentKitHStack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitHStackWithDefaults() *ContentKitHStack {
	this := ContentKitHStack{}
	var align string = "start"
	this.Align = &align
	return &this
}

// GetType returns the Type field value
func (o *ContentKitHStack) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitHStack) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitHStack) SetType(v string) {
	o.Type = v
}

// GetAlign returns the Align field value if set, zero value otherwise.
func (o *ContentKitHStack) GetAlign() string {
	if o == nil || IsNil(o.Align) {
		var ret string
		return ret
	}
	return *o.Align
}

// GetAlignOk returns a tuple with the Align field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitHStack) GetAlignOk() (*string, bool) {
	if o == nil || IsNil(o.Align) {
		return nil, false
	}
	return o.Align, true
}

// HasAlign returns a boolean if a field has been set.
func (o *ContentKitHStack) HasAlign() bool {
	if o != nil && !IsNil(o.Align) {
		return true
	}

	return false
}

// SetAlign gets a reference to the given string and assigns it to the Align field.
func (o *ContentKitHStack) SetAlign(v string) {
	o.Align = &v
}

// GetChildren returns the Children field value
func (o *ContentKitHStack) GetChildren() []ContentKitDescendantElement {
	if o == nil {
		var ret []ContentKitDescendantElement
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *ContentKitHStack) GetChildrenOk() ([]ContentKitDescendantElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *ContentKitHStack) SetChildren(v []ContentKitDescendantElement) {
	o.Children = v
}

func (o ContentKitHStack) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitHStack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Align) {
		toSerialize["align"] = o.Align
	}
	toSerialize["children"] = o.Children
	return toSerialize, nil
}

type NullableContentKitHStack struct {
	value *ContentKitHStack
	isSet bool
}

func (v NullableContentKitHStack) Get() *ContentKitHStack {
	return v.value
}

func (v *NullableContentKitHStack) Set(val *ContentKitHStack) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitHStack) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitHStack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitHStack(val *ContentKitHStack) *NullableContentKitHStack {
	return &NullableContentKitHStack{value: val, isSet: true}
}

func (v NullableContentKitHStack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitHStack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
