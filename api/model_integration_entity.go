/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationEntity{}

// IntegrationEntity struct for IntegrationEntity
type IntegrationEntity struct {
	// Unique ID of the entity in the context of the integration's installation
	EntityId string `json:"entityId"`
	// Title of the entity
	Title string `json:"title"`
	// Longer text description of the entity
	Description string `json:"description"`
	// URL to open the entity
	Target string `json:"target"`
	// Metadata stored by the integration on the entity
	Metadata map[string]UpsertIntegrationEntityMetadataValue `json:"metadata"`
	// Unique ID for the entity in GitBook
	Id string `json:"id"`
	// ID of the integration.
	Integration string `json:"integration"`
}

// NewIntegrationEntity instantiates a new IntegrationEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationEntity(entityId string, title string, description string, target string, metadata map[string]UpsertIntegrationEntityMetadataValue, id string, integration string) *IntegrationEntity {
	this := IntegrationEntity{}
	this.EntityId = entityId
	this.Title = title
	this.Description = description
	this.Target = target
	this.Metadata = metadata
	this.Id = id
	this.Integration = integration
	return &this
}

// NewIntegrationEntityWithDefaults instantiates a new IntegrationEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationEntityWithDefaults() *IntegrationEntity {
	this := IntegrationEntity{}
	return &this
}

// GetEntityId returns the EntityId field value
func (o *IntegrationEntity) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *IntegrationEntity) SetEntityId(v string) {
	o.EntityId = v
}

// GetTitle returns the Title field value
func (o *IntegrationEntity) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *IntegrationEntity) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *IntegrationEntity) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IntegrationEntity) SetDescription(v string) {
	o.Description = v
}

// GetTarget returns the Target field value
func (o *IntegrationEntity) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *IntegrationEntity) SetTarget(v string) {
	o.Target = v
}

// GetMetadata returns the Metadata field value
func (o *IntegrationEntity) GetMetadata() map[string]UpsertIntegrationEntityMetadataValue {
	if o == nil {
		var ret map[string]UpsertIntegrationEntityMetadataValue
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetMetadataOk() (*map[string]UpsertIntegrationEntityMetadataValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *IntegrationEntity) SetMetadata(v map[string]UpsertIntegrationEntityMetadataValue) {
	o.Metadata = v
}

// GetId returns the Id field value
func (o *IntegrationEntity) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IntegrationEntity) SetId(v string) {
	o.Id = v
}

// GetIntegration returns the Integration field value
func (o *IntegrationEntity) GetIntegration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetIntegrationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Integration, true
}

// SetIntegration sets field value
func (o *IntegrationEntity) SetIntegration(v string) {
	o.Integration = v
}

func (o IntegrationEntity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityId"] = o.EntityId
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["target"] = o.Target
	toSerialize["metadata"] = o.Metadata
	toSerialize["id"] = o.Id
	toSerialize["integration"] = o.Integration
	return toSerialize, nil
}

type NullableIntegrationEntity struct {
	value *IntegrationEntity
	isSet bool
}

func (v NullableIntegrationEntity) Get() *IntegrationEntity {
	return v.value
}

func (v *NullableIntegrationEntity) Set(val *IntegrationEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationEntity(val *IntegrationEntity) *NullableIntegrationEntity {
	return &NullableIntegrationEntity{value: val, isSet: true}
}

func (v NullableIntegrationEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
