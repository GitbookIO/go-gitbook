/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitImage{}

// ContentKitImage struct for ContentKitImage
type ContentKitImage struct {
	Type        string                `json:"type"`
	Source      ContentKitImageSource `json:"source"`
	AspectRatio float32               `json:"aspectRatio"`
}

// NewContentKitImage instantiates a new ContentKitImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitImage(type_ string, source ContentKitImageSource, aspectRatio float32) *ContentKitImage {
	this := ContentKitImage{}
	this.Type = type_
	this.Source = source
	this.AspectRatio = aspectRatio
	return &this
}

// NewContentKitImageWithDefaults instantiates a new ContentKitImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitImageWithDefaults() *ContentKitImage {
	this := ContentKitImage{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitImage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitImage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitImage) SetType(v string) {
	o.Type = v
}

// GetSource returns the Source field value
func (o *ContentKitImage) GetSource() ContentKitImageSource {
	if o == nil {
		var ret ContentKitImageSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ContentKitImage) GetSourceOk() (*ContentKitImageSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ContentKitImage) SetSource(v ContentKitImageSource) {
	o.Source = v
}

// GetAspectRatio returns the AspectRatio field value
func (o *ContentKitImage) GetAspectRatio() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AspectRatio
}

// GetAspectRatioOk returns a tuple with the AspectRatio field value
// and a boolean to check if the value has been set.
func (o *ContentKitImage) GetAspectRatioOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AspectRatio, true
}

// SetAspectRatio sets field value
func (o *ContentKitImage) SetAspectRatio(v float32) {
	o.AspectRatio = v
}

func (o ContentKitImage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["source"] = o.Source
	toSerialize["aspectRatio"] = o.AspectRatio
	return toSerialize, nil
}

type NullableContentKitImage struct {
	value *ContentKitImage
	isSet bool
}

func (v NullableContentKitImage) Get() *ContentKitImage {
	return v.value
}

func (v *NullableContentKitImage) Set(val *ContentKitImage) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitImage) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitImage(val *ContentKitImage) *NullableContentKitImage {
	return &NullableContentKitImage{value: val, isSet: true}
}

func (v NullableContentKitImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
