/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// OrganizationCommunityType the model 'OrganizationCommunityType'
type OrganizationCommunityType string

// List of OrganizationCommunityType
const (
	ORGANIZATIONCOMMUNITYTYPE_NON_PROFIT  OrganizationCommunityType = "nonProfit"
	ORGANIZATIONCOMMUNITYTYPE_OPEN_SOURCE OrganizationCommunityType = "openSource"
	ORGANIZATIONCOMMUNITYTYPE_EDUCATION   OrganizationCommunityType = "education"
)

// All allowed values of OrganizationCommunityType enum
var AllowedOrganizationCommunityTypeEnumValues = []OrganizationCommunityType{
	"nonProfit",
	"openSource",
	"education",
}

func (v *OrganizationCommunityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationCommunityType(value)
	for _, existing := range AllowedOrganizationCommunityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationCommunityType", value)
}

// NewOrganizationCommunityTypeFromValue returns a pointer to a valid OrganizationCommunityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationCommunityTypeFromValue(v string) (*OrganizationCommunityType, error) {
	ev := OrganizationCommunityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationCommunityType: valid values are %v", v, AllowedOrganizationCommunityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationCommunityType) IsValid() bool {
	for _, existing := range AllowedOrganizationCommunityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationCommunityType value
func (v OrganizationCommunityType) Ptr() *OrganizationCommunityType {
	return &v
}

type NullableOrganizationCommunityType struct {
	value *OrganizationCommunityType
	isSet bool
}

func (v NullableOrganizationCommunityType) Get() *OrganizationCommunityType {
	return v.value
}

func (v *NullableOrganizationCommunityType) Set(val *OrganizationCommunityType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationCommunityType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationCommunityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationCommunityType(val *OrganizationCommunityType) *NullableOrganizationCommunityType {
	return &NullableOrganizationCommunityType{value: val, isSet: true}
}

func (v NullableOrganizationCommunityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationCommunityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
