// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RecordingThreadMessageEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordingThreadMessageEventAllOf{}

// RecordingThreadMessageEventAllOf struct for RecordingThreadMessageEventAllOf
type RecordingThreadMessageEventAllOf struct {
	Type    string `json:"type"`
	IsFirst *bool  `json:"isFirst,omitempty"`
	Text    string `json:"text"`
}

// NewRecordingThreadMessageEventAllOf instantiates a new RecordingThreadMessageEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingThreadMessageEventAllOf(type_ string, text string) *RecordingThreadMessageEventAllOf {
	this := RecordingThreadMessageEventAllOf{}
	this.Type = type_
	this.Text = text
	return &this
}

// NewRecordingThreadMessageEventAllOfWithDefaults instantiates a new RecordingThreadMessageEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingThreadMessageEventAllOfWithDefaults() *RecordingThreadMessageEventAllOf {
	this := RecordingThreadMessageEventAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *RecordingThreadMessageEventAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecordingThreadMessageEventAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecordingThreadMessageEventAllOf) SetType(v string) {
	o.Type = v
}

// GetIsFirst returns the IsFirst field value if set, zero value otherwise.
func (o *RecordingThreadMessageEventAllOf) GetIsFirst() bool {
	if o == nil || IsNil(o.IsFirst) {
		var ret bool
		return ret
	}
	return *o.IsFirst
}

// GetIsFirstOk returns a tuple with the IsFirst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingThreadMessageEventAllOf) GetIsFirstOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFirst) {
		return nil, false
	}
	return o.IsFirst, true
}

// HasIsFirst returns a boolean if a field has been set.
func (o *RecordingThreadMessageEventAllOf) HasIsFirst() bool {
	if o != nil && !IsNil(o.IsFirst) {
		return true
	}

	return false
}

// SetIsFirst gets a reference to the given bool and assigns it to the IsFirst field.
func (o *RecordingThreadMessageEventAllOf) SetIsFirst(v bool) {
	o.IsFirst = &v
}

// GetText returns the Text field value
func (o *RecordingThreadMessageEventAllOf) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *RecordingThreadMessageEventAllOf) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *RecordingThreadMessageEventAllOf) SetText(v string) {
	o.Text = v
}

func (o RecordingThreadMessageEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingThreadMessageEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.IsFirst) {
		toSerialize["isFirst"] = o.IsFirst
	}
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

type NullableRecordingThreadMessageEventAllOf struct {
	value *RecordingThreadMessageEventAllOf
	isSet bool
}

func (v NullableRecordingThreadMessageEventAllOf) Get() *RecordingThreadMessageEventAllOf {
	return v.value
}

func (v *NullableRecordingThreadMessageEventAllOf) Set(val *RecordingThreadMessageEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingThreadMessageEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingThreadMessageEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingThreadMessageEventAllOf(val *RecordingThreadMessageEventAllOf) *NullableRecordingThreadMessageEventAllOf {
	return &NullableRecordingThreadMessageEventAllOf{value: val, isSet: true}
}

func (v NullableRecordingThreadMessageEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingThreadMessageEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
