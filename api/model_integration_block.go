/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationBlock{}

// IntegrationBlock struct for IntegrationBlock
type IntegrationBlock struct {
	// Unique ID in the integration for the block. It also represents the UI component used.
	Id string `json:"id"`
	// Short descriptive title for the block.
	Title string `json:"title"`
	// Long descriptive text for the block.
	Description *string `json:"description,omitempty"`
	// URL of the icon to represent this block.
	Icon *string `json:"icon,omitempty"`
	// URLs patterns to convert as this block.
	UrlUnfurl []string                  `json:"urlUnfurl,omitempty"`
	Markdown  *IntegrationBlockMarkdown `json:"markdown,omitempty"`
}

// NewIntegrationBlock instantiates a new IntegrationBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationBlock(id string, title string) *IntegrationBlock {
	this := IntegrationBlock{}
	this.Id = id
	this.Title = title
	return &this
}

// NewIntegrationBlockWithDefaults instantiates a new IntegrationBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationBlockWithDefaults() *IntegrationBlock {
	this := IntegrationBlock{}
	return &this
}

// GetId returns the Id field value
func (o *IntegrationBlock) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IntegrationBlock) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IntegrationBlock) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *IntegrationBlock) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *IntegrationBlock) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *IntegrationBlock) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IntegrationBlock) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationBlock) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IntegrationBlock) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IntegrationBlock) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *IntegrationBlock) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationBlock) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *IntegrationBlock) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *IntegrationBlock) SetIcon(v string) {
	o.Icon = &v
}

// GetUrlUnfurl returns the UrlUnfurl field value if set, zero value otherwise.
func (o *IntegrationBlock) GetUrlUnfurl() []string {
	if o == nil || IsNil(o.UrlUnfurl) {
		var ret []string
		return ret
	}
	return o.UrlUnfurl
}

// GetUrlUnfurlOk returns a tuple with the UrlUnfurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationBlock) GetUrlUnfurlOk() ([]string, bool) {
	if o == nil || IsNil(o.UrlUnfurl) {
		return nil, false
	}
	return o.UrlUnfurl, true
}

// HasUrlUnfurl returns a boolean if a field has been set.
func (o *IntegrationBlock) HasUrlUnfurl() bool {
	if o != nil && !IsNil(o.UrlUnfurl) {
		return true
	}

	return false
}

// SetUrlUnfurl gets a reference to the given []string and assigns it to the UrlUnfurl field.
func (o *IntegrationBlock) SetUrlUnfurl(v []string) {
	o.UrlUnfurl = v
}

// GetMarkdown returns the Markdown field value if set, zero value otherwise.
func (o *IntegrationBlock) GetMarkdown() IntegrationBlockMarkdown {
	if o == nil || IsNil(o.Markdown) {
		var ret IntegrationBlockMarkdown
		return ret
	}
	return *o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationBlock) GetMarkdownOk() (*IntegrationBlockMarkdown, bool) {
	if o == nil || IsNil(o.Markdown) {
		return nil, false
	}
	return o.Markdown, true
}

// HasMarkdown returns a boolean if a field has been set.
func (o *IntegrationBlock) HasMarkdown() bool {
	if o != nil && !IsNil(o.Markdown) {
		return true
	}

	return false
}

// SetMarkdown gets a reference to the given IntegrationBlockMarkdown and assigns it to the Markdown field.
func (o *IntegrationBlock) SetMarkdown(v IntegrationBlockMarkdown) {
	o.Markdown = &v
}

func (o IntegrationBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.UrlUnfurl) {
		toSerialize["urlUnfurl"] = o.UrlUnfurl
	}
	if !IsNil(o.Markdown) {
		toSerialize["markdown"] = o.Markdown
	}
	return toSerialize, nil
}

type NullableIntegrationBlock struct {
	value *IntegrationBlock
	isSet bool
}

func (v NullableIntegrationBlock) Get() *IntegrationBlock {
	return v.value
}

func (v *NullableIntegrationBlock) Set(val *IntegrationBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationBlock(val *IntegrationBlock) *NullableIntegrationBlock {
	return &NullableIntegrationBlock{value: val, isSet: true}
}

func (v NullableIntegrationBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
