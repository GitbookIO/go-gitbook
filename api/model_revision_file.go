/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RevisionFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevisionFile{}

// RevisionFile struct for RevisionFile
type RevisionFile struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	ContentType string `json:"contentType"`
	DownloadURL string `json:"downloadURL"`
}

// NewRevisionFile instantiates a new RevisionFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionFile(id string, name string, contentType string, downloadURL string) *RevisionFile {
	this := RevisionFile{}
	this.Id = id
	this.Name = name
	this.ContentType = contentType
	this.DownloadURL = downloadURL
	return &this
}

// NewRevisionFileWithDefaults instantiates a new RevisionFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionFileWithDefaults() *RevisionFile {
	this := RevisionFile{}
	return &this
}

// GetId returns the Id field value
func (o *RevisionFile) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RevisionFile) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RevisionFile) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RevisionFile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RevisionFile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RevisionFile) SetName(v string) {
	o.Name = v
}

// GetContentType returns the ContentType field value
func (o *RevisionFile) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *RevisionFile) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *RevisionFile) SetContentType(v string) {
	o.ContentType = v
}

// GetDownloadURL returns the DownloadURL field value
func (o *RevisionFile) GetDownloadURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DownloadURL
}

// GetDownloadURLOk returns a tuple with the DownloadURL field value
// and a boolean to check if the value has been set.
func (o *RevisionFile) GetDownloadURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DownloadURL, true
}

// SetDownloadURL sets field value
func (o *RevisionFile) SetDownloadURL(v string) {
	o.DownloadURL = v
}

func (o RevisionFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevisionFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["contentType"] = o.ContentType
	toSerialize["downloadURL"] = o.DownloadURL
	return toSerialize, nil
}

type NullableRevisionFile struct {
	value *RevisionFile
	isSet bool
}

func (v NullableRevisionFile) Get() *RevisionFile {
	return v.value
}

func (v *NullableRevisionFile) Set(val *RevisionFile) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionFile) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionFile(val *RevisionFile) *NullableRevisionFile {
	return &NullableRevisionFile{value: val, isSet: true}
}

func (v NullableRevisionFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
