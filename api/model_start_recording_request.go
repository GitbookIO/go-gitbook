// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the StartRecordingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartRecordingRequest{}

// StartRecordingRequest struct for StartRecordingRequest
type StartRecordingRequest struct {
	// Optional title describing the recording
	Title   *string          `json:"title,omitempty"`
	Context RecordingContext `json:"context"`
	// ID in the original source of the recording.
	ExternalId *string `json:"externalId,omitempty"`
	// URL of the original source of the recording.
	ExternalURL *string `json:"externalURL,omitempty"`
}

// NewStartRecordingRequest instantiates a new StartRecordingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartRecordingRequest(context RecordingContext) *StartRecordingRequest {
	this := StartRecordingRequest{}
	this.Context = context
	return &this
}

// NewStartRecordingRequestWithDefaults instantiates a new StartRecordingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartRecordingRequestWithDefaults() *StartRecordingRequest {
	this := StartRecordingRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *StartRecordingRequest) SetTitle(v string) {
	o.Title = &v
}

// GetContext returns the Context field value
func (o *StartRecordingRequest) GetContext() RecordingContext {
	if o == nil {
		var ret RecordingContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetContextOk() (*RecordingContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *StartRecordingRequest) SetContext(v RecordingContext) {
	o.Context = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *StartRecordingRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetExternalURL returns the ExternalURL field value if set, zero value otherwise.
func (o *StartRecordingRequest) GetExternalURL() string {
	if o == nil || IsNil(o.ExternalURL) {
		var ret string
		return ret
	}
	return *o.ExternalURL
}

// GetExternalURLOk returns a tuple with the ExternalURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartRecordingRequest) GetExternalURLOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalURL) {
		return nil, false
	}
	return o.ExternalURL, true
}

// HasExternalURL returns a boolean if a field has been set.
func (o *StartRecordingRequest) HasExternalURL() bool {
	if o != nil && !IsNil(o.ExternalURL) {
		return true
	}

	return false
}

// SetExternalURL gets a reference to the given string and assigns it to the ExternalURL field.
func (o *StartRecordingRequest) SetExternalURL(v string) {
	o.ExternalURL = &v
}

func (o StartRecordingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartRecordingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["context"] = o.Context
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.ExternalURL) {
		toSerialize["externalURL"] = o.ExternalURL
	}
	return toSerialize, nil
}

type NullableStartRecordingRequest struct {
	value *StartRecordingRequest
	isSet bool
}

func (v NullableStartRecordingRequest) Get() *StartRecordingRequest {
	return v.value
}

func (v *NullableStartRecordingRequest) Set(val *StartRecordingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartRecordingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartRecordingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartRecordingRequest(val *StartRecordingRequest) *NullableStartRecordingRequest {
	return &NullableStartRecordingRequest{value: val, isSet: true}
}

func (v NullableStartRecordingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartRecordingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
