/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the UpsertSchemaEntitiesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertSchemaEntitiesRequest{}

// UpsertSchemaEntitiesRequest struct for UpsertSchemaEntitiesRequest
type UpsertSchemaEntitiesRequest struct {
	Delete *UpsertSchemaEntitiesRequestDelete `json:"delete,omitempty"`
	// Array of entities to create/update.
	Entities []UpsertEntity `json:"entities"`
}

// NewUpsertSchemaEntitiesRequest instantiates a new UpsertSchemaEntitiesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertSchemaEntitiesRequest(entities []UpsertEntity) *UpsertSchemaEntitiesRequest {
	this := UpsertSchemaEntitiesRequest{}
	this.Entities = entities
	return &this
}

// NewUpsertSchemaEntitiesRequestWithDefaults instantiates a new UpsertSchemaEntitiesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertSchemaEntitiesRequestWithDefaults() *UpsertSchemaEntitiesRequest {
	this := UpsertSchemaEntitiesRequest{}
	return &this
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *UpsertSchemaEntitiesRequest) GetDelete() UpsertSchemaEntitiesRequestDelete {
	if o == nil || IsNil(o.Delete) {
		var ret UpsertSchemaEntitiesRequestDelete
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertSchemaEntitiesRequest) GetDeleteOk() (*UpsertSchemaEntitiesRequestDelete, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *UpsertSchemaEntitiesRequest) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given UpsertSchemaEntitiesRequestDelete and assigns it to the Delete field.
func (o *UpsertSchemaEntitiesRequest) SetDelete(v UpsertSchemaEntitiesRequestDelete) {
	o.Delete = &v
}

// GetEntities returns the Entities field value
func (o *UpsertSchemaEntitiesRequest) GetEntities() []UpsertEntity {
	if o == nil {
		var ret []UpsertEntity
		return ret
	}

	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value
// and a boolean to check if the value has been set.
func (o *UpsertSchemaEntitiesRequest) GetEntitiesOk() ([]UpsertEntity, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entities, true
}

// SetEntities sets field value
func (o *UpsertSchemaEntitiesRequest) SetEntities(v []UpsertEntity) {
	o.Entities = v
}

func (o UpsertSchemaEntitiesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertSchemaEntitiesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	toSerialize["entities"] = o.Entities
	return toSerialize, nil
}

type NullableUpsertSchemaEntitiesRequest struct {
	value *UpsertSchemaEntitiesRequest
	isSet bool
}

func (v NullableUpsertSchemaEntitiesRequest) Get() *UpsertSchemaEntitiesRequest {
	return v.value
}

func (v *NullableUpsertSchemaEntitiesRequest) Set(val *UpsertSchemaEntitiesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertSchemaEntitiesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertSchemaEntitiesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertSchemaEntitiesRequest(val *UpsertSchemaEntitiesRequest) *NullableUpsertSchemaEntitiesRequest {
	return &NullableUpsertSchemaEntitiesRequest{value: val, isSet: true}
}

func (v NullableUpsertSchemaEntitiesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertSchemaEntitiesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
