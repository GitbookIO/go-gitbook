/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitContextDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitContextDocument{}

// ContentKitContextDocument struct for ContentKitContextDocument
type ContentKitContextDocument struct {
	Theme string `json:"theme"`
	Type  string `json:"type"`
	// ID of the space content the document is in.
	SpaceId  string `json:"spaceId"`
	Editable bool   `json:"editable"`
}

// NewContentKitContextDocument instantiates a new ContentKitContextDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitContextDocument(theme string, type_ string, spaceId string, editable bool) *ContentKitContextDocument {
	this := ContentKitContextDocument{}
	this.Theme = theme
	this.Type = type_
	this.SpaceId = spaceId
	this.Editable = editable
	return &this
}

// NewContentKitContextDocumentWithDefaults instantiates a new ContentKitContextDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitContextDocumentWithDefaults() *ContentKitContextDocument {
	this := ContentKitContextDocument{}
	return &this
}

// GetTheme returns the Theme field value
func (o *ContentKitContextDocument) GetTheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Theme
}

// GetThemeOk returns a tuple with the Theme field value
// and a boolean to check if the value has been set.
func (o *ContentKitContextDocument) GetThemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Theme, true
}

// SetTheme sets field value
func (o *ContentKitContextDocument) SetTheme(v string) {
	o.Theme = v
}

// GetType returns the Type field value
func (o *ContentKitContextDocument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitContextDocument) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitContextDocument) SetType(v string) {
	o.Type = v
}

// GetSpaceId returns the SpaceId field value
func (o *ContentKitContextDocument) GetSpaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value
// and a boolean to check if the value has been set.
func (o *ContentKitContextDocument) GetSpaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceId, true
}

// SetSpaceId sets field value
func (o *ContentKitContextDocument) SetSpaceId(v string) {
	o.SpaceId = v
}

// GetEditable returns the Editable field value
func (o *ContentKitContextDocument) GetEditable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Editable
}

// GetEditableOk returns a tuple with the Editable field value
// and a boolean to check if the value has been set.
func (o *ContentKitContextDocument) GetEditableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Editable, true
}

// SetEditable sets field value
func (o *ContentKitContextDocument) SetEditable(v bool) {
	o.Editable = v
}

func (o ContentKitContextDocument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitContextDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["theme"] = o.Theme
	toSerialize["type"] = o.Type
	toSerialize["spaceId"] = o.SpaceId
	toSerialize["editable"] = o.Editable
	return toSerialize, nil
}

type NullableContentKitContextDocument struct {
	value *ContentKitContextDocument
	isSet bool
}

func (v NullableContentKitContextDocument) Get() *ContentKitContextDocument {
	return v.value
}

func (v *NullableContentKitContextDocument) Set(val *ContentKitContextDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitContextDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitContextDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitContextDocument(val *ContentKitContextDocument) *NullableContentKitContextDocument {
	return &NullableContentKitContextDocument{value: val, isSet: true}
}

func (v NullableContentKitContextDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitContextDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
