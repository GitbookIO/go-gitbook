/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// ContentKitInputHint - struct for ContentKitInputHint
type ContentKitInputHint struct {
	ContentKitInlineElement *ContentKitInlineElement
	String                  *string
}

// ContentKitInlineElementAsContentKitInputHint is a convenience function that returns ContentKitInlineElement wrapped in ContentKitInputHint
func ContentKitInlineElementAsContentKitInputHint(v *ContentKitInlineElement) ContentKitInputHint {
	return ContentKitInputHint{
		ContentKitInlineElement: v,
	}
}

// stringAsContentKitInputHint is a convenience function that returns string wrapped in ContentKitInputHint
func StringAsContentKitInputHint(v *string) ContentKitInputHint {
	return ContentKitInputHint{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentKitInputHint) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContentKitInlineElement
	err = newStrictDecoder(data).Decode(&dst.ContentKitInlineElement)
	if err == nil {
		jsonContentKitInlineElement, _ := json.Marshal(dst.ContentKitInlineElement)
		if string(jsonContentKitInlineElement) == "{}" { // empty struct
			dst.ContentKitInlineElement = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitInlineElement = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContentKitInlineElement = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentKitInputHint)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentKitInputHint)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentKitInputHint) MarshalJSON() ([]byte, error) {
	if src.ContentKitInlineElement != nil {
		return json.Marshal(&src.ContentKitInlineElement)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentKitInputHint) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ContentKitInlineElement != nil {
		return obj.ContentKitInlineElement
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableContentKitInputHint struct {
	value *ContentKitInputHint
	isSet bool
}

func (v NullableContentKitInputHint) Get() *ContentKitInputHint {
	return v.value
}

func (v *NullableContentKitInputHint) Set(val *ContentKitInputHint) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitInputHint) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitInputHint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitInputHint(val *ContentKitInputHint) *NullableContentKitInputHint {
	return &NullableContentKitInputHint{value: val, isSet: true}
}

func (v NullableContentKitInputHint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitInputHint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
