// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// OrganizationDirectorySyncGroupTeamStatus struct for OrganizationDirectorySyncGroupTeamStatus
type OrganizationDirectorySyncGroupTeamStatus struct {
	OrganizationDirectorySyncGroupTeamStatusAnyOf  *OrganizationDirectorySyncGroupTeamStatusAnyOf
	OrganizationDirectorySyncGroupTeamStatusAnyOf1 *OrganizationDirectorySyncGroupTeamStatusAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *OrganizationDirectorySyncGroupTeamStatus) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into OrganizationDirectorySyncGroupTeamStatusAnyOf
	err = json.Unmarshal(data, &dst.OrganizationDirectorySyncGroupTeamStatusAnyOf)
	if err == nil {
		jsonOrganizationDirectorySyncGroupTeamStatusAnyOf, _ := json.Marshal(dst.OrganizationDirectorySyncGroupTeamStatusAnyOf)
		if string(jsonOrganizationDirectorySyncGroupTeamStatusAnyOf) == "{}" { // empty struct
			dst.OrganizationDirectorySyncGroupTeamStatusAnyOf = nil
		} else {
			return nil // data stored in dst.OrganizationDirectorySyncGroupTeamStatusAnyOf, return on the first match
		}
	} else {
		dst.OrganizationDirectorySyncGroupTeamStatusAnyOf = nil
	}

	// try to unmarshal JSON data into OrganizationDirectorySyncGroupTeamStatusAnyOf1
	err = json.Unmarshal(data, &dst.OrganizationDirectorySyncGroupTeamStatusAnyOf1)
	if err == nil {
		jsonOrganizationDirectorySyncGroupTeamStatusAnyOf1, _ := json.Marshal(dst.OrganizationDirectorySyncGroupTeamStatusAnyOf1)
		if string(jsonOrganizationDirectorySyncGroupTeamStatusAnyOf1) == "{}" { // empty struct
			dst.OrganizationDirectorySyncGroupTeamStatusAnyOf1 = nil
		} else {
			return nil // data stored in dst.OrganizationDirectorySyncGroupTeamStatusAnyOf1, return on the first match
		}
	} else {
		dst.OrganizationDirectorySyncGroupTeamStatusAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(OrganizationDirectorySyncGroupTeamStatus)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *OrganizationDirectorySyncGroupTeamStatus) MarshalJSON() ([]byte, error) {
	if src.OrganizationDirectorySyncGroupTeamStatusAnyOf != nil {
		return json.Marshal(&src.OrganizationDirectorySyncGroupTeamStatusAnyOf)
	}

	if src.OrganizationDirectorySyncGroupTeamStatusAnyOf1 != nil {
		return json.Marshal(&src.OrganizationDirectorySyncGroupTeamStatusAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableOrganizationDirectorySyncGroupTeamStatus struct {
	value *OrganizationDirectorySyncGroupTeamStatus
	isSet bool
}

func (v NullableOrganizationDirectorySyncGroupTeamStatus) Get() *OrganizationDirectorySyncGroupTeamStatus {
	return v.value
}

func (v *NullableOrganizationDirectorySyncGroupTeamStatus) Set(val *OrganizationDirectorySyncGroupTeamStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationDirectorySyncGroupTeamStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationDirectorySyncGroupTeamStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationDirectorySyncGroupTeamStatus(val *OrganizationDirectorySyncGroupTeamStatus) *NullableOrganizationDirectorySyncGroupTeamStatus {
	return &NullableOrganizationDirectorySyncGroupTeamStatus{value: val, isSet: true}
}

func (v NullableOrganizationDirectorySyncGroupTeamStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationDirectorySyncGroupTeamStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
