/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// IntegrationInstallationSpaceSelection Describe whether all spaces have been selected or there's a selection involved
type IntegrationInstallationSpaceSelection string

// List of IntegrationInstallationSpaceSelection
const (
	INTEGRATIONINSTALLATIONSPACESELECTION_ALL      IntegrationInstallationSpaceSelection = "all"
	INTEGRATIONINSTALLATIONSPACESELECTION_SELECTED IntegrationInstallationSpaceSelection = "selected"
)

// All allowed values of IntegrationInstallationSpaceSelection enum
var AllowedIntegrationInstallationSpaceSelectionEnumValues = []IntegrationInstallationSpaceSelection{
	"all",
	"selected",
}

func (v *IntegrationInstallationSpaceSelection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationInstallationSpaceSelection(value)
	for _, existing := range AllowedIntegrationInstallationSpaceSelectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationInstallationSpaceSelection", value)
}

// NewIntegrationInstallationSpaceSelectionFromValue returns a pointer to a valid IntegrationInstallationSpaceSelection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationInstallationSpaceSelectionFromValue(v string) (*IntegrationInstallationSpaceSelection, error) {
	ev := IntegrationInstallationSpaceSelection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationInstallationSpaceSelection: valid values are %v", v, AllowedIntegrationInstallationSpaceSelectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationInstallationSpaceSelection) IsValid() bool {
	for _, existing := range AllowedIntegrationInstallationSpaceSelectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationInstallationSpaceSelection value
func (v IntegrationInstallationSpaceSelection) Ptr() *IntegrationInstallationSpaceSelection {
	return &v
}

type NullableIntegrationInstallationSpaceSelection struct {
	value *IntegrationInstallationSpaceSelection
	isSet bool
}

func (v NullableIntegrationInstallationSpaceSelection) Get() *IntegrationInstallationSpaceSelection {
	return v.value
}

func (v *NullableIntegrationInstallationSpaceSelection) Set(val *IntegrationInstallationSpaceSelection) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationInstallationSpaceSelection) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationInstallationSpaceSelection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationInstallationSpaceSelection(val *IntegrationInstallationSpaceSelection) *NullableIntegrationInstallationSpaceSelection {
	return &NullableIntegrationInstallationSpaceSelection{value: val, isSet: true}
}

func (v NullableIntegrationInstallationSpaceSelection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationInstallationSpaceSelection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
