/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the SpaceEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceEventAllOf{}

// SpaceEventAllOf Common properties for all events related to a specific space.
type SpaceEventAllOf struct {
	// ID of the space
	SpaceId string `json:"spaceId"`
}

// NewSpaceEventAllOf instantiates a new SpaceEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceEventAllOf(spaceId string) *SpaceEventAllOf {
	this := SpaceEventAllOf{}
	this.SpaceId = spaceId
	return &this
}

// NewSpaceEventAllOfWithDefaults instantiates a new SpaceEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceEventAllOfWithDefaults() *SpaceEventAllOf {
	this := SpaceEventAllOf{}
	return &this
}

// GetSpaceId returns the SpaceId field value
func (o *SpaceEventAllOf) GetSpaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value
// and a boolean to check if the value has been set.
func (o *SpaceEventAllOf) GetSpaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceId, true
}

// SetSpaceId sets field value
func (o *SpaceEventAllOf) SetSpaceId(v string) {
	o.SpaceId = v
}

func (o SpaceEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["spaceId"] = o.SpaceId
	return toSerialize, nil
}

type NullableSpaceEventAllOf struct {
	value *SpaceEventAllOf
	isSet bool
}

func (v NullableSpaceEventAllOf) Get() *SpaceEventAllOf {
	return v.value
}

func (v *NullableSpaceEventAllOf) Set(val *SpaceEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceEventAllOf(val *SpaceEventAllOf) *NullableSpaceEventAllOf {
	return &NullableSpaceEventAllOf{value: val, isSet: true}
}

func (v NullableSpaceEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
