// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// ContentKitDescendantElement - Any element that can be used as children.
type ContentKitDescendantElement struct {
	ContentKitBox       *ContentKitBox
	ContentKitButton    *ContentKitButton
	ContentKitCard      *ContentKitCard
	ContentKitCheckbox  *ContentKitCheckbox
	ContentKitCodeBlock *ContentKitCodeBlock
	ContentKitDivider   *ContentKitDivider
	ContentKitHStack    *ContentKitHStack
	ContentKitHint      *ContentKitHint
	ContentKitImage     *ContentKitImage
	ContentKitInput     *ContentKitInput
	ContentKitLink      *ContentKitLink
	ContentKitMarkdown  *ContentKitMarkdown
	ContentKitRadio     *ContentKitRadio
	ContentKitSelect    *ContentKitSelect
	ContentKitSwitch    *ContentKitSwitch
	ContentKitText      *ContentKitText
	ContentKitTextInput *ContentKitTextInput
	ContentKitVStack    *ContentKitVStack
	ContentKitWebFrame  *ContentKitWebFrame
}

// ContentKitBoxAsContentKitDescendantElement is a convenience function that returns ContentKitBox wrapped in ContentKitDescendantElement
func ContentKitBoxAsContentKitDescendantElement(v *ContentKitBox) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitBox: v,
	}
}

// ContentKitButtonAsContentKitDescendantElement is a convenience function that returns ContentKitButton wrapped in ContentKitDescendantElement
func ContentKitButtonAsContentKitDescendantElement(v *ContentKitButton) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitButton: v,
	}
}

// ContentKitCardAsContentKitDescendantElement is a convenience function that returns ContentKitCard wrapped in ContentKitDescendantElement
func ContentKitCardAsContentKitDescendantElement(v *ContentKitCard) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitCard: v,
	}
}

// ContentKitCheckboxAsContentKitDescendantElement is a convenience function that returns ContentKitCheckbox wrapped in ContentKitDescendantElement
func ContentKitCheckboxAsContentKitDescendantElement(v *ContentKitCheckbox) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitCheckbox: v,
	}
}

// ContentKitCodeBlockAsContentKitDescendantElement is a convenience function that returns ContentKitCodeBlock wrapped in ContentKitDescendantElement
func ContentKitCodeBlockAsContentKitDescendantElement(v *ContentKitCodeBlock) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitCodeBlock: v,
	}
}

// ContentKitDividerAsContentKitDescendantElement is a convenience function that returns ContentKitDivider wrapped in ContentKitDescendantElement
func ContentKitDividerAsContentKitDescendantElement(v *ContentKitDivider) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitDivider: v,
	}
}

// ContentKitHStackAsContentKitDescendantElement is a convenience function that returns ContentKitHStack wrapped in ContentKitDescendantElement
func ContentKitHStackAsContentKitDescendantElement(v *ContentKitHStack) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitHStack: v,
	}
}

// ContentKitHintAsContentKitDescendantElement is a convenience function that returns ContentKitHint wrapped in ContentKitDescendantElement
func ContentKitHintAsContentKitDescendantElement(v *ContentKitHint) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitHint: v,
	}
}

// ContentKitImageAsContentKitDescendantElement is a convenience function that returns ContentKitImage wrapped in ContentKitDescendantElement
func ContentKitImageAsContentKitDescendantElement(v *ContentKitImage) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitImage: v,
	}
}

// ContentKitInputAsContentKitDescendantElement is a convenience function that returns ContentKitInput wrapped in ContentKitDescendantElement
func ContentKitInputAsContentKitDescendantElement(v *ContentKitInput) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitInput: v,
	}
}

// ContentKitLinkAsContentKitDescendantElement is a convenience function that returns ContentKitLink wrapped in ContentKitDescendantElement
func ContentKitLinkAsContentKitDescendantElement(v *ContentKitLink) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitLink: v,
	}
}

// ContentKitMarkdownAsContentKitDescendantElement is a convenience function that returns ContentKitMarkdown wrapped in ContentKitDescendantElement
func ContentKitMarkdownAsContentKitDescendantElement(v *ContentKitMarkdown) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitMarkdown: v,
	}
}

// ContentKitRadioAsContentKitDescendantElement is a convenience function that returns ContentKitRadio wrapped in ContentKitDescendantElement
func ContentKitRadioAsContentKitDescendantElement(v *ContentKitRadio) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitRadio: v,
	}
}

// ContentKitSelectAsContentKitDescendantElement is a convenience function that returns ContentKitSelect wrapped in ContentKitDescendantElement
func ContentKitSelectAsContentKitDescendantElement(v *ContentKitSelect) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitSelect: v,
	}
}

// ContentKitSwitchAsContentKitDescendantElement is a convenience function that returns ContentKitSwitch wrapped in ContentKitDescendantElement
func ContentKitSwitchAsContentKitDescendantElement(v *ContentKitSwitch) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitSwitch: v,
	}
}

// ContentKitTextAsContentKitDescendantElement is a convenience function that returns ContentKitText wrapped in ContentKitDescendantElement
func ContentKitTextAsContentKitDescendantElement(v *ContentKitText) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitText: v,
	}
}

// ContentKitTextInputAsContentKitDescendantElement is a convenience function that returns ContentKitTextInput wrapped in ContentKitDescendantElement
func ContentKitTextInputAsContentKitDescendantElement(v *ContentKitTextInput) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitTextInput: v,
	}
}

// ContentKitVStackAsContentKitDescendantElement is a convenience function that returns ContentKitVStack wrapped in ContentKitDescendantElement
func ContentKitVStackAsContentKitDescendantElement(v *ContentKitVStack) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitVStack: v,
	}
}

// ContentKitWebFrameAsContentKitDescendantElement is a convenience function that returns ContentKitWebFrame wrapped in ContentKitDescendantElement
func ContentKitWebFrameAsContentKitDescendantElement(v *ContentKitWebFrame) ContentKitDescendantElement {
	return ContentKitDescendantElement{
		ContentKitWebFrame: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentKitDescendantElement) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContentKitBox
	err = newStrictDecoder(data).Decode(&dst.ContentKitBox)
	if err == nil {
		jsonContentKitBox, _ := json.Marshal(dst.ContentKitBox)
		if string(jsonContentKitBox) == "{}" { // empty struct
			dst.ContentKitBox = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitBox = nil
	}

	// try to unmarshal data into ContentKitButton
	err = newStrictDecoder(data).Decode(&dst.ContentKitButton)
	if err == nil {
		jsonContentKitButton, _ := json.Marshal(dst.ContentKitButton)
		if string(jsonContentKitButton) == "{}" { // empty struct
			dst.ContentKitButton = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitButton = nil
	}

	// try to unmarshal data into ContentKitCard
	err = newStrictDecoder(data).Decode(&dst.ContentKitCard)
	if err == nil {
		jsonContentKitCard, _ := json.Marshal(dst.ContentKitCard)
		if string(jsonContentKitCard) == "{}" { // empty struct
			dst.ContentKitCard = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitCard = nil
	}

	// try to unmarshal data into ContentKitCheckbox
	err = newStrictDecoder(data).Decode(&dst.ContentKitCheckbox)
	if err == nil {
		jsonContentKitCheckbox, _ := json.Marshal(dst.ContentKitCheckbox)
		if string(jsonContentKitCheckbox) == "{}" { // empty struct
			dst.ContentKitCheckbox = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitCheckbox = nil
	}

	// try to unmarshal data into ContentKitCodeBlock
	err = newStrictDecoder(data).Decode(&dst.ContentKitCodeBlock)
	if err == nil {
		jsonContentKitCodeBlock, _ := json.Marshal(dst.ContentKitCodeBlock)
		if string(jsonContentKitCodeBlock) == "{}" { // empty struct
			dst.ContentKitCodeBlock = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitCodeBlock = nil
	}

	// try to unmarshal data into ContentKitDivider
	err = newStrictDecoder(data).Decode(&dst.ContentKitDivider)
	if err == nil {
		jsonContentKitDivider, _ := json.Marshal(dst.ContentKitDivider)
		if string(jsonContentKitDivider) == "{}" { // empty struct
			dst.ContentKitDivider = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitDivider = nil
	}

	// try to unmarshal data into ContentKitHStack
	err = newStrictDecoder(data).Decode(&dst.ContentKitHStack)
	if err == nil {
		jsonContentKitHStack, _ := json.Marshal(dst.ContentKitHStack)
		if string(jsonContentKitHStack) == "{}" { // empty struct
			dst.ContentKitHStack = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitHStack = nil
	}

	// try to unmarshal data into ContentKitHint
	err = newStrictDecoder(data).Decode(&dst.ContentKitHint)
	if err == nil {
		jsonContentKitHint, _ := json.Marshal(dst.ContentKitHint)
		if string(jsonContentKitHint) == "{}" { // empty struct
			dst.ContentKitHint = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitHint = nil
	}

	// try to unmarshal data into ContentKitImage
	err = newStrictDecoder(data).Decode(&dst.ContentKitImage)
	if err == nil {
		jsonContentKitImage, _ := json.Marshal(dst.ContentKitImage)
		if string(jsonContentKitImage) == "{}" { // empty struct
			dst.ContentKitImage = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitImage = nil
	}

	// try to unmarshal data into ContentKitInput
	err = newStrictDecoder(data).Decode(&dst.ContentKitInput)
	if err == nil {
		jsonContentKitInput, _ := json.Marshal(dst.ContentKitInput)
		if string(jsonContentKitInput) == "{}" { // empty struct
			dst.ContentKitInput = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitInput = nil
	}

	// try to unmarshal data into ContentKitLink
	err = newStrictDecoder(data).Decode(&dst.ContentKitLink)
	if err == nil {
		jsonContentKitLink, _ := json.Marshal(dst.ContentKitLink)
		if string(jsonContentKitLink) == "{}" { // empty struct
			dst.ContentKitLink = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitLink = nil
	}

	// try to unmarshal data into ContentKitMarkdown
	err = newStrictDecoder(data).Decode(&dst.ContentKitMarkdown)
	if err == nil {
		jsonContentKitMarkdown, _ := json.Marshal(dst.ContentKitMarkdown)
		if string(jsonContentKitMarkdown) == "{}" { // empty struct
			dst.ContentKitMarkdown = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitMarkdown = nil
	}

	// try to unmarshal data into ContentKitRadio
	err = newStrictDecoder(data).Decode(&dst.ContentKitRadio)
	if err == nil {
		jsonContentKitRadio, _ := json.Marshal(dst.ContentKitRadio)
		if string(jsonContentKitRadio) == "{}" { // empty struct
			dst.ContentKitRadio = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitRadio = nil
	}

	// try to unmarshal data into ContentKitSelect
	err = newStrictDecoder(data).Decode(&dst.ContentKitSelect)
	if err == nil {
		jsonContentKitSelect, _ := json.Marshal(dst.ContentKitSelect)
		if string(jsonContentKitSelect) == "{}" { // empty struct
			dst.ContentKitSelect = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitSelect = nil
	}

	// try to unmarshal data into ContentKitSwitch
	err = newStrictDecoder(data).Decode(&dst.ContentKitSwitch)
	if err == nil {
		jsonContentKitSwitch, _ := json.Marshal(dst.ContentKitSwitch)
		if string(jsonContentKitSwitch) == "{}" { // empty struct
			dst.ContentKitSwitch = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitSwitch = nil
	}

	// try to unmarshal data into ContentKitText
	err = newStrictDecoder(data).Decode(&dst.ContentKitText)
	if err == nil {
		jsonContentKitText, _ := json.Marshal(dst.ContentKitText)
		if string(jsonContentKitText) == "{}" { // empty struct
			dst.ContentKitText = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitText = nil
	}

	// try to unmarshal data into ContentKitTextInput
	err = newStrictDecoder(data).Decode(&dst.ContentKitTextInput)
	if err == nil {
		jsonContentKitTextInput, _ := json.Marshal(dst.ContentKitTextInput)
		if string(jsonContentKitTextInput) == "{}" { // empty struct
			dst.ContentKitTextInput = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitTextInput = nil
	}

	// try to unmarshal data into ContentKitVStack
	err = newStrictDecoder(data).Decode(&dst.ContentKitVStack)
	if err == nil {
		jsonContentKitVStack, _ := json.Marshal(dst.ContentKitVStack)
		if string(jsonContentKitVStack) == "{}" { // empty struct
			dst.ContentKitVStack = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitVStack = nil
	}

	// try to unmarshal data into ContentKitWebFrame
	err = newStrictDecoder(data).Decode(&dst.ContentKitWebFrame)
	if err == nil {
		jsonContentKitWebFrame, _ := json.Marshal(dst.ContentKitWebFrame)
		if string(jsonContentKitWebFrame) == "{}" { // empty struct
			dst.ContentKitWebFrame = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitWebFrame = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContentKitBox = nil
		dst.ContentKitButton = nil
		dst.ContentKitCard = nil
		dst.ContentKitCheckbox = nil
		dst.ContentKitCodeBlock = nil
		dst.ContentKitDivider = nil
		dst.ContentKitHStack = nil
		dst.ContentKitHint = nil
		dst.ContentKitImage = nil
		dst.ContentKitInput = nil
		dst.ContentKitLink = nil
		dst.ContentKitMarkdown = nil
		dst.ContentKitRadio = nil
		dst.ContentKitSelect = nil
		dst.ContentKitSwitch = nil
		dst.ContentKitText = nil
		dst.ContentKitTextInput = nil
		dst.ContentKitVStack = nil
		dst.ContentKitWebFrame = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentKitDescendantElement)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentKitDescendantElement)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentKitDescendantElement) MarshalJSON() ([]byte, error) {
	if src.ContentKitBox != nil {
		return json.Marshal(&src.ContentKitBox)
	}

	if src.ContentKitButton != nil {
		return json.Marshal(&src.ContentKitButton)
	}

	if src.ContentKitCard != nil {
		return json.Marshal(&src.ContentKitCard)
	}

	if src.ContentKitCheckbox != nil {
		return json.Marshal(&src.ContentKitCheckbox)
	}

	if src.ContentKitCodeBlock != nil {
		return json.Marshal(&src.ContentKitCodeBlock)
	}

	if src.ContentKitDivider != nil {
		return json.Marshal(&src.ContentKitDivider)
	}

	if src.ContentKitHStack != nil {
		return json.Marshal(&src.ContentKitHStack)
	}

	if src.ContentKitHint != nil {
		return json.Marshal(&src.ContentKitHint)
	}

	if src.ContentKitImage != nil {
		return json.Marshal(&src.ContentKitImage)
	}

	if src.ContentKitInput != nil {
		return json.Marshal(&src.ContentKitInput)
	}

	if src.ContentKitLink != nil {
		return json.Marshal(&src.ContentKitLink)
	}

	if src.ContentKitMarkdown != nil {
		return json.Marshal(&src.ContentKitMarkdown)
	}

	if src.ContentKitRadio != nil {
		return json.Marshal(&src.ContentKitRadio)
	}

	if src.ContentKitSelect != nil {
		return json.Marshal(&src.ContentKitSelect)
	}

	if src.ContentKitSwitch != nil {
		return json.Marshal(&src.ContentKitSwitch)
	}

	if src.ContentKitText != nil {
		return json.Marshal(&src.ContentKitText)
	}

	if src.ContentKitTextInput != nil {
		return json.Marshal(&src.ContentKitTextInput)
	}

	if src.ContentKitVStack != nil {
		return json.Marshal(&src.ContentKitVStack)
	}

	if src.ContentKitWebFrame != nil {
		return json.Marshal(&src.ContentKitWebFrame)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentKitDescendantElement) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ContentKitBox != nil {
		return obj.ContentKitBox
	}

	if obj.ContentKitButton != nil {
		return obj.ContentKitButton
	}

	if obj.ContentKitCard != nil {
		return obj.ContentKitCard
	}

	if obj.ContentKitCheckbox != nil {
		return obj.ContentKitCheckbox
	}

	if obj.ContentKitCodeBlock != nil {
		return obj.ContentKitCodeBlock
	}

	if obj.ContentKitDivider != nil {
		return obj.ContentKitDivider
	}

	if obj.ContentKitHStack != nil {
		return obj.ContentKitHStack
	}

	if obj.ContentKitHint != nil {
		return obj.ContentKitHint
	}

	if obj.ContentKitImage != nil {
		return obj.ContentKitImage
	}

	if obj.ContentKitInput != nil {
		return obj.ContentKitInput
	}

	if obj.ContentKitLink != nil {
		return obj.ContentKitLink
	}

	if obj.ContentKitMarkdown != nil {
		return obj.ContentKitMarkdown
	}

	if obj.ContentKitRadio != nil {
		return obj.ContentKitRadio
	}

	if obj.ContentKitSelect != nil {
		return obj.ContentKitSelect
	}

	if obj.ContentKitSwitch != nil {
		return obj.ContentKitSwitch
	}

	if obj.ContentKitText != nil {
		return obj.ContentKitText
	}

	if obj.ContentKitTextInput != nil {
		return obj.ContentKitTextInput
	}

	if obj.ContentKitVStack != nil {
		return obj.ContentKitVStack
	}

	if obj.ContentKitWebFrame != nil {
		return obj.ContentKitWebFrame
	}

	// all schemas are nil
	return nil
}

type NullableContentKitDescendantElement struct {
	value *ContentKitDescendantElement
	isSet bool
}

func (v NullableContentKitDescendantElement) Get() *ContentKitDescendantElement {
	return v.value
}

func (v *NullableContentKitDescendantElement) Set(val *ContentKitDescendantElement) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitDescendantElement) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitDescendantElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitDescendantElement(val *ContentKitDescendantElement) *NullableContentKitDescendantElement {
	return &NullableContentKitDescendantElement{value: val, isSet: true}
}

func (v NullableContentKitDescendantElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitDescendantElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
