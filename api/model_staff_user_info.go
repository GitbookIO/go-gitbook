// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the StaffUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaffUserInfo{}

// StaffUserInfo The GitBook Staff User info.
type StaffUserInfo struct {
	Id        string `json:"id"`
	SearchKey string `json:"searchKey"`
}

// NewStaffUserInfo instantiates a new StaffUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaffUserInfo(id string, searchKey string) *StaffUserInfo {
	this := StaffUserInfo{}
	this.Id = id
	this.SearchKey = searchKey
	return &this
}

// NewStaffUserInfoWithDefaults instantiates a new StaffUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaffUserInfoWithDefaults() *StaffUserInfo {
	this := StaffUserInfo{}
	return &this
}

// GetId returns the Id field value
func (o *StaffUserInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StaffUserInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StaffUserInfo) SetId(v string) {
	o.Id = v
}

// GetSearchKey returns the SearchKey field value
func (o *StaffUserInfo) GetSearchKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchKey
}

// GetSearchKeyOk returns a tuple with the SearchKey field value
// and a boolean to check if the value has been set.
func (o *StaffUserInfo) GetSearchKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchKey, true
}

// SetSearchKey sets field value
func (o *StaffUserInfo) SetSearchKey(v string) {
	o.SearchKey = v
}

func (o StaffUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaffUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["searchKey"] = o.SearchKey
	return toSerialize, nil
}

type NullableStaffUserInfo struct {
	value *StaffUserInfo
	isSet bool
}

func (v NullableStaffUserInfo) Get() *StaffUserInfo {
	return v.value
}

func (v *NullableStaffUserInfo) Set(val *StaffUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStaffUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStaffUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaffUserInfo(val *StaffUserInfo) *NullableStaffUserInfo {
	return &NullableStaffUserInfo{value: val, isSet: true}
}

func (v NullableStaffUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaffUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
