/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitWebFrame type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitWebFrame{}

// ContentKitWebFrame Frame for a webpage
type ContentKitWebFrame struct {
	Type string `json:"type"`
	// Ratio between width and height. Used to size the webframe.
	AspectRatio *float32                 `json:"aspectRatio,omitempty"`
	Source      ContentKitWebFrameSource `json:"source"`
	// Controls button shown as an overlay in a corner of the frame.
	Buttons []ContentKitButton `json:"buttons,omitempty"`
	// Data to communicated to the webframe's content. Each state update will cause the webframe to receive a message.
	Data *map[string]ContentKitWebFrameDataValue `json:"data,omitempty"`
}

// NewContentKitWebFrame instantiates a new ContentKitWebFrame object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitWebFrame(type_ string, source ContentKitWebFrameSource) *ContentKitWebFrame {
	this := ContentKitWebFrame{}
	this.Type = type_
	this.Source = source
	return &this
}

// NewContentKitWebFrameWithDefaults instantiates a new ContentKitWebFrame object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitWebFrameWithDefaults() *ContentKitWebFrame {
	this := ContentKitWebFrame{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitWebFrame) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitWebFrame) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitWebFrame) SetType(v string) {
	o.Type = v
}

// GetAspectRatio returns the AspectRatio field value if set, zero value otherwise.
func (o *ContentKitWebFrame) GetAspectRatio() float32 {
	if o == nil || IsNil(o.AspectRatio) {
		var ret float32
		return ret
	}
	return *o.AspectRatio
}

// GetAspectRatioOk returns a tuple with the AspectRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitWebFrame) GetAspectRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.AspectRatio) {
		return nil, false
	}
	return o.AspectRatio, true
}

// HasAspectRatio returns a boolean if a field has been set.
func (o *ContentKitWebFrame) HasAspectRatio() bool {
	if o != nil && !IsNil(o.AspectRatio) {
		return true
	}

	return false
}

// SetAspectRatio gets a reference to the given float32 and assigns it to the AspectRatio field.
func (o *ContentKitWebFrame) SetAspectRatio(v float32) {
	o.AspectRatio = &v
}

// GetSource returns the Source field value
func (o *ContentKitWebFrame) GetSource() ContentKitWebFrameSource {
	if o == nil {
		var ret ContentKitWebFrameSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ContentKitWebFrame) GetSourceOk() (*ContentKitWebFrameSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ContentKitWebFrame) SetSource(v ContentKitWebFrameSource) {
	o.Source = v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *ContentKitWebFrame) GetButtons() []ContentKitButton {
	if o == nil || IsNil(o.Buttons) {
		var ret []ContentKitButton
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitWebFrame) GetButtonsOk() ([]ContentKitButton, bool) {
	if o == nil || IsNil(o.Buttons) {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *ContentKitWebFrame) HasButtons() bool {
	if o != nil && !IsNil(o.Buttons) {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []ContentKitButton and assigns it to the Buttons field.
func (o *ContentKitWebFrame) SetButtons(v []ContentKitButton) {
	o.Buttons = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ContentKitWebFrame) GetData() map[string]ContentKitWebFrameDataValue {
	if o == nil || IsNil(o.Data) {
		var ret map[string]ContentKitWebFrameDataValue
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitWebFrame) GetDataOk() (*map[string]ContentKitWebFrameDataValue, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ContentKitWebFrame) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]ContentKitWebFrameDataValue and assigns it to the Data field.
func (o *ContentKitWebFrame) SetData(v map[string]ContentKitWebFrameDataValue) {
	o.Data = &v
}

func (o ContentKitWebFrame) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitWebFrame) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.AspectRatio) {
		toSerialize["aspectRatio"] = o.AspectRatio
	}
	toSerialize["source"] = o.Source
	if !IsNil(o.Buttons) {
		toSerialize["buttons"] = o.Buttons
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableContentKitWebFrame struct {
	value *ContentKitWebFrame
	isSet bool
}

func (v NullableContentKitWebFrame) Get() *ContentKitWebFrame {
	return v.value
}

func (v *NullableContentKitWebFrame) Set(val *ContentKitWebFrame) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitWebFrame) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitWebFrame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitWebFrame(val *ContentKitWebFrame) *NullableContentKitWebFrame {
	return &NullableContentKitWebFrame{value: val, isSet: true}
}

func (v NullableContentKitWebFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitWebFrame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
