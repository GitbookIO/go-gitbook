/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitDivider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitDivider{}

// ContentKitDivider Divider between 2 boxes in a stack.
type ContentKitDivider struct {
	Type string  `json:"type"`
	Size *string `json:"size,omitempty"`
}

// NewContentKitDivider instantiates a new ContentKitDivider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitDivider(type_ string) *ContentKitDivider {
	this := ContentKitDivider{}
	this.Type = type_
	return &this
}

// NewContentKitDividerWithDefaults instantiates a new ContentKitDivider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitDividerWithDefaults() *ContentKitDivider {
	this := ContentKitDivider{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitDivider) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitDivider) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitDivider) SetType(v string) {
	o.Type = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ContentKitDivider) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitDivider) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ContentKitDivider) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *ContentKitDivider) SetSize(v string) {
	o.Size = &v
}

func (o ContentKitDivider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitDivider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableContentKitDivider struct {
	value *ContentKitDivider
	isSet bool
}

func (v NullableContentKitDivider) Get() *ContentKitDivider {
	return v.value
}

func (v *NullableContentKitDivider) Set(val *ContentKitDivider) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitDivider) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitDivider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitDivider(val *ContentKitDivider) *NullableContentKitDivider {
	return &NullableContentKitDivider{value: val, isSet: true}
}

func (v NullableContentKitDivider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitDivider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
