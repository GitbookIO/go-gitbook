/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RecordingFileChangedEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordingFileChangedEventAllOf{}

// RecordingFileChangedEventAllOf struct for RecordingFileChangedEventAllOf
type RecordingFileChangedEventAllOf struct {
	Type     string `json:"type"`
	Filename string `json:"filename"`
	FileDiff string `json:"fileDiff"`
}

// NewRecordingFileChangedEventAllOf instantiates a new RecordingFileChangedEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingFileChangedEventAllOf(type_ string, filename string, fileDiff string) *RecordingFileChangedEventAllOf {
	this := RecordingFileChangedEventAllOf{}
	this.Type = type_
	this.Filename = filename
	this.FileDiff = fileDiff
	return &this
}

// NewRecordingFileChangedEventAllOfWithDefaults instantiates a new RecordingFileChangedEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingFileChangedEventAllOfWithDefaults() *RecordingFileChangedEventAllOf {
	this := RecordingFileChangedEventAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *RecordingFileChangedEventAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEventAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecordingFileChangedEventAllOf) SetType(v string) {
	o.Type = v
}

// GetFilename returns the Filename field value
func (o *RecordingFileChangedEventAllOf) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEventAllOf) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *RecordingFileChangedEventAllOf) SetFilename(v string) {
	o.Filename = v
}

// GetFileDiff returns the FileDiff field value
func (o *RecordingFileChangedEventAllOf) GetFileDiff() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileDiff
}

// GetFileDiffOk returns a tuple with the FileDiff field value
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEventAllOf) GetFileDiffOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileDiff, true
}

// SetFileDiff sets field value
func (o *RecordingFileChangedEventAllOf) SetFileDiff(v string) {
	o.FileDiff = v
}

func (o RecordingFileChangedEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingFileChangedEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["filename"] = o.Filename
	toSerialize["fileDiff"] = o.FileDiff
	return toSerialize, nil
}

type NullableRecordingFileChangedEventAllOf struct {
	value *RecordingFileChangedEventAllOf
	isSet bool
}

func (v NullableRecordingFileChangedEventAllOf) Get() *RecordingFileChangedEventAllOf {
	return v.value
}

func (v *NullableRecordingFileChangedEventAllOf) Set(val *RecordingFileChangedEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingFileChangedEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingFileChangedEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingFileChangedEventAllOf(val *RecordingFileChangedEventAllOf) *NullableRecordingFileChangedEventAllOf {
	return &NullableRecordingFileChangedEventAllOf{value: val, isSet: true}
}

func (v NullableRecordingFileChangedEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingFileChangedEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
