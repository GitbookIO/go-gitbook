/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// ContentKitIcon the model 'ContentKitIcon'
type ContentKitIcon string

// List of ContentKitIcon
const (
	CONTENTKITICON_CLOSE         ContentKitIcon = "close"
	CONTENTKITICON_EDIT          ContentKitIcon = "edit"
	CONTENTKITICON_GITHUB        ContentKitIcon = "github"
	CONTENTKITICON_GITLAB        ContentKitIcon = "gitlab"
	CONTENTKITICON_MAXIMIZE      ContentKitIcon = "maximize"
	CONTENTKITICON_EMAIL         ContentKitIcon = "email"
	CONTENTKITICON_SETTINGS      ContentKitIcon = "settings"
	CONTENTKITICON_SEARCH        ContentKitIcon = "search"
	CONTENTKITICON_DELETE        ContentKitIcon = "delete"
	CONTENTKITICON_STAR          ContentKitIcon = "star"
	CONTENTKITICON_WARNING       ContentKitIcon = "warning"
	CONTENTKITICON_LINK          ContentKitIcon = "link"
	CONTENTKITICON_LINK_EXTERNAL ContentKitIcon = "link-external"
	CONTENTKITICON_EYE           ContentKitIcon = "eye"
	CONTENTKITICON_LOCK          ContentKitIcon = "lock"
)

// All allowed values of ContentKitIcon enum
var AllowedContentKitIconEnumValues = []ContentKitIcon{
	"close",
	"edit",
	"github",
	"gitlab",
	"maximize",
	"email",
	"settings",
	"search",
	"delete",
	"star",
	"warning",
	"link",
	"link-external",
	"eye",
	"lock",
}

func (v *ContentKitIcon) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContentKitIcon(value)
	for _, existing := range AllowedContentKitIconEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContentKitIcon", value)
}

// NewContentKitIconFromValue returns a pointer to a valid ContentKitIcon
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContentKitIconFromValue(v string) (*ContentKitIcon, error) {
	ev := ContentKitIcon(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContentKitIcon: valid values are %v", v, AllowedContentKitIconEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContentKitIcon) IsValid() bool {
	for _, existing := range AllowedContentKitIconEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContentKitIcon value
func (v ContentKitIcon) Ptr() *ContentKitIcon {
	return &v
}

type NullableContentKitIcon struct {
	value *ContentKitIcon
	isSet bool
}

func (v NullableContentKitIcon) Get() *ContentKitIcon {
	return v.value
}

func (v *NullableContentKitIcon) Set(val *ContentKitIcon) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitIcon) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitIcon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitIcon(val *ContentKitIcon) *NullableContentKitIcon {
	return &NullableContentKitIcon{value: val, isSet: true}
}

func (v NullableContentKitIcon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitIcon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
