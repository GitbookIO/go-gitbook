/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the FetchEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchEventAllOf{}

// FetchEventAllOf Event representing an incoming HTTP request.
type FetchEventAllOf struct {
	// The space ID, if requests are specific to a single space
	SpaceId *string `json:"spaceId,omitempty"`
	// The installation ID, if requests are specific to a single installation
	InstallationId *string              `json:"installationId,omitempty"`
	Auth           *FetchEventAllOfAuth `json:"auth,omitempty"`
	Type           string               `json:"type"`
	Request        FetchRequest         `json:"request"`
}

// NewFetchEventAllOf instantiates a new FetchEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchEventAllOf(type_ string, request FetchRequest) *FetchEventAllOf {
	this := FetchEventAllOf{}
	this.Type = type_
	this.Request = request
	return &this
}

// NewFetchEventAllOfWithDefaults instantiates a new FetchEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchEventAllOfWithDefaults() *FetchEventAllOf {
	this := FetchEventAllOf{}
	return &this
}

// GetSpaceId returns the SpaceId field value if set, zero value otherwise.
func (o *FetchEventAllOf) GetSpaceId() string {
	if o == nil || IsNil(o.SpaceId) {
		var ret string
		return ret
	}
	return *o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchEventAllOf) GetSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceId) {
		return nil, false
	}
	return o.SpaceId, true
}

// HasSpaceId returns a boolean if a field has been set.
func (o *FetchEventAllOf) HasSpaceId() bool {
	if o != nil && !IsNil(o.SpaceId) {
		return true
	}

	return false
}

// SetSpaceId gets a reference to the given string and assigns it to the SpaceId field.
func (o *FetchEventAllOf) SetSpaceId(v string) {
	o.SpaceId = &v
}

// GetInstallationId returns the InstallationId field value if set, zero value otherwise.
func (o *FetchEventAllOf) GetInstallationId() string {
	if o == nil || IsNil(o.InstallationId) {
		var ret string
		return ret
	}
	return *o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchEventAllOf) GetInstallationIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationId) {
		return nil, false
	}
	return o.InstallationId, true
}

// HasInstallationId returns a boolean if a field has been set.
func (o *FetchEventAllOf) HasInstallationId() bool {
	if o != nil && !IsNil(o.InstallationId) {
		return true
	}

	return false
}

// SetInstallationId gets a reference to the given string and assigns it to the InstallationId field.
func (o *FetchEventAllOf) SetInstallationId(v string) {
	o.InstallationId = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *FetchEventAllOf) GetAuth() FetchEventAllOfAuth {
	if o == nil || IsNil(o.Auth) {
		var ret FetchEventAllOfAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchEventAllOf) GetAuthOk() (*FetchEventAllOfAuth, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *FetchEventAllOf) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given FetchEventAllOfAuth and assigns it to the Auth field.
func (o *FetchEventAllOf) SetAuth(v FetchEventAllOfAuth) {
	o.Auth = &v
}

// GetType returns the Type field value
func (o *FetchEventAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FetchEventAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FetchEventAllOf) SetType(v string) {
	o.Type = v
}

// GetRequest returns the Request field value
func (o *FetchEventAllOf) GetRequest() FetchRequest {
	if o == nil {
		var ret FetchRequest
		return ret
	}

	return o.Request
}

// GetRequestOk returns a tuple with the Request field value
// and a boolean to check if the value has been set.
func (o *FetchEventAllOf) GetRequestOk() (*FetchRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Request, true
}

// SetRequest sets field value
func (o *FetchEventAllOf) SetRequest(v FetchRequest) {
	o.Request = v
}

func (o FetchEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpaceId) {
		toSerialize["spaceId"] = o.SpaceId
	}
	if !IsNil(o.InstallationId) {
		toSerialize["installationId"] = o.InstallationId
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	toSerialize["type"] = o.Type
	toSerialize["request"] = o.Request
	return toSerialize, nil
}

type NullableFetchEventAllOf struct {
	value *FetchEventAllOf
	isSet bool
}

func (v NullableFetchEventAllOf) Get() *FetchEventAllOf {
	return v.value
}

func (v *NullableFetchEventAllOf) Set(val *FetchEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchEventAllOf(val *FetchEventAllOf) *NullableFetchEventAllOf {
	return &NullableFetchEventAllOf{value: val, isSet: true}
}

func (v NullableFetchEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
