// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitBlock{}

// ContentKitBlock Higher level element to represent a custom block.
type ContentKitBlock struct {
	Type     string                         `json:"type"`
	Children []ContentKitDescendantElement  `json:"children"`
	Controls []ContentKitBlockControlsInner `json:"controls,omitempty"`
}

// NewContentKitBlock instantiates a new ContentKitBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitBlock(type_ string, children []ContentKitDescendantElement) *ContentKitBlock {
	this := ContentKitBlock{}
	this.Type = type_
	this.Children = children
	return &this
}

// NewContentKitBlockWithDefaults instantiates a new ContentKitBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitBlockWithDefaults() *ContentKitBlock {
	this := ContentKitBlock{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitBlock) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitBlock) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitBlock) SetType(v string) {
	o.Type = v
}

// GetChildren returns the Children field value
func (o *ContentKitBlock) GetChildren() []ContentKitDescendantElement {
	if o == nil {
		var ret []ContentKitDescendantElement
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *ContentKitBlock) GetChildrenOk() ([]ContentKitDescendantElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *ContentKitBlock) SetChildren(v []ContentKitDescendantElement) {
	o.Children = v
}

// GetControls returns the Controls field value if set, zero value otherwise.
func (o *ContentKitBlock) GetControls() []ContentKitBlockControlsInner {
	if o == nil || IsNil(o.Controls) {
		var ret []ContentKitBlockControlsInner
		return ret
	}
	return o.Controls
}

// GetControlsOk returns a tuple with the Controls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitBlock) GetControlsOk() ([]ContentKitBlockControlsInner, bool) {
	if o == nil || IsNil(o.Controls) {
		return nil, false
	}
	return o.Controls, true
}

// HasControls returns a boolean if a field has been set.
func (o *ContentKitBlock) HasControls() bool {
	if o != nil && !IsNil(o.Controls) {
		return true
	}

	return false
}

// SetControls gets a reference to the given []ContentKitBlockControlsInner and assigns it to the Controls field.
func (o *ContentKitBlock) SetControls(v []ContentKitBlockControlsInner) {
	o.Controls = v
}

func (o ContentKitBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["children"] = o.Children
	if !IsNil(o.Controls) {
		toSerialize["controls"] = o.Controls
	}
	return toSerialize, nil
}

type NullableContentKitBlock struct {
	value *ContentKitBlock
	isSet bool
}

func (v NullableContentKitBlock) Get() *ContentKitBlock {
	return v.value
}

func (v *NullableContentKitBlock) Set(val *ContentKitBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitBlock(val *ContentKitBlock) *NullableContentKitBlock {
	return &NullableContentKitBlock{value: val, isSet: true}
}

func (v NullableContentKitBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
