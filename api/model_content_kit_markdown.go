/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitMarkdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitMarkdown{}

// ContentKitMarkdown Block with rich text formatting of a markdown content.
type ContentKitMarkdown struct {
	Type    string                    `json:"type"`
	Content ContentKitMarkdownContent `json:"content"`
}

// NewContentKitMarkdown instantiates a new ContentKitMarkdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitMarkdown(type_ string, content ContentKitMarkdownContent) *ContentKitMarkdown {
	this := ContentKitMarkdown{}
	this.Type = type_
	this.Content = content
	return &this
}

// NewContentKitMarkdownWithDefaults instantiates a new ContentKitMarkdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitMarkdownWithDefaults() *ContentKitMarkdown {
	this := ContentKitMarkdown{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitMarkdown) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitMarkdown) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitMarkdown) SetType(v string) {
	o.Type = v
}

// GetContent returns the Content field value
func (o *ContentKitMarkdown) GetContent() ContentKitMarkdownContent {
	if o == nil {
		var ret ContentKitMarkdownContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ContentKitMarkdown) GetContentOk() (*ContentKitMarkdownContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ContentKitMarkdown) SetContent(v ContentKitMarkdownContent) {
	o.Content = v
}

func (o ContentKitMarkdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitMarkdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

type NullableContentKitMarkdown struct {
	value *ContentKitMarkdown
	isSet bool
}

func (v NullableContentKitMarkdown) Get() *ContentKitMarkdown {
	return v.value
}

func (v *NullableContentKitMarkdown) Set(val *ContentKitMarkdown) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitMarkdown) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitMarkdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitMarkdown(val *ContentKitMarkdown) *NullableContentKitMarkdown {
	return &NullableContentKitMarkdown{value: val, isSet: true}
}

func (v NullableContentKitMarkdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitMarkdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
