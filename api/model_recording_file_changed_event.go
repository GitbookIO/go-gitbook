// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"time"
)

// checks if the RecordingFileChangedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordingFileChangedEvent{}

// RecordingFileChangedEvent struct for RecordingFileChangedEvent
type RecordingFileChangedEvent struct {
	Type string `json:"type"`
	// When the event happened
	Timestamp time.Time `json:"timestamp"`
	// Optionally, provide the source of the event. GitBook may use this to improve the generated content.
	Source   *string                  `json:"source,omitempty"`
	Actor    *BaseRecordingEventActor `json:"actor,omitempty"`
	Filename string                   `json:"filename"`
	FileDiff string                   `json:"fileDiff"`
}

// NewRecordingFileChangedEvent instantiates a new RecordingFileChangedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordingFileChangedEvent(type_ string, timestamp time.Time, filename string, fileDiff string) *RecordingFileChangedEvent {
	this := RecordingFileChangedEvent{}
	this.Type = type_
	this.Timestamp = timestamp
	this.Filename = filename
	this.FileDiff = fileDiff
	return &this
}

// NewRecordingFileChangedEventWithDefaults instantiates a new RecordingFileChangedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordingFileChangedEventWithDefaults() *RecordingFileChangedEvent {
	this := RecordingFileChangedEvent{}
	return &this
}

// GetType returns the Type field value
func (o *RecordingFileChangedEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecordingFileChangedEvent) SetType(v string) {
	o.Type = v
}

// GetTimestamp returns the Timestamp field value
func (o *RecordingFileChangedEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *RecordingFileChangedEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *RecordingFileChangedEvent) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEvent) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *RecordingFileChangedEvent) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *RecordingFileChangedEvent) SetSource(v string) {
	o.Source = &v
}

// GetActor returns the Actor field value if set, zero value otherwise.
func (o *RecordingFileChangedEvent) GetActor() BaseRecordingEventActor {
	if o == nil || IsNil(o.Actor) {
		var ret BaseRecordingEventActor
		return ret
	}
	return *o.Actor
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEvent) GetActorOk() (*BaseRecordingEventActor, bool) {
	if o == nil || IsNil(o.Actor) {
		return nil, false
	}
	return o.Actor, true
}

// HasActor returns a boolean if a field has been set.
func (o *RecordingFileChangedEvent) HasActor() bool {
	if o != nil && !IsNil(o.Actor) {
		return true
	}

	return false
}

// SetActor gets a reference to the given BaseRecordingEventActor and assigns it to the Actor field.
func (o *RecordingFileChangedEvent) SetActor(v BaseRecordingEventActor) {
	o.Actor = &v
}

// GetFilename returns the Filename field value
func (o *RecordingFileChangedEvent) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEvent) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *RecordingFileChangedEvent) SetFilename(v string) {
	o.Filename = v
}

// GetFileDiff returns the FileDiff field value
func (o *RecordingFileChangedEvent) GetFileDiff() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileDiff
}

// GetFileDiffOk returns a tuple with the FileDiff field value
// and a boolean to check if the value has been set.
func (o *RecordingFileChangedEvent) GetFileDiffOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileDiff, true
}

// SetFileDiff sets field value
func (o *RecordingFileChangedEvent) SetFileDiff(v string) {
	o.FileDiff = v
}

func (o RecordingFileChangedEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordingFileChangedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Actor) {
		toSerialize["actor"] = o.Actor
	}
	toSerialize["filename"] = o.Filename
	toSerialize["fileDiff"] = o.FileDiff
	return toSerialize, nil
}

type NullableRecordingFileChangedEvent struct {
	value *RecordingFileChangedEvent
	isSet bool
}

func (v NullableRecordingFileChangedEvent) Get() *RecordingFileChangedEvent {
	return v.value
}

func (v *NullableRecordingFileChangedEvent) Set(val *RecordingFileChangedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordingFileChangedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordingFileChangedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordingFileChangedEvent(val *RecordingFileChangedEvent) *NullableRecordingFileChangedEvent {
	return &NullableRecordingFileChangedEvent{value: val, isSet: true}
}

func (v NullableRecordingFileChangedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordingFileChangedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
