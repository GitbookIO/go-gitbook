/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitButton type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitButton{}

// ContentKitButton Pressable button triggering an action.
type ContentKitButton struct {
	Type     string             `json:"type"`
	Style    *string            `json:"style,omitempty"`
	OnPress  ContentKitAction   `json:"onPress"`
	Icon     *ContentKitIcon    `json:"icon,omitempty"`
	Label    *string            `json:"label,omitempty"`
	Tooltip  *string            `json:"tooltip,omitempty"`
	Confirm  *ContentKitConfirm `json:"confirm,omitempty"`
	Disabled *bool              `json:"disabled,omitempty"`
}

// NewContentKitButton instantiates a new ContentKitButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitButton(type_ string, onPress ContentKitAction) *ContentKitButton {
	this := ContentKitButton{}
	this.Type = type_
	this.OnPress = onPress
	return &this
}

// NewContentKitButtonWithDefaults instantiates a new ContentKitButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitButtonWithDefaults() *ContentKitButton {
	this := ContentKitButton{}
	return &this
}

// GetType returns the Type field value
func (o *ContentKitButton) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitButton) SetType(v string) {
	o.Type = v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *ContentKitButton) GetStyle() string {
	if o == nil || IsNil(o.Style) {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *ContentKitButton) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *ContentKitButton) SetStyle(v string) {
	o.Style = &v
}

// GetOnPress returns the OnPress field value
func (o *ContentKitButton) GetOnPress() ContentKitAction {
	if o == nil {
		var ret ContentKitAction
		return ret
	}

	return o.OnPress
}

// GetOnPressOk returns a tuple with the OnPress field value
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetOnPressOk() (*ContentKitAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnPress, true
}

// SetOnPress sets field value
func (o *ContentKitButton) SetOnPress(v ContentKitAction) {
	o.OnPress = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ContentKitButton) GetIcon() ContentKitIcon {
	if o == nil || IsNil(o.Icon) {
		var ret ContentKitIcon
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetIconOk() (*ContentKitIcon, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ContentKitButton) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given ContentKitIcon and assigns it to the Icon field.
func (o *ContentKitButton) SetIcon(v ContentKitIcon) {
	o.Icon = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ContentKitButton) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ContentKitButton) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ContentKitButton) SetLabel(v string) {
	o.Label = &v
}

// GetTooltip returns the Tooltip field value if set, zero value otherwise.
func (o *ContentKitButton) GetTooltip() string {
	if o == nil || IsNil(o.Tooltip) {
		var ret string
		return ret
	}
	return *o.Tooltip
}

// GetTooltipOk returns a tuple with the Tooltip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetTooltipOk() (*string, bool) {
	if o == nil || IsNil(o.Tooltip) {
		return nil, false
	}
	return o.Tooltip, true
}

// HasTooltip returns a boolean if a field has been set.
func (o *ContentKitButton) HasTooltip() bool {
	if o != nil && !IsNil(o.Tooltip) {
		return true
	}

	return false
}

// SetTooltip gets a reference to the given string and assigns it to the Tooltip field.
func (o *ContentKitButton) SetTooltip(v string) {
	o.Tooltip = &v
}

// GetConfirm returns the Confirm field value if set, zero value otherwise.
func (o *ContentKitButton) GetConfirm() ContentKitConfirm {
	if o == nil || IsNil(o.Confirm) {
		var ret ContentKitConfirm
		return ret
	}
	return *o.Confirm
}

// GetConfirmOk returns a tuple with the Confirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetConfirmOk() (*ContentKitConfirm, bool) {
	if o == nil || IsNil(o.Confirm) {
		return nil, false
	}
	return o.Confirm, true
}

// HasConfirm returns a boolean if a field has been set.
func (o *ContentKitButton) HasConfirm() bool {
	if o != nil && !IsNil(o.Confirm) {
		return true
	}

	return false
}

// SetConfirm gets a reference to the given ContentKitConfirm and assigns it to the Confirm field.
func (o *ContentKitButton) SetConfirm(v ContentKitConfirm) {
	o.Confirm = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *ContentKitButton) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitButton) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *ContentKitButton) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *ContentKitButton) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o ContentKitButton) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitButton) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	toSerialize["onPress"] = o.OnPress
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Tooltip) {
		toSerialize["tooltip"] = o.Tooltip
	}
	if !IsNil(o.Confirm) {
		toSerialize["confirm"] = o.Confirm
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	return toSerialize, nil
}

type NullableContentKitButton struct {
	value *ContentKitButton
	isSet bool
}

func (v NullableContentKitButton) Get() *ContentKitButton {
	return v.value
}

func (v *NullableContentKitButton) Set(val *ContentKitButton) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitButton) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitButton(val *ContentKitButton) *NullableContentKitButton {
	return &NullableContentKitButton{value: val, isSet: true}
}

func (v NullableContentKitButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
