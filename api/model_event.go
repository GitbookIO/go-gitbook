/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// Event - Any event that can be received from GitBook.
type Event struct {
	FetchEvent                  *FetchEvent
	FetchPublishedScriptEvent   *FetchPublishedScriptEvent
	InstallationSetupEvent      *InstallationSetupEvent
	SpaceContentUpdatedEvent    *SpaceContentUpdatedEvent
	SpaceGitSyncCompletedEvent  *SpaceGitSyncCompletedEvent
	SpaceGitSyncStartedEvent    *SpaceGitSyncStartedEvent
	SpaceInstallationSetupEvent *SpaceInstallationSetupEvent
	SpaceViewEvent              *SpaceViewEvent
	SpaceVisibilityUpdatedEvent *SpaceVisibilityUpdatedEvent
	UIRenderEvent               *UIRenderEvent
}

// FetchEventAsEvent is a convenience function that returns FetchEvent wrapped in Event
func FetchEventAsEvent(v *FetchEvent) Event {
	return Event{
		FetchEvent: v,
	}
}

// FetchPublishedScriptEventAsEvent is a convenience function that returns FetchPublishedScriptEvent wrapped in Event
func FetchPublishedScriptEventAsEvent(v *FetchPublishedScriptEvent) Event {
	return Event{
		FetchPublishedScriptEvent: v,
	}
}

// InstallationSetupEventAsEvent is a convenience function that returns InstallationSetupEvent wrapped in Event
func InstallationSetupEventAsEvent(v *InstallationSetupEvent) Event {
	return Event{
		InstallationSetupEvent: v,
	}
}

// SpaceContentUpdatedEventAsEvent is a convenience function that returns SpaceContentUpdatedEvent wrapped in Event
func SpaceContentUpdatedEventAsEvent(v *SpaceContentUpdatedEvent) Event {
	return Event{
		SpaceContentUpdatedEvent: v,
	}
}

// SpaceGitSyncCompletedEventAsEvent is a convenience function that returns SpaceGitSyncCompletedEvent wrapped in Event
func SpaceGitSyncCompletedEventAsEvent(v *SpaceGitSyncCompletedEvent) Event {
	return Event{
		SpaceGitSyncCompletedEvent: v,
	}
}

// SpaceGitSyncStartedEventAsEvent is a convenience function that returns SpaceGitSyncStartedEvent wrapped in Event
func SpaceGitSyncStartedEventAsEvent(v *SpaceGitSyncStartedEvent) Event {
	return Event{
		SpaceGitSyncStartedEvent: v,
	}
}

// SpaceInstallationSetupEventAsEvent is a convenience function that returns SpaceInstallationSetupEvent wrapped in Event
func SpaceInstallationSetupEventAsEvent(v *SpaceInstallationSetupEvent) Event {
	return Event{
		SpaceInstallationSetupEvent: v,
	}
}

// SpaceViewEventAsEvent is a convenience function that returns SpaceViewEvent wrapped in Event
func SpaceViewEventAsEvent(v *SpaceViewEvent) Event {
	return Event{
		SpaceViewEvent: v,
	}
}

// SpaceVisibilityUpdatedEventAsEvent is a convenience function that returns SpaceVisibilityUpdatedEvent wrapped in Event
func SpaceVisibilityUpdatedEventAsEvent(v *SpaceVisibilityUpdatedEvent) Event {
	return Event{
		SpaceVisibilityUpdatedEvent: v,
	}
}

// UIRenderEventAsEvent is a convenience function that returns UIRenderEvent wrapped in Event
func UIRenderEventAsEvent(v *UIRenderEvent) Event {
	return Event{
		UIRenderEvent: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Event) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FetchEvent
	err = newStrictDecoder(data).Decode(&dst.FetchEvent)
	if err == nil {
		jsonFetchEvent, _ := json.Marshal(dst.FetchEvent)
		if string(jsonFetchEvent) == "{}" { // empty struct
			dst.FetchEvent = nil
		} else {
			match++
		}
	} else {
		dst.FetchEvent = nil
	}

	// try to unmarshal data into FetchPublishedScriptEvent
	err = newStrictDecoder(data).Decode(&dst.FetchPublishedScriptEvent)
	if err == nil {
		jsonFetchPublishedScriptEvent, _ := json.Marshal(dst.FetchPublishedScriptEvent)
		if string(jsonFetchPublishedScriptEvent) == "{}" { // empty struct
			dst.FetchPublishedScriptEvent = nil
		} else {
			match++
		}
	} else {
		dst.FetchPublishedScriptEvent = nil
	}

	// try to unmarshal data into InstallationSetupEvent
	err = newStrictDecoder(data).Decode(&dst.InstallationSetupEvent)
	if err == nil {
		jsonInstallationSetupEvent, _ := json.Marshal(dst.InstallationSetupEvent)
		if string(jsonInstallationSetupEvent) == "{}" { // empty struct
			dst.InstallationSetupEvent = nil
		} else {
			match++
		}
	} else {
		dst.InstallationSetupEvent = nil
	}

	// try to unmarshal data into SpaceContentUpdatedEvent
	err = newStrictDecoder(data).Decode(&dst.SpaceContentUpdatedEvent)
	if err == nil {
		jsonSpaceContentUpdatedEvent, _ := json.Marshal(dst.SpaceContentUpdatedEvent)
		if string(jsonSpaceContentUpdatedEvent) == "{}" { // empty struct
			dst.SpaceContentUpdatedEvent = nil
		} else {
			match++
		}
	} else {
		dst.SpaceContentUpdatedEvent = nil
	}

	// try to unmarshal data into SpaceGitSyncCompletedEvent
	err = newStrictDecoder(data).Decode(&dst.SpaceGitSyncCompletedEvent)
	if err == nil {
		jsonSpaceGitSyncCompletedEvent, _ := json.Marshal(dst.SpaceGitSyncCompletedEvent)
		if string(jsonSpaceGitSyncCompletedEvent) == "{}" { // empty struct
			dst.SpaceGitSyncCompletedEvent = nil
		} else {
			match++
		}
	} else {
		dst.SpaceGitSyncCompletedEvent = nil
	}

	// try to unmarshal data into SpaceGitSyncStartedEvent
	err = newStrictDecoder(data).Decode(&dst.SpaceGitSyncStartedEvent)
	if err == nil {
		jsonSpaceGitSyncStartedEvent, _ := json.Marshal(dst.SpaceGitSyncStartedEvent)
		if string(jsonSpaceGitSyncStartedEvent) == "{}" { // empty struct
			dst.SpaceGitSyncStartedEvent = nil
		} else {
			match++
		}
	} else {
		dst.SpaceGitSyncStartedEvent = nil
	}

	// try to unmarshal data into SpaceInstallationSetupEvent
	err = newStrictDecoder(data).Decode(&dst.SpaceInstallationSetupEvent)
	if err == nil {
		jsonSpaceInstallationSetupEvent, _ := json.Marshal(dst.SpaceInstallationSetupEvent)
		if string(jsonSpaceInstallationSetupEvent) == "{}" { // empty struct
			dst.SpaceInstallationSetupEvent = nil
		} else {
			match++
		}
	} else {
		dst.SpaceInstallationSetupEvent = nil
	}

	// try to unmarshal data into SpaceViewEvent
	err = newStrictDecoder(data).Decode(&dst.SpaceViewEvent)
	if err == nil {
		jsonSpaceViewEvent, _ := json.Marshal(dst.SpaceViewEvent)
		if string(jsonSpaceViewEvent) == "{}" { // empty struct
			dst.SpaceViewEvent = nil
		} else {
			match++
		}
	} else {
		dst.SpaceViewEvent = nil
	}

	// try to unmarshal data into SpaceVisibilityUpdatedEvent
	err = newStrictDecoder(data).Decode(&dst.SpaceVisibilityUpdatedEvent)
	if err == nil {
		jsonSpaceVisibilityUpdatedEvent, _ := json.Marshal(dst.SpaceVisibilityUpdatedEvent)
		if string(jsonSpaceVisibilityUpdatedEvent) == "{}" { // empty struct
			dst.SpaceVisibilityUpdatedEvent = nil
		} else {
			match++
		}
	} else {
		dst.SpaceVisibilityUpdatedEvent = nil
	}

	// try to unmarshal data into UIRenderEvent
	err = newStrictDecoder(data).Decode(&dst.UIRenderEvent)
	if err == nil {
		jsonUIRenderEvent, _ := json.Marshal(dst.UIRenderEvent)
		if string(jsonUIRenderEvent) == "{}" { // empty struct
			dst.UIRenderEvent = nil
		} else {
			match++
		}
	} else {
		dst.UIRenderEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FetchEvent = nil
		dst.FetchPublishedScriptEvent = nil
		dst.InstallationSetupEvent = nil
		dst.SpaceContentUpdatedEvent = nil
		dst.SpaceGitSyncCompletedEvent = nil
		dst.SpaceGitSyncStartedEvent = nil
		dst.SpaceInstallationSetupEvent = nil
		dst.SpaceViewEvent = nil
		dst.SpaceVisibilityUpdatedEvent = nil
		dst.UIRenderEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Event)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Event)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Event) MarshalJSON() ([]byte, error) {
	if src.FetchEvent != nil {
		return json.Marshal(&src.FetchEvent)
	}

	if src.FetchPublishedScriptEvent != nil {
		return json.Marshal(&src.FetchPublishedScriptEvent)
	}

	if src.InstallationSetupEvent != nil {
		return json.Marshal(&src.InstallationSetupEvent)
	}

	if src.SpaceContentUpdatedEvent != nil {
		return json.Marshal(&src.SpaceContentUpdatedEvent)
	}

	if src.SpaceGitSyncCompletedEvent != nil {
		return json.Marshal(&src.SpaceGitSyncCompletedEvent)
	}

	if src.SpaceGitSyncStartedEvent != nil {
		return json.Marshal(&src.SpaceGitSyncStartedEvent)
	}

	if src.SpaceInstallationSetupEvent != nil {
		return json.Marshal(&src.SpaceInstallationSetupEvent)
	}

	if src.SpaceViewEvent != nil {
		return json.Marshal(&src.SpaceViewEvent)
	}

	if src.SpaceVisibilityUpdatedEvent != nil {
		return json.Marshal(&src.SpaceVisibilityUpdatedEvent)
	}

	if src.UIRenderEvent != nil {
		return json.Marshal(&src.UIRenderEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Event) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FetchEvent != nil {
		return obj.FetchEvent
	}

	if obj.FetchPublishedScriptEvent != nil {
		return obj.FetchPublishedScriptEvent
	}

	if obj.InstallationSetupEvent != nil {
		return obj.InstallationSetupEvent
	}

	if obj.SpaceContentUpdatedEvent != nil {
		return obj.SpaceContentUpdatedEvent
	}

	if obj.SpaceGitSyncCompletedEvent != nil {
		return obj.SpaceGitSyncCompletedEvent
	}

	if obj.SpaceGitSyncStartedEvent != nil {
		return obj.SpaceGitSyncStartedEvent
	}

	if obj.SpaceInstallationSetupEvent != nil {
		return obj.SpaceInstallationSetupEvent
	}

	if obj.SpaceViewEvent != nil {
		return obj.SpaceViewEvent
	}

	if obj.SpaceVisibilityUpdatedEvent != nil {
		return obj.SpaceVisibilityUpdatedEvent
	}

	if obj.UIRenderEvent != nil {
		return obj.UIRenderEvent
	}

	// all schemas are nil
	return nil
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
