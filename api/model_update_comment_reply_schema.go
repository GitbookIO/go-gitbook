/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the UpdateCommentReplySchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCommentReplySchema{}

// UpdateCommentReplySchema struct for UpdateCommentReplySchema
type UpdateCommentReplySchema struct {
	Body *Document `json:"body,omitempty"`
	// Reactions to add to the comment.
	AddedReactions []string `json:"addedReactions,omitempty"`
	// Reactions to remove from the comment.
	RemovedReactions []string `json:"removedReactions,omitempty"`
}

// NewUpdateCommentReplySchema instantiates a new UpdateCommentReplySchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCommentReplySchema() *UpdateCommentReplySchema {
	this := UpdateCommentReplySchema{}
	return &this
}

// NewUpdateCommentReplySchemaWithDefaults instantiates a new UpdateCommentReplySchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCommentReplySchemaWithDefaults() *UpdateCommentReplySchema {
	this := UpdateCommentReplySchema{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *UpdateCommentReplySchema) GetBody() Document {
	if o == nil || IsNil(o.Body) {
		var ret Document
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCommentReplySchema) GetBodyOk() (*Document, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *UpdateCommentReplySchema) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given Document and assigns it to the Body field.
func (o *UpdateCommentReplySchema) SetBody(v Document) {
	o.Body = &v
}

// GetAddedReactions returns the AddedReactions field value if set, zero value otherwise.
func (o *UpdateCommentReplySchema) GetAddedReactions() []string {
	if o == nil || IsNil(o.AddedReactions) {
		var ret []string
		return ret
	}
	return o.AddedReactions
}

// GetAddedReactionsOk returns a tuple with the AddedReactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCommentReplySchema) GetAddedReactionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AddedReactions) {
		return nil, false
	}
	return o.AddedReactions, true
}

// HasAddedReactions returns a boolean if a field has been set.
func (o *UpdateCommentReplySchema) HasAddedReactions() bool {
	if o != nil && !IsNil(o.AddedReactions) {
		return true
	}

	return false
}

// SetAddedReactions gets a reference to the given []string and assigns it to the AddedReactions field.
func (o *UpdateCommentReplySchema) SetAddedReactions(v []string) {
	o.AddedReactions = v
}

// GetRemovedReactions returns the RemovedReactions field value if set, zero value otherwise.
func (o *UpdateCommentReplySchema) GetRemovedReactions() []string {
	if o == nil || IsNil(o.RemovedReactions) {
		var ret []string
		return ret
	}
	return o.RemovedReactions
}

// GetRemovedReactionsOk returns a tuple with the RemovedReactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCommentReplySchema) GetRemovedReactionsOk() ([]string, bool) {
	if o == nil || IsNil(o.RemovedReactions) {
		return nil, false
	}
	return o.RemovedReactions, true
}

// HasRemovedReactions returns a boolean if a field has been set.
func (o *UpdateCommentReplySchema) HasRemovedReactions() bool {
	if o != nil && !IsNil(o.RemovedReactions) {
		return true
	}

	return false
}

// SetRemovedReactions gets a reference to the given []string and assigns it to the RemovedReactions field.
func (o *UpdateCommentReplySchema) SetRemovedReactions(v []string) {
	o.RemovedReactions = v
}

func (o UpdateCommentReplySchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCommentReplySchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.AddedReactions) {
		toSerialize["addedReactions"] = o.AddedReactions
	}
	if !IsNil(o.RemovedReactions) {
		toSerialize["removedReactions"] = o.RemovedReactions
	}
	return toSerialize, nil
}

type NullableUpdateCommentReplySchema struct {
	value *UpdateCommentReplySchema
	isSet bool
}

func (v NullableUpdateCommentReplySchema) Get() *UpdateCommentReplySchema {
	return v.value
}

func (v *NullableUpdateCommentReplySchema) Set(val *UpdateCommentReplySchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCommentReplySchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCommentReplySchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCommentReplySchema(val *UpdateCommentReplySchema) *NullableUpdateCommentReplySchema {
	return &NullableUpdateCommentReplySchema{value: val, isSet: true}
}

func (v NullableUpdateCommentReplySchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCommentReplySchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
