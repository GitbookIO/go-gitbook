/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the EmojiReaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmojiReaction{}

// EmojiReaction An emoji reaction by one or many users
type EmojiReaction struct {
	// The Emoji of the reaction
	Emoji string `json:"emoji"`
	// The number of users who reacted with this emoji
	Count float32 `json:"count"`
	// The users who reacted with this emoji
	Users []EmojiReactionUsersInner `json:"users"`
}

// NewEmojiReaction instantiates a new EmojiReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiReaction(emoji string, count float32, users []EmojiReactionUsersInner) *EmojiReaction {
	this := EmojiReaction{}
	this.Emoji = emoji
	this.Count = count
	this.Users = users
	return &this
}

// NewEmojiReactionWithDefaults instantiates a new EmojiReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiReactionWithDefaults() *EmojiReaction {
	this := EmojiReaction{}
	return &this
}

// GetEmoji returns the Emoji field value
func (o *EmojiReaction) GetEmoji() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value
// and a boolean to check if the value has been set.
func (o *EmojiReaction) GetEmojiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Emoji, true
}

// SetEmoji sets field value
func (o *EmojiReaction) SetEmoji(v string) {
	o.Emoji = v
}

// GetCount returns the Count field value
func (o *EmojiReaction) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *EmojiReaction) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *EmojiReaction) SetCount(v float32) {
	o.Count = v
}

// GetUsers returns the Users field value
func (o *EmojiReaction) GetUsers() []EmojiReactionUsersInner {
	if o == nil {
		var ret []EmojiReactionUsersInner
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *EmojiReaction) GetUsersOk() ([]EmojiReactionUsersInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *EmojiReaction) SetUsers(v []EmojiReactionUsersInner) {
	o.Users = v
}

func (o EmojiReaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmojiReaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emoji"] = o.Emoji
	toSerialize["count"] = o.Count
	toSerialize["users"] = o.Users
	return toSerialize, nil
}

type NullableEmojiReaction struct {
	value *EmojiReaction
	isSet bool
}

func (v NullableEmojiReaction) Get() *EmojiReaction {
	return v.value
}

func (v *NullableEmojiReaction) Set(val *EmojiReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiReaction(val *EmojiReaction) *NullableEmojiReaction {
	return &NullableEmojiReaction{value: val, isSet: true}
}

func (v NullableEmojiReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
