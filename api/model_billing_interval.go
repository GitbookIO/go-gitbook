/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// BillingInterval Interval for a billing subscription
type BillingInterval string

// List of BillingInterval
const (
	BILLINGINTERVAL_MONTHLY BillingInterval = "monthly"
	BILLINGINTERVAL_YEARLY  BillingInterval = "yearly"
)

// All allowed values of BillingInterval enum
var AllowedBillingIntervalEnumValues = []BillingInterval{
	"monthly",
	"yearly",
}

func (v *BillingInterval) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingInterval(value)
	for _, existing := range AllowedBillingIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingInterval", value)
}

// NewBillingIntervalFromValue returns a pointer to a valid BillingInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingIntervalFromValue(v string) (*BillingInterval, error) {
	ev := BillingInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingInterval: valid values are %v", v, AllowedBillingIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingInterval) IsValid() bool {
	for _, existing := range AllowedBillingIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingInterval value
func (v BillingInterval) Ptr() *BillingInterval {
	return &v
}

type NullableBillingInterval struct {
	value *BillingInterval
	isSet bool
}

func (v NullableBillingInterval) Get() *BillingInterval {
	return v.value
}

func (v *NullableBillingInterval) Set(val *BillingInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingInterval(val *BillingInterval) *NullableBillingInterval {
	return &NullableBillingInterval{value: val, isSet: true}
}

func (v NullableBillingInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
