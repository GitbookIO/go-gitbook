/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// ContentKitBlockControlsInner - struct for ContentKitBlockControlsInner
type ContentKitBlockControlsInner struct {
	ContentKitBlockControl        *ContentKitBlockControl
	ArrayOfContentKitBlockControl *[]ContentKitBlockControl
}

// ContentKitBlockControlAsContentKitBlockControlsInner is a convenience function that returns ContentKitBlockControl wrapped in ContentKitBlockControlsInner
func ContentKitBlockControlAsContentKitBlockControlsInner(v *ContentKitBlockControl) ContentKitBlockControlsInner {
	return ContentKitBlockControlsInner{
		ContentKitBlockControl: v,
	}
}

// []ContentKitBlockControlAsContentKitBlockControlsInner is a convenience function that returns []ContentKitBlockControl wrapped in ContentKitBlockControlsInner
func ArrayOfContentKitBlockControlAsContentKitBlockControlsInner(v *[]ContentKitBlockControl) ContentKitBlockControlsInner {
	return ContentKitBlockControlsInner{
		ArrayOfContentKitBlockControl: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentKitBlockControlsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContentKitBlockControl
	err = newStrictDecoder(data).Decode(&dst.ContentKitBlockControl)
	if err == nil {
		jsonContentKitBlockControl, _ := json.Marshal(dst.ContentKitBlockControl)
		if string(jsonContentKitBlockControl) == "{}" { // empty struct
			dst.ContentKitBlockControl = nil
		} else {
			match++
		}
	} else {
		dst.ContentKitBlockControl = nil
	}

	// try to unmarshal data into ArrayOfContentKitBlockControl
	err = newStrictDecoder(data).Decode(&dst.ArrayOfContentKitBlockControl)
	if err == nil {
		jsonArrayOfContentKitBlockControl, _ := json.Marshal(dst.ArrayOfContentKitBlockControl)
		if string(jsonArrayOfContentKitBlockControl) == "{}" { // empty struct
			dst.ArrayOfContentKitBlockControl = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfContentKitBlockControl = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContentKitBlockControl = nil
		dst.ArrayOfContentKitBlockControl = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentKitBlockControlsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentKitBlockControlsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentKitBlockControlsInner) MarshalJSON() ([]byte, error) {
	if src.ContentKitBlockControl != nil {
		return json.Marshal(&src.ContentKitBlockControl)
	}

	if src.ArrayOfContentKitBlockControl != nil {
		return json.Marshal(&src.ArrayOfContentKitBlockControl)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentKitBlockControlsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ContentKitBlockControl != nil {
		return obj.ContentKitBlockControl
	}

	if obj.ArrayOfContentKitBlockControl != nil {
		return obj.ArrayOfContentKitBlockControl
	}

	// all schemas are nil
	return nil
}

type NullableContentKitBlockControlsInner struct {
	value *ContentKitBlockControlsInner
	isSet bool
}

func (v NullableContentKitBlockControlsInner) Get() *ContentKitBlockControlsInner {
	return v.value
}

func (v *NullableContentKitBlockControlsInner) Set(val *ContentKitBlockControlsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitBlockControlsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitBlockControlsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitBlockControlsInner(val *ContentKitBlockControlsInner) *NullableContentKitBlockControlsInner {
	return &NullableContentKitBlockControlsInner{value: val, isSet: true}
}

func (v NullableContentKitBlockControlsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitBlockControlsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
