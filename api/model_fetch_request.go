/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the FetchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchRequest{}

// FetchRequest struct for FetchRequest
type FetchRequest struct {
	Method  string            `json:"method"`
	Url     string            `json:"url"`
	Headers map[string]string `json:"headers"`
}

// NewFetchRequest instantiates a new FetchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchRequest(method string, url string, headers map[string]string) *FetchRequest {
	this := FetchRequest{}
	this.Method = method
	this.Url = url
	this.Headers = headers
	return &this
}

// NewFetchRequestWithDefaults instantiates a new FetchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchRequestWithDefaults() *FetchRequest {
	this := FetchRequest{}
	return &this
}

// GetMethod returns the Method field value
func (o *FetchRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *FetchRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *FetchRequest) SetMethod(v string) {
	o.Method = v
}

// GetUrl returns the Url field value
func (o *FetchRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FetchRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FetchRequest) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value
func (o *FetchRequest) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *FetchRequest) GetHeadersOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *FetchRequest) SetHeaders(v map[string]string) {
	o.Headers = v
}

func (o FetchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	toSerialize["url"] = o.Url
	toSerialize["headers"] = o.Headers
	return toSerialize, nil
}

type NullableFetchRequest struct {
	value *FetchRequest
	isSet bool
}

func (v NullableFetchRequest) Get() *FetchRequest {
	return v.value
}

func (v *NullableFetchRequest) Set(val *FetchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchRequest(val *FetchRequest) *NullableFetchRequest {
	return &NullableFetchRequest{value: val, isSet: true}
}

func (v NullableFetchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
