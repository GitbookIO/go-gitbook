/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitContextConfigurationSpace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitContextConfigurationSpace{}

// ContentKitContextConfigurationSpace struct for ContentKitContextConfigurationSpace
type ContentKitContextConfigurationSpace struct {
	Theme string `json:"theme"`
	Type  string `json:"type"`
	// ID of the space the space-installation configuration is in.
	SpaceId string `json:"spaceId"`
}

// NewContentKitContextConfigurationSpace instantiates a new ContentKitContextConfigurationSpace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitContextConfigurationSpace(theme string, type_ string, spaceId string) *ContentKitContextConfigurationSpace {
	this := ContentKitContextConfigurationSpace{}
	this.Theme = theme
	this.Type = type_
	this.SpaceId = spaceId
	return &this
}

// NewContentKitContextConfigurationSpaceWithDefaults instantiates a new ContentKitContextConfigurationSpace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitContextConfigurationSpaceWithDefaults() *ContentKitContextConfigurationSpace {
	this := ContentKitContextConfigurationSpace{}
	return &this
}

// GetTheme returns the Theme field value
func (o *ContentKitContextConfigurationSpace) GetTheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Theme
}

// GetThemeOk returns a tuple with the Theme field value
// and a boolean to check if the value has been set.
func (o *ContentKitContextConfigurationSpace) GetThemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Theme, true
}

// SetTheme sets field value
func (o *ContentKitContextConfigurationSpace) SetTheme(v string) {
	o.Theme = v
}

// GetType returns the Type field value
func (o *ContentKitContextConfigurationSpace) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentKitContextConfigurationSpace) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentKitContextConfigurationSpace) SetType(v string) {
	o.Type = v
}

// GetSpaceId returns the SpaceId field value
func (o *ContentKitContextConfigurationSpace) GetSpaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value
// and a boolean to check if the value has been set.
func (o *ContentKitContextConfigurationSpace) GetSpaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceId, true
}

// SetSpaceId sets field value
func (o *ContentKitContextConfigurationSpace) SetSpaceId(v string) {
	o.SpaceId = v
}

func (o ContentKitContextConfigurationSpace) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitContextConfigurationSpace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["theme"] = o.Theme
	toSerialize["type"] = o.Type
	toSerialize["spaceId"] = o.SpaceId
	return toSerialize, nil
}

type NullableContentKitContextConfigurationSpace struct {
	value *ContentKitContextConfigurationSpace
	isSet bool
}

func (v NullableContentKitContextConfigurationSpace) Get() *ContentKitContextConfigurationSpace {
	return v.value
}

func (v *NullableContentKitContextConfigurationSpace) Set(val *ContentKitContextConfigurationSpace) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitContextConfigurationSpace) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitContextConfigurationSpace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitContextConfigurationSpace(val *ContentKitContextConfigurationSpace) *NullableContentKitContextConfigurationSpace {
	return &NullableContentKitContextConfigurationSpace{value: val, isSet: true}
}

func (v NullableContentKitContextConfigurationSpace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitContextConfigurationSpace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
