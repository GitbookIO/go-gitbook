// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the CommentAllOfTargetNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentAllOfTargetNode{}

// CommentAllOfTargetNode The node this comment is attached to.
type CommentAllOfTargetNode struct {
	Id      *string `json:"id,omitempty"`
	Preview *string `json:"preview,omitempty"`
}

// NewCommentAllOfTargetNode instantiates a new CommentAllOfTargetNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentAllOfTargetNode() *CommentAllOfTargetNode {
	this := CommentAllOfTargetNode{}
	return &this
}

// NewCommentAllOfTargetNodeWithDefaults instantiates a new CommentAllOfTargetNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentAllOfTargetNodeWithDefaults() *CommentAllOfTargetNode {
	this := CommentAllOfTargetNode{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommentAllOfTargetNode) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentAllOfTargetNode) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommentAllOfTargetNode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommentAllOfTargetNode) SetId(v string) {
	o.Id = &v
}

// GetPreview returns the Preview field value if set, zero value otherwise.
func (o *CommentAllOfTargetNode) GetPreview() string {
	if o == nil || IsNil(o.Preview) {
		var ret string
		return ret
	}
	return *o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentAllOfTargetNode) GetPreviewOk() (*string, bool) {
	if o == nil || IsNil(o.Preview) {
		return nil, false
	}
	return o.Preview, true
}

// HasPreview returns a boolean if a field has been set.
func (o *CommentAllOfTargetNode) HasPreview() bool {
	if o != nil && !IsNil(o.Preview) {
		return true
	}

	return false
}

// SetPreview gets a reference to the given string and assigns it to the Preview field.
func (o *CommentAllOfTargetNode) SetPreview(v string) {
	o.Preview = &v
}

func (o CommentAllOfTargetNode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentAllOfTargetNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Preview) {
		toSerialize["preview"] = o.Preview
	}
	return toSerialize, nil
}

type NullableCommentAllOfTargetNode struct {
	value *CommentAllOfTargetNode
	isSet bool
}

func (v NullableCommentAllOfTargetNode) Get() *CommentAllOfTargetNode {
	return v.value
}

func (v *NullableCommentAllOfTargetNode) Set(val *CommentAllOfTargetNode) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentAllOfTargetNode) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentAllOfTargetNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentAllOfTargetNode(val *CommentAllOfTargetNode) *NullableCommentAllOfTargetNode {
	return &NullableCommentAllOfTargetNode{value: val, isSet: true}
}

func (v NullableCommentAllOfTargetNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentAllOfTargetNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
