/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// AnalyticsSearchPeriod the model 'AnalyticsSearchPeriod'
type AnalyticsSearchPeriod string

// List of AnalyticsSearchPeriod
const (
	ANALYTICSSEARCHPERIOD_MONTH AnalyticsSearchPeriod = "last_month"
	ANALYTICSSEARCHPERIOD_WEEK  AnalyticsSearchPeriod = "last_week"
	ANALYTICSSEARCHPERIOD_YEAR  AnalyticsSearchPeriod = "last_year"
)

// All allowed values of AnalyticsSearchPeriod enum
var AllowedAnalyticsSearchPeriodEnumValues = []AnalyticsSearchPeriod{
	"last_month",
	"last_week",
	"last_year",
}

func (v *AnalyticsSearchPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticsSearchPeriod(value)
	for _, existing := range AllowedAnalyticsSearchPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticsSearchPeriod", value)
}

// NewAnalyticsSearchPeriodFromValue returns a pointer to a valid AnalyticsSearchPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticsSearchPeriodFromValue(v string) (*AnalyticsSearchPeriod, error) {
	ev := AnalyticsSearchPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticsSearchPeriod: valid values are %v", v, AllowedAnalyticsSearchPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticsSearchPeriod) IsValid() bool {
	for _, existing := range AllowedAnalyticsSearchPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticsSearchPeriod value
func (v AnalyticsSearchPeriod) Ptr() *AnalyticsSearchPeriod {
	return &v
}

type NullableAnalyticsSearchPeriod struct {
	value *AnalyticsSearchPeriod
	isSet bool
}

func (v NullableAnalyticsSearchPeriod) Get() *AnalyticsSearchPeriod {
	return v.value
}

func (v *NullableAnalyticsSearchPeriod) Set(val *AnalyticsSearchPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsSearchPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsSearchPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsSearchPeriod(val *AnalyticsSearchPeriod) *NullableAnalyticsSearchPeriod {
	return &NullableAnalyticsSearchPeriod{value: val, isSet: true}
}

func (v NullableAnalyticsSearchPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsSearchPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
