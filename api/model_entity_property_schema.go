/*
Copyright 2023 GitBook, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the EntityPropertySchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityPropertySchema{}

// EntityPropertySchema struct for EntityPropertySchema
type EntityPropertySchema struct {
	// Name of the property in the object
	Name string `json:"name"`
	// Title displayed to the users
	Title string `json:"title"`
	// Description of the property
	Description *string `json:"description,omitempty"`
	// If true, the property is no longer required and not taken into consideration
	Deprecated *bool                    `json:"deprecated,omitempty"`
	Type       string                   `json:"type"`
	Role       *string                  `json:"role,omitempty"`
	Values     []map[string]interface{} `json:"values"`
	Entity     map[string]interface{}   `json:"entity"`
}

// NewEntityPropertySchema instantiates a new EntityPropertySchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityPropertySchema(name string, title string, type_ string, values []map[string]interface{}, entity map[string]interface{}) *EntityPropertySchema {
	this := EntityPropertySchema{}
	this.Name = name
	this.Title = title
	this.Type = type_
	this.Values = values
	this.Entity = entity
	return &this
}

// NewEntityPropertySchemaWithDefaults instantiates a new EntityPropertySchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityPropertySchemaWithDefaults() *EntityPropertySchema {
	this := EntityPropertySchema{}
	return &this
}

// GetName returns the Name field value
func (o *EntityPropertySchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EntityPropertySchema) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value
func (o *EntityPropertySchema) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *EntityPropertySchema) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EntityPropertySchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EntityPropertySchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EntityPropertySchema) SetDescription(v string) {
	o.Description = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *EntityPropertySchema) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *EntityPropertySchema) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *EntityPropertySchema) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetType returns the Type field value
func (o *EntityPropertySchema) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EntityPropertySchema) SetType(v string) {
	o.Type = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *EntityPropertySchema) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *EntityPropertySchema) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *EntityPropertySchema) SetRole(v string) {
	o.Role = &v
}

// GetValues returns the Values field value
func (o *EntityPropertySchema) GetValues() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetValuesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *EntityPropertySchema) SetValues(v []map[string]interface{}) {
	o.Values = v
}

// GetEntity returns the Entity field value
func (o *EntityPropertySchema) GetEntity() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *EntityPropertySchema) GetEntityOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *EntityPropertySchema) SetEntity(v map[string]interface{}) {
	o.Entity = v
}

func (o EntityPropertySchema) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityPropertySchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["title"] = o.Title
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	toSerialize["values"] = o.Values
	toSerialize["entity"] = o.Entity
	return toSerialize, nil
}

type NullableEntityPropertySchema struct {
	value *EntityPropertySchema
	isSet bool
}

func (v NullableEntityPropertySchema) Get() *EntityPropertySchema {
	return v.value
}

func (v *NullableEntityPropertySchema) Set(val *EntityPropertySchema) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityPropertySchema) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityPropertySchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityPropertySchema(val *EntityPropertySchema) *NullableEntityPropertySchema {
	return &NullableEntityPropertySchema{value: val, isSet: true}
}

func (v NullableEntityPropertySchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityPropertySchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
