// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the IntegrationUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationUrls{}

// IntegrationUrls URLs associated with the object
type IntegrationUrls struct {
	// URL of the icon associated to the integration
	Icon *string `json:"icon,omitempty"`
	// URL of the integration in the application
	App string `json:"app"`
	// URL of the integration's assets.
	Assets string `json:"assets"`
	// Public HTTP endpoint for the integration
	PublicEndpoint string `json:"publicEndpoint"`
}

// NewIntegrationUrls instantiates a new IntegrationUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationUrls(app string, assets string, publicEndpoint string) *IntegrationUrls {
	this := IntegrationUrls{}
	this.App = app
	this.Assets = assets
	this.PublicEndpoint = publicEndpoint
	return &this
}

// NewIntegrationUrlsWithDefaults instantiates a new IntegrationUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationUrlsWithDefaults() *IntegrationUrls {
	this := IntegrationUrls{}
	return &this
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *IntegrationUrls) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationUrls) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *IntegrationUrls) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *IntegrationUrls) SetIcon(v string) {
	o.Icon = &v
}

// GetApp returns the App field value
func (o *IntegrationUrls) GetApp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.App
}

// GetAppOk returns a tuple with the App field value
// and a boolean to check if the value has been set.
func (o *IntegrationUrls) GetAppOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.App, true
}

// SetApp sets field value
func (o *IntegrationUrls) SetApp(v string) {
	o.App = v
}

// GetAssets returns the Assets field value
func (o *IntegrationUrls) GetAssets() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *IntegrationUrls) GetAssetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *IntegrationUrls) SetAssets(v string) {
	o.Assets = v
}

// GetPublicEndpoint returns the PublicEndpoint field value
func (o *IntegrationUrls) GetPublicEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicEndpoint
}

// GetPublicEndpointOk returns a tuple with the PublicEndpoint field value
// and a boolean to check if the value has been set.
func (o *IntegrationUrls) GetPublicEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicEndpoint, true
}

// SetPublicEndpoint sets field value
func (o *IntegrationUrls) SetPublicEndpoint(v string) {
	o.PublicEndpoint = v
}

func (o IntegrationUrls) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["app"] = o.App
	toSerialize["assets"] = o.Assets
	toSerialize["publicEndpoint"] = o.PublicEndpoint
	return toSerialize, nil
}

type NullableIntegrationUrls struct {
	value *IntegrationUrls
	isSet bool
}

func (v NullableIntegrationUrls) Get() *IntegrationUrls {
	return v.value
}

func (v *NullableIntegrationUrls) Set(val *IntegrationUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationUrls(val *IntegrationUrls) *NullableIntegrationUrls {
	return &NullableIntegrationUrls{value: val, isSet: true}
}

func (v NullableIntegrationUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
