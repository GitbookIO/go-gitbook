// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the AnalyticsTrafficPageViews type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsTrafficPageViews{}

// AnalyticsTrafficPageViews struct for AnalyticsTrafficPageViews
type AnalyticsTrafficPageViews struct {
	// Total number of page views over the period.
	Count float32 `json:"count"`
	// Page views per interval (day, week, month).
	Views []AnalyticsTrafficPageViewsViewsInner `json:"views"`
}

// NewAnalyticsTrafficPageViews instantiates a new AnalyticsTrafficPageViews object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsTrafficPageViews(count float32, views []AnalyticsTrafficPageViewsViewsInner) *AnalyticsTrafficPageViews {
	this := AnalyticsTrafficPageViews{}
	this.Count = count
	this.Views = views
	return &this
}

// NewAnalyticsTrafficPageViewsWithDefaults instantiates a new AnalyticsTrafficPageViews object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsTrafficPageViewsWithDefaults() *AnalyticsTrafficPageViews {
	this := AnalyticsTrafficPageViews{}
	return &this
}

// GetCount returns the Count field value
func (o *AnalyticsTrafficPageViews) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AnalyticsTrafficPageViews) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AnalyticsTrafficPageViews) SetCount(v float32) {
	o.Count = v
}

// GetViews returns the Views field value
func (o *AnalyticsTrafficPageViews) GetViews() []AnalyticsTrafficPageViewsViewsInner {
	if o == nil {
		var ret []AnalyticsTrafficPageViewsViewsInner
		return ret
	}

	return o.Views
}

// GetViewsOk returns a tuple with the Views field value
// and a boolean to check if the value has been set.
func (o *AnalyticsTrafficPageViews) GetViewsOk() ([]AnalyticsTrafficPageViewsViewsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Views, true
}

// SetViews sets field value
func (o *AnalyticsTrafficPageViews) SetViews(v []AnalyticsTrafficPageViewsViewsInner) {
	o.Views = v
}

func (o AnalyticsTrafficPageViews) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsTrafficPageViews) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["views"] = o.Views
	return toSerialize, nil
}

type NullableAnalyticsTrafficPageViews struct {
	value *AnalyticsTrafficPageViews
	isSet bool
}

func (v NullableAnalyticsTrafficPageViews) Get() *AnalyticsTrafficPageViews {
	return v.value
}

func (v *NullableAnalyticsTrafficPageViews) Set(val *AnalyticsTrafficPageViews) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsTrafficPageViews) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsTrafficPageViews) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsTrafficPageViews(val *AnalyticsTrafficPageViews) *NullableAnalyticsTrafficPageViews {
	return &NullableAnalyticsTrafficPageViews{value: val, isSet: true}
}

func (v NullableAnalyticsTrafficPageViews) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsTrafficPageViews) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
