// Copyright 2023 GitBook, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the RevisionBaseUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevisionBaseUrls{}

// RevisionBaseUrls struct for RevisionBaseUrls
type RevisionBaseUrls struct {
	// URL in the application for the revision
	App string `json:"app"`
	// URL of the published version of the revision. Only defined when the space visibility is not \"private.\"
	Published *string `json:"published,omitempty"`
	// URL of the public version of the revision. Only defined when the space visibility is \"public\".
	Public *string `json:"public,omitempty"`
}

// NewRevisionBaseUrls instantiates a new RevisionBaseUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionBaseUrls(app string) *RevisionBaseUrls {
	this := RevisionBaseUrls{}
	this.App = app
	return &this
}

// NewRevisionBaseUrlsWithDefaults instantiates a new RevisionBaseUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionBaseUrlsWithDefaults() *RevisionBaseUrls {
	this := RevisionBaseUrls{}
	return &this
}

// GetApp returns the App field value
func (o *RevisionBaseUrls) GetApp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.App
}

// GetAppOk returns a tuple with the App field value
// and a boolean to check if the value has been set.
func (o *RevisionBaseUrls) GetAppOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.App, true
}

// SetApp sets field value
func (o *RevisionBaseUrls) SetApp(v string) {
	o.App = v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *RevisionBaseUrls) GetPublished() string {
	if o == nil || IsNil(o.Published) {
		var ret string
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionBaseUrls) GetPublishedOk() (*string, bool) {
	if o == nil || IsNil(o.Published) {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *RevisionBaseUrls) HasPublished() bool {
	if o != nil && !IsNil(o.Published) {
		return true
	}

	return false
}

// SetPublished gets a reference to the given string and assigns it to the Published field.
func (o *RevisionBaseUrls) SetPublished(v string) {
	o.Published = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *RevisionBaseUrls) GetPublic() string {
	if o == nil || IsNil(o.Public) {
		var ret string
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionBaseUrls) GetPublicOk() (*string, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *RevisionBaseUrls) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given string and assigns it to the Public field.
func (o *RevisionBaseUrls) SetPublic(v string) {
	o.Public = &v
}

func (o RevisionBaseUrls) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevisionBaseUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["app"] = o.App
	if !IsNil(o.Published) {
		toSerialize["published"] = o.Published
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	return toSerialize, nil
}

type NullableRevisionBaseUrls struct {
	value *RevisionBaseUrls
	isSet bool
}

func (v NullableRevisionBaseUrls) Get() *RevisionBaseUrls {
	return v.value
}

func (v *NullableRevisionBaseUrls) Set(val *RevisionBaseUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionBaseUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionBaseUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionBaseUrls(val *RevisionBaseUrls) *NullableRevisionBaseUrls {
	return &NullableRevisionBaseUrls{value: val, isSet: true}
}

func (v NullableRevisionBaseUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionBaseUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
