/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ContentKitConfirm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKitConfirm{}

// ContentKitConfirm A confirm object that defines an optional confirmation dialog after the input is clicked.
type ContentKitConfirm struct {
	// A text value that defines the dialog's title.
	Title string `json:"title"`
	// A text value that defines the explanatory text that appears in the confirm dialog.
	Text string `json:"text"`
	// A text value to define the text of the button that confirms the action.
	Confirm string  `json:"confirm"`
	Style   *string `json:"style,omitempty"`
}

// NewContentKitConfirm instantiates a new ContentKitConfirm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKitConfirm(title string, text string, confirm string) *ContentKitConfirm {
	this := ContentKitConfirm{}
	this.Title = title
	this.Text = text
	this.Confirm = confirm
	return &this
}

// NewContentKitConfirmWithDefaults instantiates a new ContentKitConfirm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKitConfirmWithDefaults() *ContentKitConfirm {
	this := ContentKitConfirm{}
	return &this
}

// GetTitle returns the Title field value
func (o *ContentKitConfirm) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ContentKitConfirm) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ContentKitConfirm) SetTitle(v string) {
	o.Title = v
}

// GetText returns the Text field value
func (o *ContentKitConfirm) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ContentKitConfirm) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ContentKitConfirm) SetText(v string) {
	o.Text = v
}

// GetConfirm returns the Confirm field value
func (o *ContentKitConfirm) GetConfirm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Confirm
}

// GetConfirmOk returns a tuple with the Confirm field value
// and a boolean to check if the value has been set.
func (o *ContentKitConfirm) GetConfirmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Confirm, true
}

// SetConfirm sets field value
func (o *ContentKitConfirm) SetConfirm(v string) {
	o.Confirm = v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *ContentKitConfirm) GetStyle() string {
	if o == nil || IsNil(o.Style) {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKitConfirm) GetStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *ContentKitConfirm) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *ContentKitConfirm) SetStyle(v string) {
	o.Style = &v
}

func (o ContentKitConfirm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKitConfirm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["text"] = o.Text
	toSerialize["confirm"] = o.Confirm
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	return toSerialize, nil
}

type NullableContentKitConfirm struct {
	value *ContentKitConfirm
	isSet bool
}

func (v NullableContentKitConfirm) Get() *ContentKitConfirm {
	return v.value
}

func (v *NullableContentKitConfirm) Set(val *ContentKitConfirm) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKitConfirm) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKitConfirm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKitConfirm(val *ContentKitConfirm) *NullableContentKitConfirm {
	return &NullableContentKitConfirm{value: val, isSet: true}
}

func (v NullableContentKitConfirm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKitConfirm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
