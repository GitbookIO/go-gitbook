/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
)

// checks if the ListNext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListNext{}

// ListNext struct for ListNext
type ListNext struct {
	// Unique identifier to query the next results page
	Page string `json:"page"`
}

// NewListNext instantiates a new ListNext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListNext(page string) *ListNext {
	this := ListNext{}
	this.Page = page
	return &this
}

// NewListNextWithDefaults instantiates a new ListNext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListNextWithDefaults() *ListNext {
	this := ListNext{}
	return &this
}

// GetPage returns the Page field value
func (o *ListNext) GetPage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *ListNext) GetPageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *ListNext) SetPage(v string) {
	o.Page = v
}

func (o ListNext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListNext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["page"] = o.Page
	return toSerialize, nil
}

type NullableListNext struct {
	value *ListNext
	isSet bool
}

func (v NullableListNext) Get() *ListNext {
	return v.value
}

func (v *NullableListNext) Set(val *ListNext) {
	v.value = val
	v.isSet = true
}

func (v NullableListNext) IsSet() bool {
	return v.isSet
}

func (v *NullableListNext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNext(val *ListNext) *NullableListNext {
	return &NullableListNext{value: val, isSet: true}
}

func (v NullableListNext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
