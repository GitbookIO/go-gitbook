/*
GitBook API

The GitBook API

API version: 0.0.1-beta
Contact: support@gitbook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gitbook

import (
	"encoding/json"
	"fmt"
)

// MemberRole \"The role of a member in an organization. \"admin\": Can administrate the content: create, delete spaces, ... \"create\": Can create content. \"review\": Can review content. \"edit\": Can edit the content (live or change requests). \"comment\": Can access the content and its discussions. \"read\": Can access the content, but cannot update it in any way.
type MemberRole string

// List of MemberRole
const (
	MEMBERROLE_ADMIN   MemberRole = "admin"
	MEMBERROLE_CREATE  MemberRole = "create"
	MEMBERROLE_EDIT    MemberRole = "edit"
	MEMBERROLE_REVIEW  MemberRole = "review"
	MEMBERROLE_COMMENT MemberRole = "comment"
	MEMBERROLE_READ    MemberRole = "read"
)

// All allowed values of MemberRole enum
var AllowedMemberRoleEnumValues = []MemberRole{
	"admin",
	"create",
	"edit",
	"review",
	"comment",
	"read",
}

func (v *MemberRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberRole(value)
	for _, existing := range AllowedMemberRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberRole", value)
}

// NewMemberRoleFromValue returns a pointer to a valid MemberRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberRoleFromValue(v string) (*MemberRole, error) {
	ev := MemberRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberRole: valid values are %v", v, AllowedMemberRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberRole) IsValid() bool {
	for _, existing := range AllowedMemberRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemberRole value
func (v MemberRole) Ptr() *MemberRole {
	return &v
}

type NullableMemberRole struct {
	value *MemberRole
	isSet bool
}

func (v NullableMemberRole) Get() *MemberRole {
	return v.value
}

func (v *NullableMemberRole) Set(val *MemberRole) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberRole) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberRole(val *MemberRole) *NullableMemberRole {
	return &NullableMemberRole{value: val, isSet: true}
}

func (v NullableMemberRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
